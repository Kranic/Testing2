/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./setupDarkMode.js":
/*!**************************!*\
  !*** ./setupDarkMode.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setupDarkMode": () => (/* binding */ setupDarkMode),
/* harmony export */   "createDarkModeCSS": () => (/* binding */ createDarkModeCSS)
/* harmony export */ });
// Dark Mode Stylesheet
function createDarkModeCSS() {
	const css = document.createElement('link');
	css.rel = 'stylesheet';
	css.href = '/assets/editorDarkMode.css';
	css.id = 'theme-link';
	return css;
}

// Dark Mode switch
const darkModeToggle = document.querySelector('#dark-mode-switch');
const darkModeLocalStorageValue = window.localStorage.getItem('colorTheme');
function getDarkModeToggleState() {
	return darkModeToggle.checked;
}

/**
 * Send color theme choice to Google Analytics
 */
function reportColorTheme() {
	ga('send', {
		hitType: 'event',
		eventCategory: 'VTT',
		eventAction: getDarkModeToggleState() ? 'Dark' : 'Light',
		eventLabel: 'UI-Theme',
	});
}

function fireSprigEvent() {
	try {
		Sprig('track', 'Dark Mode');
	} catch (err) {
		window.DD_RUM?.addError(err);
	}
}

function createShepherdTour() {
	// Popup messaging
	const darkModetour = new Shepherd.Tour({
		defaultStepOptions: {
			cancelIcon: {
				enabled: true,
			},
			classes: 'roll20-darkmode-step',
		},
	});
	darkModetour.addStep({
		title: i18n('dark_mode_popup_title'),
		text: i18n('dark_mode_popup_desc'),
		attachTo: {
			element: '.dark-mode-switch',
			on: 'right',
		},
		buttons: [
			{
				action() {
					const theme = getDarkModeToggleState() ? 'dark' : 'light';
					window.localStorage.setItem('colorTheme', theme);
					return this.cancel();
				},
				classes: 'shepherd-button-secondary',
				text: 'Dismiss',
			},
		],
		popperOptions: {
			modifiers: [{ name: 'offset', options: { offset: [0, 20] } }],
		},
		id: 'darkModeModal',
	});

	return darkModetour;
}

// Initializes the localStorage value and enables the switch
function setupDarkMode() {
	if (localStorage.getItem('colorTheme') === null) {
		createShepherdTour().start();
	}
	// If there is a value in local storage then use that
	if (darkModeLocalStorageValue) {
		darkModeToggle.checked = darkModeLocalStorageValue === 'dark';
	} else { // otherwise, use a media query to check the browser preference
		const darkModePreferred = window.matchMedia('(prefers-color-scheme: dark)').matches;
		darkModeToggle.checked = darkModePreferred;
	}

	if (getDarkModeToggleState()) {
		document.body.append(createDarkModeCSS());
		document.querySelector('.dark-mode-switch .tooltiptext').innerHTML = i18n('dark_mode_disable');
	}

	darkModeToggle.disabled = false;

	// If the user manually toggles the switch, then save their preference to local storage
	darkModeToggle.addEventListener('change', () => {
		const theme = getDarkModeToggleState() ? 'dark' : 'light';
		window.localStorage.setItem('colorTheme', theme);

		const themeCSS = document.querySelector('#theme-link');
		if (themeCSS) {
			if (themeCSS.getAttribute('href') === '') {
				themeCSS.href = '/assets/editorDarkMode.css';
			} else {
				themeCSS.href = '';
			}
		} else {
			document.body.append(createDarkModeCSS());
		}

		if (theme === 'dark') {
			document.querySelector('.dark-mode-switch .tooltiptext').innerHTML = i18n('dark_mode_disable');
			if($('iframe')){
				$('iframe').contents().find('body').attr('class','sheet-darkmode');
				$('#textchat').addClass('sheet-darkmode');
				$('#textchat [class^="sheet-rolltemplate-"]').addClass('sheet-rolltemplate-darkmode');
			}

		} else {
			document.querySelector('.dark-mode-switch .tooltiptext').innerHTML = i18n('dark_mode_enable');
			if($('iframe')){
				$('iframe').contents().find('body').attr('class','');
				$('#textchat').removeClass('sheet-darkmode');
				$('#textchat .sheet-rolltemplate-darkmode').removeClass('sheet-rolltemplate-darkmode');
			}
		}
	});

	reportColorTheme();
	if (getDarkModeToggleState()) {
		fireSprigEvent();
	}
}




/***/ }),

/***/ "./util/Matrix.js":
/*!************************!*\
  !*** ./util/Matrix.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Matrix)
/* harmony export */ });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math */ "./util/math.js");


class Matrix {
	/**
	 * @constructs
	 * @param {Array<number>} amounts - Factor to scale by in each direction.
	 * @returns {Matrix} Scaling matrix
	 */
	static scale(amounts) {
		const len = amounts.length;
		const m = Matrix.identity(len);
		for(let i = 0; i < len; ++i) {
			m.data[i * len + i] = amounts[i];
		}
		return m;
	}

	/**
	 * @constructs
	 * @param {Array<number>} amounts - Factor to translate by in each direction.
	 * @returns {Matrix} Translation matrix
	 */
	static translate(amounts) {
		const len = amounts.length + 1;
		const m = Matrix.identity(len);
		for(let i = 1; i < len; ++i) {
			m.data[i * len - 1] = amounts[i - 1];
		}
		return m;
	}

	/**
	 * @constructs
	 * @param {number} radians - Amount by which to rotate
	 * @param {number} [final_dimensionality = 2] - The dimension of the final matrix
	 * @returns {Matrix} Rotation matrix
	 */
	static rotate2D(radians, final_dimensionality = 2) {
		const sin = Math.sin(radians), cos = Math.cos(radians);
		const out = this.identity(final_dimensionality);
		out.data[0] = cos;
		out.data[1] = -sin;
		out.data[final_dimensionality] = sin;
		out.data[final_dimensionality + 1] = cos;
		return out;
	}

	/**
	 * @constructs
	 * @param {number} size - Dimension of the matrix in both directions.
	 * @returns {Matrix} Identity matrix
	 */
	static identity(size) {
		const data = new Array(size * size).fill(0);
		for(let i = 0; i < size; ++i) {
			data[i * size + i] = 1;
		}
		return new Matrix(data, size, size);
	}

	/**
	 * @constructs
	 * @param {Array<Number>} data - Elements of the matrix, in row-major order.
	 * @param {Number} m - Number of rows.
	 * @param {Number} n - Number of columns.
	 */
	constructor(data, m, n) {
		this.m = this.rows = m;
		this.n = this.cols = n;
		this.data = Object.assign([], data);
	}

	/**
	 * @returns {Matrix} A clone of this Matrix.
	 */
	clone() {
		return new this.constructor(this.data, this.m, this.n);
	}

	/**
	 * @return {Array<Array<Number>>} List of rows.
	 */
	getRows() {
		let r = new Array(this.rows);
		let i = 0;
		while(i < this.cols) {
			r[i] = this.data.slice(i * this.cols, ++i * this.cols);
		}
		return r;
	}

	/**
	 * @return {Array<Array<Number>>} List of columns
	 */
	getCols(){
		let r = new Array(this.cols);
		for(let i = 0; i < this.cols; ++i) {
			r[i] = new Array(this.rows);
			for(let j = 0; j < this.rows; ++j) {
				r[i][j] = this.data[j * this.cols + i];
			}
		}
		return r;
	}

	/**
	 * @return {Matrix} Transposed copy of this matrix.
	 */
	transpose() {
		return new Matrix(_.flatten(this.getCols()), this.cols, this.rows);
	}

	/**
	 * Multiply this matrix with another matrix or vector.
	 * @param {(Matrix | Array<Number>)} mat - Matrix or vector with which to multiply.
	 * @return {(Matrix | Array<Number>)} Result matrix or vector.
	 */
	mul(mat) {
		if(this.cols === mat.rows) { // mat is another matrix
			let self = this.getRows();
			let other = mat.getCols();
			let r = new Array(this.rows * mat.cols);
			for(let i = 0; i < this.rows; ++i) {
				for(let j = 0; j < mat.cols; ++j) {
					r[i * mat.cols + j] = (0,_math__WEBPACK_IMPORTED_MODULE_0__.dot)(self[i], other[j]);
				}
			}
			return new Matrix(r, mat.cols, this.rows);
		}
		else if(this.cols === mat.length) { // mat is a vector
			let self = this.getRows();
			let r = new Array(this.rows);
			for(let i = 0; i < this.rows; ++i) {
				r[i] = (0,_math__WEBPACK_IMPORTED_MODULE_0__.dot)(self[i], mat);
			}
			return r;
		}
		else if(this.rows === mat.length) { // mat is a vector
			let self = this.getCols();
			let r = new Array(this.cols);
			for(let i = 0; i < this.cols; ++i) {
				r[i] = (0,_math__WEBPACK_IMPORTED_MODULE_0__.dot)(self[i], mat);
			}
			return r;
		}
		else {
			return NaN;
		}
	}

	/**
	 * Create a new matrix of a different size which maintains the data from this Matrix.
	 * @param {number} m - Number of rows
	 * @param {number} n - Number of columns
	 * @returns The new Matrix
	 */
	resize(m, n) {			
		let new_data = this.getRows();
		new_data.splice(m, this.m - m, ...new Array(Math.max(m - this.m, 0)).fill(null));
		new_data = _.chain(new_data)
			.map(r => r === null ? new Array(n).fill(0) : r)
			.each(r => r.splice(n, r.length - n, ...new Array(Math.max(n - r.length, 0)).fill(0)))
			.value();

		return new this.constructor(new_data, m, n);
	}

	/**
	 * @returns {Float32Array} The values of this matrix in row-major order converted to a Float32Array.
	 */
	toFloat32Array() {
		return new Float32Array(this.data);
	}
}

/***/ }),

/***/ "./util/Observable.js":
/*!****************************!*\
  !*** ./util/Observable.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Observable)
/* harmony export */ });
/**
 * @classdesc A class which can be listened to for events.
 */
class Observable {
	/**
	 * @constructor
	 */
	constructor() {
		this.observers = new Map();
	}

	/**
	 * Add an event listener
	 * @param {*} event - The event for which to listen
	 * @param {Function} callback - What to do when the event fires
	 * @returns {Symbol} A reference for detaching this observer
	 */
	on(event, callback) {
		const ref = Symbol();
		let eventMap = this.observers.get(event);

		if (!eventMap) {
			eventMap = new Map();
			this.observers.set(event, eventMap);
		}
		eventMap.set(ref, callback);
		return ref;
	}

	/**
	 * Remove an event listener
	 * @param {*} event - The event which the listener is observing
	 * @param {Symbol} ref - The Symbol returned from on()
	 */
	off(event, ref) {
		const eventMap = this.observers.get(event);
		if (eventMap) {
			return eventMap.delete(ref);
		}
		return false;
	}

	/**
	 * Clear all observers from the specified events.
	 * If no events are given, then all observers are cleared from all events.
	 * @param {Iterable<any>} [events] - Events from which observers should be cleared
	 */
	clearEventObservers(events = null) {
		if (events === null) {
			this.observers = new Map();
		} else {
			for (const e of events) {
				this.observers.delete(e);
			}
		}
	}

	/**
	 * Trigger an event
	 * @param {*} event - Which event?
	 * @param  {...any} args - Argument list to be passed to observers
	 */
	trigger(event, ...args) {
		let iterable;
		try {
			iterable = this.observers.get(event).values();
		} catch (e) {
			return;
		}

		for (const callback of iterable) {
			callback(...args);
		}
	}
}


/***/ }),

/***/ "./util/Rectangle.js":
/*!***************************!*\
  !*** ./util/Rectangle.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Rectangle)
/* harmony export */ });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math */ "./util/math.js");
/* harmony import */ var _Matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Matrix */ "./util/Matrix.js");



class Rectangle {
	/**
	 * @constructs
	 * @param {Number} x - X coordinate of midpoint.
	 * @param {Number} y - Y coordinate of midpoint.
	 * @param {Number} w - Width of rectangle.
	 * @param {Number} h - Height of rectangle.
	 * @param {Number} theta - Angle of rotation, in radians.
	 */
	constructor(x, y, w, h, theta) {
		this.midpoint = [x, y];
		this.width = w;
		this.height = h;
		this.theta = theta % (Math.PI * 2);

		// Set points to be an offset from the midpoint, in case we need to rotate them
		const half_h = h * 0.5, half_w = w * 0.5;
		this.points = [
			[-half_w, -half_h], // Top-left
			[-half_w, half_h], // Bottom-left
			[half_w, half_h], // Bottom-right
			[half_w, -half_h] // Top-right
		];

		if(this.theta !== 0) {
			const sin = Math.sin(theta), cos = Math.cos(theta);

			this.rotation = new _Matrix__WEBPACK_IMPORTED_MODULE_1__["default"]([cos, -sin, sin, cos], 2, 2);
			this.rotation_inverse = this.rotation.transpose();
			this.points = _.map(this.points, p => this.rotation.mul(p));
		}

		// Move points to their absolute positions
		this.points = _.map(this.points, p => (0,_math__WEBPACK_IMPORTED_MODULE_0__.add)(p, this.midpoint));
	}

	/**
	 * Expand or contract this Rectangle by a given amount in each given direction in local space.
	 * @param {object} magnitudes
	 * @param {number} [magnitudes.left] -x
	 * @param {number} [magnitudes.right] +x
	 * @param {number} [magnitudes.up] -y
	 * @param {number} [magnitudes.down] +y
	 * @return {Rectangle} this
	 * @chainable
	 */
	resize(magnitudes) {
		const left = magnitudes.left || 0, right = magnitudes.right || 0;
		const up = magnitudes.up || 0, down = magnitudes.down || 0;
		let vectors = [
			[-left, 0],
			[right, 0],
			[0, -up],
			[0, down]
		];

		if(this.rotation) {
			vectors = _.map(vectors, v => this.rotation.mul(v));
		}

		this.points[0] = (0,_math__WEBPACK_IMPORTED_MODULE_0__.add)(this.points[0], vectors[0], vectors[2]);
		this.points[1] = (0,_math__WEBPACK_IMPORTED_MODULE_0__.add)(this.points[1], vectors[0], vectors[3]);
		this.points[2] = (0,_math__WEBPACK_IMPORTED_MODULE_0__.add)(this.points[2], vectors[1], vectors[3]);
		this.points[3] = (0,_math__WEBPACK_IMPORTED_MODULE_0__.add)(this.points[3], vectors[1], vectors[2]);

		this.width += left + right;
		this.height += up + down;
		this.midpoint = (0,_math__WEBPACK_IMPORTED_MODULE_0__.div)((0,_math__WEBPACK_IMPORTED_MODULE_0__.sub)(this.points[2], this.points[0]), 2);

		return this;
	}

	/**
	 * Translate this Rectangle by the given vector.
	 * @param {Array<number>} vector - 2 dimensional vector to translate by.
	 * @returns {Rectangle} this
	 * @chainable
	 */
	translate(vector) {
		this.midpoint = (0,_math__WEBPACK_IMPORTED_MODULE_0__.add)(this.midpoint, vector);
		this.points = _.map(this.points, p => (0,_math__WEBPACK_IMPORTED_MODULE_0__.add)(p, vector));
		return this;
	}

	/**
	 * Scale this Rectangle by the given vector in local space.
	 * @param {Array<number>} vector - 2 dimensional vector to scale by.
	 * @returns {Rectangle} this
	 * @chainable
	 */
	scale(vector) {
		const matrix = _Matrix__WEBPACK_IMPORTED_MODULE_1__["default"].scale(vector);
		this.points = _.map(this.points, p =>
			// Translate to origin, scale, translate back
			(0,_math__WEBPACK_IMPORTED_MODULE_0__.add)(
				matrix.mul(
					(0,_math__WEBPACK_IMPORTED_MODULE_0__.sub)(p, this.midpoint)
				),
				this.midpoint
			)
		);
		return this;
	}

	/**
	 * Use Separating Axis Theorem to test intersection.
	 * @param {Rectangle} rect - The rectangle with which to test intersection.
	 * @return {boolean} Whether the two rectangles intersect.
	 */
	rectangleIntersection(rect) {
		// Parallel normals are functionally identical for this algorithm, so only need 2 vectors.
		const get2Normals = (r) => {
			let normals = [
				[1, 0],
				[0, 1]
			];
			if(r.rotation) {
				return _.map(normals, n => r.rotation.mul(n));
			}
			return normals;
		};
		// Get the min and max of the shape projected upon this axis.
		const projectShape = (points, axis) => {
			let min = Number.POSITIVE_INFINITY, max = Number.NEGATIVE_INFINITY;
			for(const p of points) {
				const d = (0,_math__WEBPACK_IMPORTED_MODULE_0__.dot)(p, axis);
				min = Math.min(min, d);
				max = Math.max(max, d);
			}
			return { min: min, max: max };
		}

		const normals = [...get2Normals(this), ...get2Normals(rect)];
		let intersection = true;

		// We know that these shapes intersect if none of the normals are separating axes.
		for(const n of normals) {
			const mine = projectShape(this.points, n), other = projectShape(rect.points, n);
			if(mine.max < other.min || other.max < mine.min){
				// Found a separating axis; no intersection.
				intersection = false;
				break;
			}
		}
		return intersection;
	}
}


/***/ }),

/***/ "./util/math.js":
/*!**********************!*\
  !*** ./util/math.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "add": () => (/* binding */ add),
/* harmony export */   "sub": () => (/* binding */ sub),
/* harmony export */   "mul": () => (/* binding */ mul),
/* harmony export */   "div": () => (/* binding */ div),
/* harmony export */   "dot": () => (/* binding */ dot),
/* harmony export */   "cross": () => (/* binding */ cross),
/* harmony export */   "line_line_intersection": () => (/* binding */ line_line_intersection),
/* harmony export */   "line_segment_intersection": () => (/* binding */ line_segment_intersection),
/* harmony export */   "between": () => (/* binding */ between),
/* harmony export */   "lerp": () => (/* binding */ lerp),
/* harmony export */   "slerp": () => (/* binding */ slerp),
/* harmony export */   "clamp": () => (/* binding */ clamp),
/* harmony export */   "degrees": () => (/* binding */ degrees),
/* harmony export */   "radians": () => (/* binding */ radians),
/* harmony export */   "normalize": () => (/* binding */ normalize),
/* harmony export */   "magnitude": () => (/* binding */ magnitude),
/* harmony export */   "magnitude2": () => (/* binding */ magnitude2)
/* harmony export */ });
/**
 * Add a vector with vectors / scalars
 * @param {Array<number>} vector
 * @param {...(Array<number> | number)} args - Vectors or scalars
 * @returns {Array<number>} Vector result of addition
 */
function add(vector) { // variadic
	const accumulator = _.clone(vector);
	for(let i = 1; i < arguments.length; ++i) {
		if(arguments[i].length) { // vector arg
			for(let j = 0; j < accumulator.length; ++j) {
				accumulator[j] += arguments[i][j];
			}
		}
		else { // scalar arg
			for(let j = 0; j < accumulator.length; ++j) {
				accumulator[j] += arguments[i];
			}
		}
	}
	return accumulator;
}

/**
 * Subtract a vector with vectors / scalars
 * @param {Array<number>} vector
 * @param {...(Array<number> | number)} args - Scalars or vectors
 * @returns {Array<number>} Vector result of subtraction
 */
function sub(vector) { // variadic
	const accumulator = _.clone(vector);
	for(let i = 1; i < arguments.length; ++i) {
		if(arguments[i].length) { // vector arg
			for(let j = 0; j < accumulator.length; ++j) {
				accumulator[j] -= arguments[i][j];
			}
		}
		else { // scalar arg
			for(let j = 0; j < accumulator.length; ++j) {
				accumulator[j] -= arguments[i];
			}
		}

	}
	return accumulator;
}

/**
 * Vector / scalar multiplication
 * @param {Array<number>} vector
 * @param {...number} args - Scalars
 * @returns {Array<number>} Vector result of multiplication
 */
function mul(vector){ // variadic
	const accumulator = _.clone(vector);
	for(let i = 1; i < arguments.length; ++i) {
		for(let j = 0; j < accumulator.length; ++j) {
			accumulator[j] *= arguments[i];
		}
	}
	return accumulator;
}

/**
 * Vector / scalar division
 * @param {Array<number>} vector
 * @param {...number} args - Scalars
 * @returns {Array<number>} Vector result of division
 */
function div(vector){ // variadic
	const accumulator = _.clone(vector);
	for(let i = 1; i < arguments.length; ++i) {
		for(let j = 0; j < accumulator.length; ++j) {
			accumulator[j] /= arguments[i];
		}
	}
	return accumulator;
}

/**
 * Compute the dot product between two vectors.
 * @param {Array<number>} a - First vector
 * @param {Array<number>} b - Second vector
 * @returns {number | NaN} Scalar result of dot product
 */
function dot(a, b) {
	if(!a.length || a.length !== b.length) {
		return NaN;
	}
	let accumulator = 0;
	for(let i = 0; i < a.length; ++i) {
		accumulator += a[i] * b[i];
	}
	return accumulator;
}

/**
 * Compute the cross product between two vector3s
 * 
 * @param {Array<number>} a - First vector3
 * @param {Array<number>} b - Second vector3
 * 
 * @returns {Array<number>} Cross product result
 */
function cross(a, b) {
	const result = new Array(3);
	result[0] = a[1] * b[2] - a[2] * b[1];
	result[1] = a[2] * b[0] - a[0] * b[2];
	result[2] = a[0] * b[1] - a[1] * b[0];
	return result;
}

/**
 * Intersection test between two lines.
 * @param {Array<Array<number>>} l1 - First line
 * @param {Array<Array<number>>} l2 - Second line
 * @return {Array<Array<number>> | NaN} Intersection point, or NaN if the lines are parallel
 */
function line_line_intersection (l1, l2) { // each line is defined by two points
	let determinant2x2 = (a, b, c, d) => a * d - b * c;
	let p1 = { x: l1[0][0], y: l1[0][1] };
	let p2 = { x: l1[1][0], y: l1[1][1] };
	let p3 = { x: l2[0][0], y: l2[0][1] };
	let p4 = { x: l2[1][0], y: l2[1][1] };

	let denominator = determinant2x2(p1.x - p2.x, p1.y - p2.y, p3.x - p4.x, p3.y - p4.y);

	if(denominator === 0) {
		return NaN;
	}
	else {
		let a = determinant2x2(p1.x, p1.y, p2.x, p2.y);
		let c = determinant2x2(p3.x, p3.y, p4.x, p4.y);

		return [
			determinant2x2(a, p1.x - p2.x, c, p3.x - p4.x) / denominator,
			determinant2x2(a, p1.y - p2.y, c, p3.y - p4.y) / denominator
		];
	}
}

/**
 * Intersection test between two line segments on an XY Coordinate Plane.
 * @param {Array<Array<number>>} l1 - First line
 * @param {Array<Array<number>>} l2 - Second line
 * @return {boolean} True if lines intersect, fase otherwise
 */
function line_segment_intersection(l1, l2) { // each line is defined by two points
	// Check if the intersection point is within a rectangle defined by the line's endpoints
	const pointWithinRectangle = (line, point) => {
		let top = Math.floor(Math.min(line[0][1], line[1][1])); // floor/ceil these values to prevent floating point errors
		let bottom = Math.ceil(Math.max(line[0][1], line[1][1]));
		let left = Math.floor(Math.min(line[0][0], line[1][0]));
		let right = Math.ceil(Math.max(line[0][0], line[1][0]));
		return (between(left, right, point[0]) && between(top, bottom, point[1]));
	};

	const intersection = line_line_intersection(l1, l2);

	if(typeof intersection !== "object") { // since the intersection returns NaN if parallel, make sure the result returned is an array
		return false;
	}

	return (pointWithinRectangle(l1, intersection) && pointWithinRectangle(l2, intersection)); // If the point is within the bounding box of both lines, it intersects them
}

/**
 * Check if a number n3 is between two numbers n1 and n2.
 * @param {number} n1 - First number
 * @param {number} n2 - Second number
 * @param {number} n3 - Third number (the one we're checking against the other two)
 * @param {boolean} inclusive - Optional. If set to false, comparison will be > / < rather than >= / <=
 * @return {boolean} True if n3 is between n1 and n2, false otherwise
 */
function between(n1, n2, n3, inclusive = true) {
	const max = Math.max(n1, n2);
	const min = Math.min(n1, n2);

	if(inclusive) {
		return ((n3 <= max) && (n3 >= min));
	} else {
		return ((n3 < max) && (n3 > min));
	}
}

/**
 * Linear interpolation. a and b must both either be scalars or vectors of equal length.
 * @param {number | Array<number>} a - First vector / scalar
 * @param {number | Array<number>} b - Second vector / scalar
 * @param {number} t - Interpolation factor
 * @return {number | Array<number>} Interpolated scalar / vector
 */
function lerp(a, b, t) {
	if(a.length !== b.length) {
		return NaN;
	}
	if(a.length) { // a and b are vectors
		return add(a, mul(sub(b, a), t));
	}
	else { // a and b are scalars
		return a + t * (b - a);
	}
}

/**
 * Spherical linear interpolation
 * @param {Array<number>} a - First vector
 * @param {Array<number>} b - Second vector
 * @param {number} t - Interpolation factor (usually [0, 1])
 * @returns {Array<number>} Vector result
 */
function slerp(a, b, t) {
	if(!a.length > 1 || a.length !== b.length) {
		return NaN;
	}
	const clamped = clamp(dot(normalize(a), normalize(b)), -1, 1);
	const omega = Math.acos(clamped);
	const sin_omega = Math.sin(omega);
	return add(mul(a, Math.sin((1 - t) * omega) / sin_omega), mul(b, Math.sin(t * omega) / sin_omega));
}

/**
 * Clamp a value to a range bounded by min and max (inclusive).
 * @param {number} v - Number to be clamped
 * @param {number} min - Minimum value
 * @param {number} max - Maximum value
 * @return {number} Clamped value
 */
function clamp(v, min, max) {
	return Math.max(min, Math.min(v, max));
}

/**
 * Convert from radians to degrees.
 * @param {number} radians
 * @returns {number} Degrees
 */
function degrees(radians) {
	return radians / Math.PI * 180;
}

/**
 * Convert from degrees to radians.
 * @param {number} degrees
 * @return {number} Radians
 */
function radians(degrees) {
	return degrees / 180 * Math.PI;
}

/**
 * @param {Array<number>} v - Vector
 * @returns {Array<number>} A normalized copy of the vector.
 */
function normalize(v) {
	const mag2 = magnitude2(v);
	return div(v, mag2 === 0 ? Infinity : Math.sqrt(mag2));
}

/**
 * Get the magnitude of this vector. Relatively slow.
 * @param {Array<number>} v - Vector
 * @returns {number} Magnitude
 */
function magnitude(v) {
	return Math.sqrt(dot(v, v));
}

/**
 * Get the squared magnitude of this vector. This is significantly faster than calling magnitude
 * @param {Array<number>} v - Vector
 * @returns {number} Squared magnitude.
 */
function magnitude2(v) {
	return dot(v, v);
}




/***/ }),

/***/ "./util/textchatUtils.js":
/*!*******************************!*\
  !*** ./util/textchatUtils.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "formatDiceForSheetworkers": () => (/* binding */ formatDiceForSheetworkers),
/* harmony export */   "getIndexesFromRollString": () => (/* binding */ getIndexesFromRollString),
/* harmony export */   "parseRollData": () => (/* binding */ parseRollData),
/* harmony export */   "createRollPromise": () => (/* binding */ createRollPromise),
/* harmony export */   "addComputedResults": () => (/* binding */ addComputedResults)
/* harmony export */ });
/**
 * Takes an array of rolls from the dice server,
 * simplifies each roll into the format used by sheetworkers
 * @param {Object[]} inlinerolls - An array of rolls from the roll server
 * @returns {Object[]} An array of rolls formatted for use by sheetworkers
 */
const formatDiceForSheetworkers = (inlinerolls) => {
	const rolls = [];

	_.each(inlinerolls, (roll) => {
		// result: the total value of the roll computed by the roll server
		// expression: the original expression for this roll (i.e. '1d20+4')
		// dice: an array of integers for the actual result of each die
		// rolls: additional information about each individual roll, includeing:
		// - dice: number of dice rolled (the '2' in '2d6')
		// - sides: number of sides for this set of dice (the '6' in '2d6')
		// - results: an array of integers for the actual result of each die in this particular roll
		const thisroll = {
			result: roll.results.total,
			dice: [],
			expression: roll.expression,
			rolls: [],
		};
		// Loop through each roll
		_.each(roll.results.rolls, (dice) => {
			// Construct an array of results from this roll
			const rollResults = _.pluck(dice.results, 'v');
			// Add that to our array of all dice results
			thisroll.dice = thisroll.dice.concat(rollResults);
			// Make sure this is actually a roll and not a mathematical operation
			if (rollResults.length > 0 && dice.sides && dice.dice) {
				// If this is actually a roll, add more information to our rolls array
				thisroll.rolls.push({
					sides: dice.sides,
					dice: dice.dice,
					results: rollResults,
				});
			}
		});
		rolls.push(thisroll);
	});

	return rolls;
};

/**
 * Given a roll string with named rolls, returns an object to match roll
 * names with the corresponding index for the location of that roll
 * in the inlinerolls array
 * @param {string} rollString - A roll string from a character sheet,
 * with rolls already replaced with indices
 * @returns {Object} Keys are names of rolls, values are the index
 * location of that roll corresponding to the inlinerolls array
 */
const getIndexesFromRollString = (rollString) => {
	const rollRegex = /{{([\s\S]*?}?)}}/gi;
	const results = {};
	const matches = rollString.match(rollRegex);

	if (!matches) return {};

	matches.forEach((roll) => {
		// valid matches will look like "{{roll1=$[[1]]}}"
		// Attempt to match the roll name on the left side of the string
		const name = roll.match(/{{(.*)=/);
		// Attempt to match the roll index on the right side of the string
		const index = roll.match(/\$\[\[(.*)\]\]/);
		// If both match, use the capture group from each match
		// eslint-disable-next-line prefer-destructuring
		if (name && index) results[name[1]] = index[1];
	});
	return results;
};

/**
 * Takes the array of inlinerolls from the chat operation object, formats them into the simplified
 * sheetworker roll format, and returns them in an object with the roll names as they keys
 * @param {ChatOperation} chatOp - Chat operation object of the roll to be modified
 * @returns {Object} Keys are names of rolls, values are formated roll results
 */
const parseRollData = (chatOp) => {
	const results = {};
	// Get the array of formatted dice rolls
	const rollArray = formatDiceForSheetworkers(chatOp.inlinerolls);
	// Get an object to match elements in that array to the roll name
	const namesWithIndexes = getIndexesFromRollString(chatOp.content);
	// eslint-disable-next-line guard-for-in
	for (const name in namesWithIndexes) {
		results[name] = rollArray[namesWithIndexes[name]];
	}
	return results;
};

/**
 * Adds a new promise to pendingRollPromises that can be resolved via
 * the finishRoll sheetworker function
 * @param {Object} pendingRollPromises - Our object for organizing all pendingRollPromises
 * @param {string} promiseId - The unique id for this promise
 * @returns {Object} An object containing the promise, resolve function, and the promise id
 */
const createRollPromise = (pendingRollPromises, promiseId) => {
	// Keeps track of roll promises, so that they can be resolved later
	// When the sheetworker calls the finish roll function
	const result = {
		// Flag to determine if we need to reject the promise after the timeout
		resolved: false,
		promiseId,
	};
	result.promise = new Promise((resolve, reject) => {
		// Save a reference to the resolve function so that it can be resolved externally
		result.resolve = resolve;

		// After 5 seconds, if we haven't gotten a response from the sheetworker,
		// Reject this promise and display our error message
		setTimeout(() => {
			if (!result.resolved) reject();
			// Clean up, we're done with this promise
			// eslint-disable-next-line no-param-reassign
			delete pendingRollPromises[promiseId];
		}, 5000);
	});

	// eslint-disable-next-line no-param-reassign
	pendingRollPromises[promiseId] = result;

	return pendingRollPromises[promiseId];
};

/**
 * Adds computed results from sheetworker to actual results from roll server
 * @param {ChatOperation} chatOp - Chat operation object of the roll to be modified
 * @param {Object} computedResults - Keys are names of rolls,
 * Values are the corresponding computed string value
 * @param {Function} stripTags - The strip tags sanitization function from d20.utils
 */
const addComputedResults = (chatOp, computedResults, stripTags) => {
	const rollIndexes = getIndexesFromRollString(chatOp.content);
	// eslint-disable-next-line guard-for-in
	for (const roll in rollIndexes) {
		const index = rollIndexes[roll];
		if (chatOp.inlinerolls[index] && computedResults[roll] !== undefined) {
			// Adding the computed result as a new field to the inline roll
			// As long as we don't change the 'results' field, the roll
			// will still be correctly signed
			// Stringify the result and send it through the sanitization function,
			// To make sure there isn't any disallowed js/html
			// eslint-disable-next-line no-param-reassign
			chatOp.inlinerolls[index].computed = stripTags(`${computedResults[roll]}`);
		}
	}
};




/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**************************!*\
  !*** ./chat.compiled.js ***!
  \**************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/Observable */ "./util/Observable.js");
/* harmony import */ var _util_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/math */ "./util/math.js");
/* harmony import */ var _util_Matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/Matrix */ "./util/Matrix.js");
/* harmony import */ var _util_Rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/Rectangle */ "./util/Rectangle.js");
/* harmony import */ var _util_textchatUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/textchatUtils */ "./util/textchatUtils.js");
/* harmony import */ var _setupDarkMode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./setupDarkMode */ "./setupDarkMode.js");
/* eslint-disable no-undef */





d20.utils = {
	SVG: {},
	stattracker: {},
	_hex_color_regex: /^#[0-9a-f]{6}$/i,
	_video_url_regex: /[\w\-]+\.webm/i,
	isVideo: url => d20.utils._video_url_regex.test(url),

	/**
	 * Capturing groups: 1: "dead", 2: hex color, 3: number to overlay
	 * @constant
	 * @private
	 */
	_status_regex: /^(?:(dead)|([^@]+)(?:@(\d))?)$/,

	/**
	 * @typedef StatusHash
	 * @type {object}
	 * @property {?string} dead - "dead" if the status type is dead.
	 * @property {?string} color - If the status is for a color, then this will be its hex code.
	 * @property {?number} icon - If the status is for an icon, then this will be its sheet index.
	 * @property {?string} number - String containing a single digit to be overlayed on top of the status icon/color.
	 */
	/**
	 * Get information about what this status name means.
	 * @param {string} status
	 * @return {StatusHash} Rendering data for this status.
	 */
	parseStatus: status => {
		const results = d20.utils._status_regex.exec(status);
		const status_hash = {
			dead: (results && results[1]) || null, // results[1] if defined, else null
			icon: null,
			color: null,
			number: (results && results[3]) || null // results[3] if defined, else null
		};
		if (results && results[2] && results[2] !== 'dead') {
			if (_.keys(d20.token_editor.colorMarkers).includes(results[2])) {
				status_hash.color = d20.token_editor.colorMarkers[results[2]];
			} else {
				const image = _.find(token_marker_array, (marker) => { return marker.tag === results[2] });
				if (!image) return false;
				status_hash.icon = image.id;
			}
		}
		return results && status_hash;
	},

	getCorrectStatusName: status => {
		try {
			const results = d20.utils._status_regex.exec(status);
			if (_.keys(d20.token_editor.colorMarkers).includes(results[2])) {
				return status;
			}

			const tokenMarkerId = results[2] ? parseInt(_.last(results[2].split('::'))) : results[0];
			const marker = _.find(token_marker_array, (marker) => { return marker.id === tokenMarkerId });
			if (marker) {
				let correctName = marker.tag;
				if (results[3]) {
					correctName += `@${results[3]}`;
				}
				return correctName;
			}
			return status;
		} catch (e) {
			console.error(e);
			return status;
		}
	},
	Observable: _util_Observable__WEBPACK_IMPORTED_MODULE_0__["default"],
};

window["d20ext"] = window["d20ext"] || {};
window["d20ext"]["utils"] = d20.utils;

String.prototype.tranSub = function() {
	var oArguments = arguments;
	return this.replace(/{{[0-9]+}}/g, function(s) {
		return oArguments[parseInt(s.substring(2, s.length - 2))];
	});
};

d20.math = {
	..._util_math__WEBPACK_IMPORTED_MODULE_1__,
	Matrix: _util_Matrix__WEBPACK_IMPORTED_MODULE_2__["default"],
	Rectangle: _util_Rectangle__WEBPACK_IMPORTED_MODULE_3__["default"],
};

(function() {
	if (typeof JS_TRANSLATIONS !== 'undefined') {
		i18n.translator.add({
			values: JS_TRANSLATIONS
		});
	}
	var i18nOutputJSON = {};
	d20.utils.htmlTranslator = function($html, doDynamic) {
		if ($html === '') return '';
		if (typeof doDynamic === 'undefined') doDynamic = false;

		var returnType = 'jQuery';
		// creates jQuery obj if not already, but returns the type it's given
		if (typeof $html === 'string') {
			returnType = 'string';
			$html = $($html);
		}
		else if (!($html instanceof jQuery)) {
			returnType = 'html';
			$html = $($html);
		}
		var attributes = '[data-i18n],[data-i18n-placeholder],[data-i18n-title],[data-i18n-alt],[data-i18n-aria-label],[data-i18n-label]';
		if (doDynamic) attributes += ',[data-i18n-dynamic]';
		var listValidator = function(listValue) {
			var errorMessage = [];
			if (listValue === 'error') errorMessage.push('Missing list key.');
			if (listValue === '') errorMessage.push('Empty list entry.');

			if (errorMessage.length > 0) {
				return errorMessage.join(' ');
			}
			return false;
		};
		$html.find(attributes).each(function() {
			var $this = $(this);
			var options = ['-placeholder', '-title', '-alt', '-aria-label', '-label', ''];
			if (doDynamic) options.push('-dynamic');

			$.each(options, function() {
				try {
					if (typeof $this.attr('data-i18n' + this) === 'undefined') return;

					var i18nAttr = this !== '' ? this.substr(1) : false;
					var isDynamic = (doDynamic && i18nAttr === 'dynamic');
					var i18nKey = isDynamic ? $this.text() : $this.attr('data-i18n' + this);

					var i18nVars = ($this.attr('data-i18n-vars') || '').split('|');
					// if it is the text of an element we can highlight the text as a missing key with the extra span style, if it's attribute's text that won't work
					var i18nError = (i18nAttr ? '[' + i18nKey + ']' : '<span style="color: red;">[' + i18nKey + ']</span>');
					var i18nText = i18n(i18nKey, i18nError);

					i18nOutputJSON[i18nKey] = (i18nAttr ? $this.attr(i18nAttr) : $this.html());
					i18nText = (i18nVars.length === 0 ? i18nText : i18nText.replace(/{{([0-9]+)}}/g, function(x, $1) {
						// if the var is not defined, keep the match as-is. So it stays out of the way of roll templates as much as possible.
						return i18nVars[$1] ? i18nVars[$1] : '{{' + $1 + '}}';
					}));

					if (!i18nAttr || isDynamic) {
						$this.html(i18nText);
						// You cannot have both data-i18n and data-i18n-dynamic, they are at the end of the list, if either one runs we break out of the loop
						return false;
					}
					else {
						$this.attr(i18nAttr, i18nText);
					}
				}
				catch (e) {
					console.log('Translation Error:', e);
					console.log($this);
				}
			});
		});
		$html.find('[data-i18n-list]').each(function() {
			var $this = $(this);
			var i18nKey = $this.attr('data-i18n-list');
			var listValue = i18n(i18nKey, 'error');
			var listError = listValidator(listValue);

			if (listError) {
				$this.attr('data-i18n-error', listError);
				return;
			}

			var newListOrder = $.map(listValue.split(','), function(number) {
				return $.trim(number);
			});
			var listMax = $this.find('[data-i18n-list-item]').length;
			var $newList = $this.clone();
			var listError = false;

			if ($this.find('[data-i18n-list-item-num]').length > 0) {
				$.each(newListOrder, function(key, number) {
					if ($this.find('[data-i18n-list-item="' + newListOrder[key] + '"]').length === 0) {
						$this.attr('data-i18n-error', 'List does not contain the key: ' + newListOrder[key] + '.');
						listError = true;
						return;
					}
					$newList.find('[data-i18n-list-item-num="' + (key + 1) + '"]').replaceWith($this.find('[data-i18n-list-item="' + number + '"]').clone().removeAttr('data-i18n-list-item-num'));
				});
			}
			else {
				$newList.find('[data-i18n-list-item]').each(function(key) {
					if ($this.find('[data-i18n-list-item="' + newListOrder[key] + '"]').length === 0) {
						$this.attr('data-i18n-error', 'List does not contain the key: ' + newListOrder[key] + '.');
						listError = true;
						return;
					}
					$(this).replaceWith($this.find('[data-i18n-list-item="' + newListOrder[key] + '"]').clone().removeAttr('data-i18n-list-item'));
				});
			}
			if (!listError) {
				$this.replaceWith($newList);
			}
		});
		window.i18nOutput = JSON.stringify(i18nOutputJSON);
		switch (returnType) {
			case 'string':
				return $html.prop('outerHTML');
			case 'html':
				return $html[0];
			default:
				return $html;
		}
	};

	d20.utils.handleURL = function(e) {
		if ($(this).hasClass("lightly")) return;

		if ($(this).parents(".note-editable").length > 0) return;

		var url = $(this).attr("href");
		if (typeof url === "undefined") return false;

		if (url.indexOf("journal.roll20.net") !== -1 || url.indexOf("wiki.roll20.net") !== -1) {
			var type = url.split("/")[3];
			var id = url.split("/")[4];
			var item = d20.Campaign[type + "s"].get(id);
			if (item) {
				var injournals = item.get("inplayerjournals").split(",");
				if (window.is_gm || _.indexOf(injournals, "all") !== -1 || (window.currentPlayer && _.indexOf(injournals, window.currentPlayer.id) !== -1)) {
					if (type == "character" && item.attribs && item.abilities) {
						const charobj = item;
						const charAttribPromises = [];
						if (!charobj?.attribs?.backboneFirebase) {
							charobj.attribs.backboneFirebase = new BackboneFirebase(charobj.attribs);
							charAttribPromises.push(charobj.attribs.backboneFirebase.reference.once('value'));
						}
						if (!charobj?.abilities?.backboneFirebase) {
							charobj.abilities.backboneFirebase = new BackboneFirebase(charobj.abilities);
							charAttribPromises.push(charobj.abilities.backboneFirebase.reference.once('value'));
						}
						Promise.all(charAttribPromises).then(() => {
							item.view.showDialog();
						})
					} else {
						item.view.showDialog();
					}
				}
			}
			$("#existing" + type + "s").find("tr[data-" + type + "id=" + id + "]").trigger("click");

			return false;
		}

		var compendiumURLRegex = /(?:(?:http(?:s?):\/\/(?:app\.)?roll20(?:staging)?\.(?:net|local:5000)\/|^\/?)compendium\/)([^\/]+)\/([^\/#?]+)/i
		var compendiumMatch = url.match(compendiumURLRegex);

		if (compendiumMatch) {
			d20.utils.openCompendiumPage(compendiumMatch[1], compendiumMatch[2]);

			e.stopPropagation();
			e.preventDefault();
			return;
		}

		if (url.indexOf("javascript:") !== -1) {
			return false;
		}

		//Allow us to link to API commands in the format [Button Text](!command)
		if (url.substring(0, 1) === "`") {
			d20.textchat.doChatInput(url.substring(1), 'link_click');
			return false;
		}
		if (url.substring(0, 1) === "!") {
			//API command.
			d20.textchat.doChatInput(url, 'api_link_click');
			//var oldtext = $(this).text();
			//var $othis = $(this);
			//$(this).text("Executed: " + url);
			//setTimeout(function() {
			//  $othis.text(oldtext);
			//}, 1000);
			return false;
		}

		if (url.substring(0, 1) === "~") {
			d20.textchat.doChatInput("%{" + url.substring(1, url.length) + "}", 'link_click');
			return false;
		}

		if (url === undefined || $(this).attr("rel") !== "external" && (url.indexOf("javascript:") !== -1 || url.indexOf("://") === -1)) {
			return;
		}

		e.stopPropagation();
		e.preventDefault();

		var dialog = $('<div class="dialog dialog-danger">' + url + '<br /><br />This link will open up a new window (or tab) to an external site. Just close the new window/tab to return to the editor.</div>');
		dialog.dialog({
			modal: true,
			title: "Confirm External Link",
			buttons: {
				"Continue": function() {
					$(this).dialog("destroy").remove();
					window.open(url);
				},
				"Cancel": function() {
					$(this).dialog("destroy").remove();
				}
			},
			beforeClose: function() {
				$(this).dialog("destroy").remove();
			}
		});
	};

	d20.utils.openCompendiumPage = function(compendiumBookName, compendiumPageName, compendiumPageUniqueName) {
		if (typeof compendiumPageUniqueName === "undefined") compendiumPageUniqueName = null;
		var addressName = compendiumPageName;
		var anchorName = "";
		if(compendiumPageUniqueName) {
			var split = compendiumPageUniqueName.split("#");
			addressName = split[0];
			anchorName = split[1] ? "#" + split[1] : "";
		}
		var maxwidth = 750;
		var maxheight = 800;
		var minheight = $(window).height() - 100;
		if (minheight > maxheight) {
			minheight = maxheight;
		}
		var minwidth = $(window).width() - 50;
		if (minwidth > maxwidth) {
			minwidth = maxwidth;
		}
		var $tempdialog = $("<div class='compendiumpopup'><iframe src=\"" + d20.compendium.compendiumBase + "compendium/" + compendiumBookName + "/" + addressName + "?sharedCompendium=" + campaign_id + anchorName + "\" style='width: 100%; height: calc(100% - 5px);' frameborder='0'></iframe></div>");
		$tempdialog.dialog({
			modal: false,
			title: "<button class='showpopout btn pictos' style='margin-right: 15px;'>|</button>" + compendiumPageName.split(":")[0],
			beforeClose: function() {
				$tempdialog.dialog("destroy").remove();
			},
			width: minwidth + 40,
			height: minheight,
			zIndex: 11000
		});

		var showCompendiumPopout = function() {
			var $prevdialog = $tempdialog;
			var winwidth = 900;
			var winheight = 750;

			winwidth = $prevdialog.width();
			winheight = $prevdialog.height();
			$prevdialog.dialog("close"); //this will totally remove the previous inframe and everything, but we can still re-append it as long as we have a reference to it

			var compendiumChildWindow = window.open("/editor/popout", "Popout" + (compendiumPageUniqueName || compendiumPageName), "menubar=0,location=0,toolbar=0,status=0,scrollbars=1,width=" + winwidth + ",height=" + winheight);
			window.allChildWindows.push(compendiumChildWindow);

			compendiumChildWindow.onload = function() {
				$prevdialog.appendTo(compendiumChildWindow.document.getElementById("containerdiv"));
				$prevdialog.show();
				compendiumChildWindow.document.title = compendiumPageName;
			}
			compendiumChildWindow.onbeforeunload = function() {
				window.allChildWindows = _.without(window.allChildWindows, othis.childWindow)
				compendiumChildWindow = null;
				$prevdialog.html("");
				$prevdialog = null;
			};
		}

		$tempdialog.parent().on("click", ".showpopout", function() {
			showCompendiumPopout();
		});
	};

	d20.utils.playerZoneHeight = function() {
		var initial = $("#playerzone .player").height() + 65;
		if ($("#macrobar").is(":visible")) {
			initial += $("#macrobar").height();
		}
		return initial;
	};

	d20.utils.addImageProxy = (url) => {
		const match = url.toString();
		const noproxy = ['https://s3.amazonaws.com/files.d20.io', 'http://imgsrv.roll20.net', 'https://imgsrv.roll20.net', imgsrv_url, 'https://app.roll20.net', 'https://storage.googleapis.com/char-sheet-app-images-6e101411'];

		for (let i = 0; i < noproxy.length; i++) {
			if (match.substring(0, noproxy[i].length) === noproxy[i]) {
				return match;
			}
		}

		if (/^https?:\/\//.test(match)) {
			return `${imgsrv_url}?src=${escape(match)}`;
		}

		return '';
	};

	d20.utils.strip_tags = function(input, allowed, ignoreadvanced) {
		// Strips HTML and PHP tags from a string
		if (!ignoreadvanced && allowed !== undefined) {
			input = html_sanitize(
				input,
				function(url, objindex, objsecondindx, objinfo) {
					var match = url.toString();

					if (objinfo && objinfo.XML_TAG === "a") {
						return match;
					}

					const noproxy = ["https://s3.amazonaws.com/files.d20.io", "http://imgsrv.roll20.net", "https://imgsrv.roll20.net", imgsrv_url, "https://app.roll20.net", "https://storage.googleapis.com/char-sheet-app-images-6e101411"];

					for(let i=0; i<noproxy.length; i++){
						if(match.substring(0, noproxy[i].length) === noproxy[i]) {
							return match;
						}
					};
					if (/^https?:\/\//.test(match)) {
						return imgsrv_url + "/?src=" + escape(match);
					}
					else {
						return "";
					}
				},
				function(groupid) {
					var classes = groupid.split(" ");
					_.each(classes, function(id, idx) {
						if (id.substring(0, 11) === "userscript-" || id.substring(0, 6) === "sheet-") {
							classes[idx] = id;
						}
						else {
							classes[idx] = "userscript-" + id;
						}
					});
					return classes.join(" ");
				}
			);
			//input = html_sanitize(input, function urlX(url) { if(/^https?:\/\//.test(url)) { return url } }, function idX(id) { return "userscript-" + id });
		}
		allowed = (((allowed || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join(''); // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
		var tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi,
			commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;
		return input.replace(commentsAndPhpTags, '').replace(tags, function($0, $1) {
			return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : '';
		});
		//return input;
	};

	d20.utils.timeout = (ms) => {
		return new Promise(resolve => setTimeout(resolve, ms));
	};

	d20.utils.i18n = (key) => {
		return i18n(key);
	};

	d20.utils.htmlAllowed = "<code><span><div><label><a><br><br /><p><b><i><del><strike><u><img><video><audio><param><blockquote><mark><cite><small><ul><ol><li><hr><dl><dt><dd><sup><sub><big><pre><code><figure><figcaption><strong><em><table><tr><td><th><tbody><thead><tfoot><caption><h1><h2><h3><h4><h5><h6>";

	d20.utils.handleHTMLInput = function(input) {
		return escape(d20.utils.strip_tags(d20.utils.autoLink(input), d20.utils.htmlAllowed));
	};

	d20.utils.handleHTMLOutput = function(input, autolink) {
		return d20.utils.strip_tags(unescape(input), d20.utils.htmlAllowed);
	};

	d20.utils.showOverQuota = function() {
		var $dialog = $("<div><p>We're sorry, but it looks like you've uploaded more than your allotted quota of storage space on Roll20. You can increase your quota by <a href='/account/supporter/?quotainapp' target='_blank'>becoming a Plus user</a> (or upgrading your Plus account if you already have one), or by <a href='http://help.roll20.net/sidebar-art-library/' target='_blank'>deleting items from your Art Library</a>.</div>");
		$dialog.dialog({
			modal: true,
			title: "Quota Exceeded",
			buttons: {
				"Upgrade Account": function() {
					window.open("/account/supporter/?quotainapp");
					$dialog.dialog("destroy");
				},
				"No Thanks": function() {
					$dialog.dialog('destroy');
				}
			},
			beforeClose: function() {
				$dialog.dialog("destroy");
			}
		});
	};

	d20.utils.showBadConvert = function() {
		var $dialog = $("<div><p>There was an error trying to convert the PDF. Be sure you didn't specify an invalid page number. It's also possible the PDF is corrupted or isn't supported by our conversion software.</div>");
		$dialog.dialog({
			modal: true,
			title: "PDF Conversion Error",
			buttons: {
				"Drat!": function() {
					$dialog.dialog('destroy');
				}
			},
			beforeClose: function() {
				$dialog.dialog("destroy");
			}
		});
	};

	d20.utils.setupAvatar = function($el, othis) {
		$el.bind("uploadcomplete", function(e, response) {
			e.stopPropagation();
			if (response == "overquota") {
				d20.utils.showOverQuota();
				return false;
			}

			// var json = JSON.parse(response);
			// if(!json) {
			//     $el.find(".status").html("<div class='alert alert-danger'>Error uploading file. Pleaes try again.</div>");
			//     return;
			// }

			othis.updateModel();
			const responseImageURL =  response.base.replace('/original.', '/med.') + (response.base.indexOf('?') === -1 ? '?' + Math.floor(new Date().getTime() / 1000) : '');
			if ($el.hasClass('card_back')){
				othis.model.save({
					card_back: responseImageURL
				});
			} else if ($el.hasClass('avatar')){
				othis.model.save({
					avatar: responseImageURL
				});
			}
		});

		$el.dndUploader({
			url: "/image_library/newupload",
			method: "POST",
			allowMultiple: false
		});

		$el.bind("removeimage", function() {
			othis.updateModel();
			if ($el.hasClass('card_back')){
				othis.model.save({
					card_back: ""
				});
			} else if ($el.hasClass('avatar')){
				othis.model.save({
					avatar: ""
				});
			}
		});

		//Fixes https://github.com/Roll20/Collab/issues/4
		$el.on("click", ".remove", function() {
			$el.trigger("removeimage");
		})

		$el.droppable({
			drop: function(e, ui) {
				e.originalEvent.dropHandled = true;

				//$this.find(".bar").css("width", "100%");
				$el.trigger("uploadcomplete", [{
					base: ui.draggable.attr("data-fullsizeurl")
				}, true]);

				e.preventDefault();
				e.stopPropagation();
			},
			hoverClass: "drop-highlight",
			tolerance: "touch",
			greedy: true,
			accept: ".resultimage, .library-item"
		});
	};

	d20.utils.summernoteInit = function() {
		let $textarea = $(this);
		let $loader = $("<div class=\"loader\"></div>");
		let showCodeView = $textarea.hasClass("code-view");
		let inAppEditor = $textarea.hasClass("in-app-editor");
		let callbacks = {};
		let toolbar = [
			["style", ["style"]],
			["font", ["bold", "italic", "underline", "strikethrough", "clear"]],
			["size", ["superscript", "subscript"]],
			["para", ["ol", "ul", "paragraph"]]
		];
		if (!inAppEditor) {
			toolbar.push(["insert", ["table", "link", "picture", "hr"]]);
			callbacks = {
				onImageUpload: function(files) {
					let $summernote = $(this);
					$loader.show();
					for (let i = 0; i < files.length; i++) {
						let name = files[i].name.split(".")[0];
						let data = new FormData();
						data.append("file", files[i]);
						$.ajax({
							data: data,
							dataType: "JSON",
							type: "POST",
							url: "/forum/upload",
							cache: false,
							contentType: false,
							processData: false,
							success: function(response) {
								if (typeof response.error !== "undefined") {
									alert(response.error);
									$loader.hide();
								}
								else {
									$summernote.summernote("insertImage", response["filelink"], name)
										.done(function() {
											$loader.hide();
										});
								}
							},
							error: function(jqXHR, textStatus, errorThrown) {
								alert("There was an error uploading your image. This was probably caused by either connection issues, or the file being too large.");
								$loader.hide();
							}
						});
					}
				},
				onImageUploadError: function(one, two, three) {
					console.error("Image Upload Error");
				}
			}
		}
		else {
			toolbar.push(["insert", ["link", "unlink"]]);
			toolbar.push(["hr", ["hr"]]);
			toolbar.push(["color", ["color"]]);
			toolbar.push(["tableAdd", ["table", "tableHeaders", "addRowUp", "addRowDown", "addColLeft", "addColRight"]]);
			toolbar.push(["tableDelete", ["deleteRow", "deleteCol", "deleteTable"]]);
		}
		if (showCodeView) {
			toolbar.push(["code", ["codeview"]])
		}
		let summernoteDefaults = {
			toolbar: toolbar,
			disableDragAndDrop: inAppEditor,
			callbacks: callbacks,
			maxHeight: 300,
			dialogsInBody: inAppEditor,
			onCreateLink: function (linkURL) {
				// If the URL is a special case, replace the : with html-escaped :
				if (linkURL[0] === "`" || linkURL[0] === "!" || linkURL[0] === "~") {
					linkURL = linkURL.replace(/:/g, "&#58;");
				}
				return linkURL;
			}
		}
		if (inAppEditor) {
			summernoteDefaults["popover"] = {
				table: [],
				link: []
			};
		}
		else {
			summernoteDefaults["popover"] = {
				table: [
					['add', ['tableHeaders', 'addRowDown', 'addRowUp', 'addColLeft', 'addColRight']],
					['delete', ['deleteRow', 'deleteCol', 'deleteTable']]
				]
			}
		}

		$textarea.summernote(summernoteDefaults);
		$loader.hide();
		$textarea.siblings(".note-editor").append($loader);
	};

	d20.utils.makeContentEditable = function($container, content, includeCodeView) {
		let $content = $(content);
		$container.html("<textarea class='summernote" + (includeCodeView ? " code-view" : "") + "'></textarea>");
		$container.find("textarea.summernote").each(d20.utils.summernoteInit);
		$container.find("textarea.summernote").summernote("focus");
		$content.find(".lightly").each(function() {
			let $imgWrapper = $(this);
			let $img = $($imgWrapper.html());
			$imgWrapper.after($img);
			$imgWrapper.remove();
		});
		$container.find(".note-editable").html($content.html());
		$container.find("textarea.summernote").trigger("summernote.change");
	};

	d20.utils.addCSSRules = function(rules) {
		// make a new stylesheet
		var ns = document.createElement('style');
		document.getElementsByTagName('head')[0].appendChild(ns);

		// Safari does not see the new stylesheet unless you append something.
		// However!  IE will blow chunks, so ... filter it thusly:
		if (!window.createPopup) {
			ns.appendChild(document.createTextNode(''));
		}
		var s = document.styleSheets[document.styleSheets.length - 1];
		// some rules to apply

		// loop through and insert
		for (let selector in rules) {
			if (s.insertRule) {
				// it's an IE browser
				try {
					s.insertRule(selector + rules[selector], s.cssRules.length);
				}
				catch (e) {}
			}
			else {
				// it's a W3C browser
				try {
					s.addRule(selector, rules[selector]);
				}
				catch (e) {
					console.log("Error addding rule!");
					console.log(e);
				}
			}
		}
	};

	d20.utils.defaultDiceTokens = {
		//"d4": ["https://s3.amazonaws.com/files.d20.io/images/747303/YxmOG16zPFiSrW-lEdmpTg/thumb.png?1362453271", "https://s3.amazonaws.com/files.d20.io/images/747301/kMSch19zUnLoGoySwF9Ykw/thumb.png?1362453271", "https://s3.amazonaws.com/files.d20.io/images/747302/ENrfFRhP2pDdneKgT6Jgxg/thumb.png?1362453271", "https://s3.amazonaws.com/files.d20.io/images/747304/aZ8KB0ptksJcgRQx8gMS2w/thumb.png?1362453271"],
		//"d20": ["https://s3.amazonaws.com/files.d20.io/images/747271/vPvYG84j2tSSpZ48D3eNqQ/thumb.png?1362453151", "https://s3.amazonaws.com/files.d20.io/images/747272/6BPnNW3PBEhPclkb-xIQ9w/thumb.png?1362453151", "https://s3.amazonaws.com/files.d20.io/images/747274/MzYLKWK5SVhbdvJ8napIzQ/thumb.png?1362453151", "https://s3.amazonaws.com/files.d20.io/images/747273/K0Lx76PSDaAQdNjWmoXang/thumb.png?1362453151", "https://s3.amazonaws.com/files.d20.io/images/747276/Q72SEogE5fqO6v6aMCBUPw/thumb.png?1362453152", "https://s3.amazonaws.com/files.d20.io/images/747275/aRwPAppIFt7HPM5C6y0lQQ/thumb.png?1362453152", "https://s3.amazonaws.com/files.d20.io/images/747277/beOPJkwPA4PRV4QLq7byOg/thumb.png?1362453152", "https://s3.amazonaws.com/files.d20.io/images/747278/5j5CigYBAP3DG-cNrHQ_FQ/thumb.png?1362453152", "https://s3.amazonaws.com/files.d20.io/images/747282/RWTJJTPcxOvZNQGCaBiQcg/thumb.png?1362453153", "https://s3.amazonaws.com/files.d20.io/images/747280/J5X-7rRBuaOVzKCXgJWYnQ/thumb.png?1362453153", "https://s3.amazonaws.com/files.d20.io/images/747281/_bVtu7w2FZoYJ95iANudJg/thumb.png?1362453153", "https://s3.amazonaws.com/files.d20.io/images/747279/H4wLbu2fcIqjXaBNR8F0ZQ/thumb.png?1362453153", "https://s3.amazonaws.com/files.d20.io/images/747284/FzVdwcAZVuCyzHGlEQuSEg/thumb.png?1362453154", "https://s3.amazonaws.com/files.d20.io/images/747283/mSSjECWXrGoUpWWpRrWpGw/thumb.png?1362453154", "https://s3.amazonaws.com/files.d20.io/images/747288/a8LXJpE19UPpMTQ8Zw6q-w/thumb.png?1362453155", "https://s3.amazonaws.com/files.d20.io/images/747285/t1hwT9c3lrDYxqItfXYmGw/thumb.png?1362453154", "https://s3.amazonaws.com/files.d20.io/images/747287/wr35rz8yLjQkyiQKBKRR9A/thumb.png?1362453155", "https://s3.amazonaws.com/files.d20.io/images/747290/d3_6X1wnx1M_qe3wpBXu8Q/thumb.png?1362453156", "https://s3.amazonaws.com/files.d20.io/images/747291/0uDnSVP2vb51jgcjqe3KAA/thumb.png?1362453158", "https://s3.amazonaws.com/files.d20.io/images/747289/juvZAZ00F_AETQb4g4lV3w/thumb.png?1362453155"]
		"d4": ["https://s3.amazonaws.com/files.d20.io/images/779542/DEYaBdP8w9B1CUSK26im0A/thumb.png?1363050056", "https://s3.amazonaws.com/files.d20.io/images/779540/P7yKde5fyGZCB1ud70UOzA/thumb.png?1363050056", "https://s3.amazonaws.com/files.d20.io/images/779539/AO4m-45bGw5yOcnZXUAn9g/thumb.png?1363050056", "https://s3.amazonaws.com/files.d20.io/images/779541/oWA-hmBAHNAijceHr8k-3A/thumb.png?1363050056"],
		"d6": ["https://s3.amazonaws.com/files.d20.io/images/779533/-gS85HUaXIvmE5SjGpoH4w/thumb.png?1363049998", "https://s3.amazonaws.com/files.d20.io/images/779535/vkc_PT4z-d_ON1MvfHaCiA/thumb.png?1363049999", "https://s3.amazonaws.com/files.d20.io/images/779534/mHDadFirie4L12_ii-HYqQ/thumb.png?1363049998", "https://s3.amazonaws.com/files.d20.io/images/779531/nXqp2BhdwVsQn7cDR3cMlg/thumb.png?1363049998", "https://s3.amazonaws.com/files.d20.io/images/779532/nQD5_IXYLWN7YCjnd5zugA/thumb.png?1363049998", "https://s3.amazonaws.com/files.d20.io/images/779536/ttiwwiWE2PVkhD2d7fV3GA/thumb.png?1363049999"],
		"d8": ["https://s3.amazonaws.com/files.d20.io/images/779514/GPCh5vqdSwvt_ANka3yhaw/thumb.png?1363049802", "https://s3.amazonaws.com/files.d20.io/images/779517/nnuf1Pe2Fq70BIs9FGI7mQ/thumb.png?1363049802", "https://s3.amazonaws.com/files.d20.io/images/779516/WnwuwT7yb5VM3-KiJY3GOg/thumb.png?1363049802", "https://s3.amazonaws.com/files.d20.io/images/779515/Gx21buVd6d6onPsALrGFWQ/thumb.png?1363049802", "https://s3.amazonaws.com/files.d20.io/images/779518/4LqfUGiX8sBXrX9b5gUnLw/thumb.png?1363049803", "https://s3.amazonaws.com/files.d20.io/images/779519/YOR5Wav0-3-L1fm4vD-LFQ/thumb.png?1363049803", "https://s3.amazonaws.com/files.d20.io/images/779522/dGFXXsEJz0EPA8dRpZvOzA/thumb.png?1363049804", "https://s3.amazonaws.com/files.d20.io/images/779521/QXm6GcIhK6zTdMvJZVS8Og/thumb.png?1363049804"],
		"d10": ["https://s3.amazonaws.com/files.d20.io/images/779498/fjup5Fz4iV-TFKxV9z1Qtg/thumb.png?1363049717", "https://s3.amazonaws.com/files.d20.io/images/779500/ug7m7g1rII05ZFzyTrkRmw/thumb.png?1363049717", "https://s3.amazonaws.com/files.d20.io/images/779499/QNZR5kGieM1x00yQvSYYbg/thumb.png?1363049717", "https://s3.amazonaws.com/files.d20.io/images/779497/tkz2552-MqV8a_woAD8S4A/thumb.png?1363049717", "https://s3.amazonaws.com/files.d20.io/images/779501/xKjqIxXzibpcx3Lp7UH6qg/thumb.png?1363049718", "https://s3.amazonaws.com/files.d20.io/images/779502/Bpc1QATzO293LvGS3neBsQ/thumb.png?1363049718", "https://s3.amazonaws.com/files.d20.io/images/779504/Bpw24T8na0nJNFdTKZX5aw/thumb.png?1363049718", "https://s3.amazonaws.com/files.d20.io/images/779503/ukQbc7uDKfl62ng2EO6h6g/thumb.png?1363049719", "https://s3.amazonaws.com/files.d20.io/images/779505/23948Y6_O0Bc0RuIve3BbA/thumb.png?1363049719", "https://s3.amazonaws.com/files.d20.io/images/779506/VhwbFVDm2KOte5h2p97n7w/thumb.png?1363049719"],
		"d12": ["https://s3.amazonaws.com/files.d20.io/images/779476/FRkaR6XvyzUuZb0ZB7ysCA/thumb.png?1363049489", "https://s3.amazonaws.com/files.d20.io/images/779474/UyTKDHxf-fU1zC3w6udl0w/thumb.png?1363049489", "https://s3.amazonaws.com/files.d20.io/images/779475/kUK2UmBaD2No00Gp4Q_OCQ/thumb.png?1363049489", "https://s3.amazonaws.com/files.d20.io/images/779477/OVnJDjAkMPLk29hjpFjUvw/thumb.png?1363049489", "https://s3.amazonaws.com/files.d20.io/images/779478/2la9taZk_vqdKItYZ6JEfA/thumb.png?1363049490", "https://s3.amazonaws.com/files.d20.io/images/779479/fa8f9OVIBt79oETji8C8Lg/thumb.png?1363049490", "https://s3.amazonaws.com/files.d20.io/images/779480/CTuw9Yiijq24ra3G9YMuPA/thumb.png?1363049490", "https://s3.amazonaws.com/files.d20.io/images/779481/d4onnc7NOAbNG5JbiL9mbg/thumb.png?1363049491", "https://s3.amazonaws.com/files.d20.io/images/779482/Oy2dTkB3-NlxiMsTRj78nw/thumb.png?1363049491", "https://s3.amazonaws.com/files.d20.io/images/779483/mO_KU8nlO7GDQKc2J_aNeg/thumb.png?1363049491", "https://s3.amazonaws.com/files.d20.io/images/779484/3MYG5dYJhiKXsRZtSUpHZw/thumb.png?1363049491", "https://s3.amazonaws.com/files.d20.io/images/779485/VxA3umVDmYrH5A_VBecUIQ/thumb.png?1363049492"],
		"d20": ["https://s3.amazonaws.com/files.d20.io/images/779445/OfLXGnbkNr2qKg1Qqk4cPg/thumb.png?1363049314", "https://s3.amazonaws.com/files.d20.io/images/779447/br4TdShbuMIZ-D-lyeXsKA/thumb.png?1363049315", "https://s3.amazonaws.com/files.d20.io/images/779454/2ARsJLoP4tExbCWrRaaxQg/thumb.png?1363049318", "https://s3.amazonaws.com/files.d20.io/images/779444/3pryVOKRxMCBisEHpH3LWg/thumb.png?1363049314", "https://s3.amazonaws.com/files.d20.io/images/779446/Yk4sSF3eWfnpeJd4DQpV2A/thumb.png?1363049314", "https://s3.amazonaws.com/files.d20.io/images/779450/tdvjVviFHhM_KxjFRQomhA/thumb.png?1363049316", "https://s3.amazonaws.com/files.d20.io/images/779456/twbHlPq0CFjFCpAyS59CTQ/thumb.png?1363049319", "https://s3.amazonaws.com/files.d20.io/images/779449/PPHDirZfEowhjBHxQdxJiw/thumb.png?1363049315", "https://s3.amazonaws.com/files.d20.io/images/779448/1SpNrrunpHwrNbsKcqpCzQ/thumb.png?1363049315", "https://s3.amazonaws.com/files.d20.io/images/779458/VsueBYqaDlvp9BjlXl9wMQ/thumb.png?1363049320", "https://s3.amazonaws.com/files.d20.io/images/779451/nWqhH9iMimUAJh_9jOFEog/thumb.png?1363049316", "https://s3.amazonaws.com/files.d20.io/images/779452/TvksvU6AZm2wmpEQ2HkBlQ/thumb.png?1363049317", "https://s3.amazonaws.com/files.d20.io/images/779459/L4pwmqIbQk0TfaCMExrYxQ/thumb.png?1363049320", "https://s3.amazonaws.com/files.d20.io/images/779453/MDmeMWOQ_lARfvFoT1n3KQ/thumb.png?1363049317", "https://s3.amazonaws.com/files.d20.io/images/779460/my8VEGyYcJIHZN2uXP6QXQ/thumb.png?1363049321", "https://s3.amazonaws.com/files.d20.io/images/779455/nuz5AefdQSB6H4mvUXoqhw/thumb.png?1363049318", "https://s3.amazonaws.com/files.d20.io/images/779457/kQBunq7iXGmHNqZQCa5MCA/thumb.png?1363049319", "https://s3.amazonaws.com/files.d20.io/images/779463/6n_z7Gwd7eacm3-HC-f-mg/thumb.png?1363049322", "https://s3.amazonaws.com/files.d20.io/images/779462/aVz3qCe2QM2nWhn3BoT9rg/thumb.png?1363049321", "https://s3.amazonaws.com/files.d20.io/images/779461/4PuFJYddJWJjj4uL5S3mxQ/thumb.png?1363049321"]
	}

	for (var ddt in d20.utils.defaultDiceTokens) {
		d20.utils.defaultDiceTokens[ddt] = _.map(d20.utils.defaultDiceTokens[ddt], function(item) {
			return escape(item + "");
		})
	}

	d20.utils.hexToRgb = function(h) {
		h[4] || (h = h.replace(/./g, '$&$&').slice(1));
		return ['0x' + h[1] + h[2] | 0, '0x' + h[3] + h[4] | 0, '0x' + h[5] + h[6] | 0]
	};

	var linkCache = {};

	var _refreshLinkCache = function() {
		var possibilities = {};
		d20.Campaign.characters.each(function(character) {
			var injournals = character.get("inplayerjournals").split(",");
			if (window.is_gm || _.indexOf(injournals, "all") !== -1 || (window.currentPlayer && _.indexOf(injournals, window.currentPlayer.id) !== -1)) {
				possibilities[character.get("name").toLowerCase()] = {
					type: "character",
					id: character.id
				};
			}
		});

		d20.Campaign.handouts.each(function(handout) {
			var injournals = handout.get("inplayerjournals").split(",");
			if (window.is_gm || _.indexOf(injournals, "all") !== -1 || (window.currentPlayer && _.indexOf(injournals, window.currentPlayer.id) !== -1)) {
				possibilities[handout.get("name").toLowerCase()] = {
					type: "handout",
					id: handout.id
				};
			}
		});
		linkCache = possibilities;
	};

	d20.utils.refreshLinkCache = _.debounce(_refreshLinkCache, 100);

	d20.utils.autoLink = function(text) {
		var linkreg = /\[[^\]]+\]/g
		text = text.replace(linkreg, function(match) {
			match = match.substring(1, match.length - 1);
			var foundmatch = linkCache[match.toLowerCase()];
			if (foundmatch) {
				return "<a href='http://journal.roll20.net/" + foundmatch.type + "/" + foundmatch.id + "'>" + match + "</a>";
			}
			else {
				return "[" + match + "]";
			}
		});
		return text;
	};

	var $notifier = $("#textchat-notifier");

	var currentTextchatNotificationPermanent = false;

	d20.utils.textchatNotify = function(msg, permanent) {

		if (currentTextchatNotificationPermanent === true && permanent !== true) return; //ignore non-permanent messages

		if (msg === false) {
			$notifier.hide();
		}
		else {
			$notifier.show().text(msg);
		}

		if (permanent === true) {
			if (msg !== false) currentTextchatNotificationPermanent = true;
			else currentTextchatNotificationPermanent = false;
		}
	}

	d20.utils.getParentsUntil = function(elem, parent, selector) {

		var parents = [];
		// if ( parent ) {
		//     var parentType = parent.charAt(0);
		// }
		if (selector) {
			var selectorType = selector.charAt(0);
		}

		// Get matches
		for (; elem && elem !== document; elem = elem.parentNode) {

			// Check if parent has been reached
			// if ( parent ) {

			//     // If parent is a class
			//     if ( parentType === '.' ) {
			//         if ( elem.classList.contains( parent.substr(1) ) ) {
			//             break;
			//         }
			//     }

			//     // If parent is an ID
			//     if ( parentType === '#' ) {
			//         if ( elem.id === parent.substr(1) ) {
			//             break;
			//         }
			//     }

			//     // If parent is a data attribute
			//     if ( parentType === '[' ) {
			//         if ( elem.hasAttribute( parent.substr(1, parent.length - 1) ) ) {
			//             break;
			//         }
			//     }

			//     // If parent is a tag
			//     if ( elem.tagName.toLowerCase() === parent ) {
			//         break;
			//     }

			// }

			if (parent) {
				if (parent === elem) {
					break;
				}
			}

			if (selector) {

				// If selector is a class
				if (selectorType === '.') {
					if (elem.classList.contains(selector.substr(1))) {
						parents.push(elem);
					}
				}

				// If selector is an ID
				if (selectorType === '#') {
					if (elem.id === selector.substr(1)) {
						parents.push(elem);
					}
				}

				// If selector is a data attribute
				if (selectorType === '[') {
					if (elem.hasAttribute(selector.substr(1, selector.length - 1))) {
						parents.push(elem);
					}
				}

				// If selector is a tag
				if (elem.tagName.toLowerCase() === selector) {
					parents.push(elem);
				}

			}
			else {
				parents.push(elem);
			}

		}

		return parents;

	};

})();

window.ucfirst = function(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
};

/*!
 Author: Stephen Korecky
 Website: http://stephenkorecky.com
 Plugin Website: http://github.com/skorecky/Add-Clear
 Version: 2.0.5
 The MIT License (MIT)
 Copyright (c) 2015 Stephen Korecky
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
*/

;
(function($, window, document, undefined) {

	// Create the defaults once
	var pluginName = "addClear",
		defaults = {
			closeSymbol: "&#10006;",
			color: "#CCC",
			top: -1,
			right: 8,
			returnFocus: true,
			showOnLoad: false,
			onClear: null,
			hideOnBlur: false,
			tabbable: true
		};

	// The actual plugin constructor
	function Plugin(element, options) {
		this.element = element;

		this.options = $.extend({}, defaults, options);

		this._defaults = defaults;
		this._name = pluginName;

		this.init();
	}

	Plugin.prototype = {

		init: function() {
			var $this = $(this.element),
				$clearButton,
				me = this,
				options = this.options;

			$this.wrap("<span style='position:relative;' class='add-clear-span'></span>");
			var tabIndex = options.tabbable ? "" : " tabindex='-1'";
			$clearButton = $("<a href='#clear' style='display: none;'" + tabIndex + ">" + options.closeSymbol + "</a>");
			$this.after($clearButton);
			$this.next().css({
				color: options.color,
				'text-decoration': 'none',
				display: 'none',
				'line-height': 1,
				overflow: 'hidden',
				position: 'absolute',
				right: options.right,
				top: options.top
			}, this);

			if ($this.val().length >= 1 && options.showOnLoad === true) {
				$clearButton.css({
					display: 'block'
				});
			}

			$this.focus(function() {
				if ($(this).val().length >= 1) {
					$clearButton.css({
						display: 'block'
					});
				}
			});

			$this.blur(function(e) {
				if (options.hideOnBlur) {
					setTimeout(function() {
						var relatedTarget = e.relatedTarget || e.explicitOriginalTarget || document.activeElement;
						if (relatedTarget !== $clearButton[0]) {
							$clearButton.css({
								display: 'none'
							});
						}
					}, 0);
				}
			});

			var handleUserInput = function() {
				if ($(this).val().length >= 1) {
					$clearButton.css({
						display: 'block'
					});
				}
				else {
					$clearButton.css({
						display: 'none'
					});
				}
			};

			var handleInput = function() {
				$this.off('keyup', handleUserInput);
				$this.off('cut', handleUserInput);
				handleInput = handleUserInput;
				handleUserInput.call(this);
			};

			$this.on('keyup', handleUserInput);

			$this.on('cut', function() {
				var self = this;
				setTimeout(function() {
					handleUserInput.call(self);
				}, 0);
			});

			$this.on('input', function() {
				handleInput.call(this);
			});

			if (options.hideOnBlur) {
				$clearButton.blur(function() {
					$clearButton.css({
						display: 'none'
					});
				});
			}

			$clearButton.click(function(e) {
				var $input = $(me.element);
				$input.val("").trigger("keyup");
				$(this).css({
					display: 'none'
				});
				if (options.returnFocus === true) {
					$input.focus();
				}
				if (options.onClear) {
					options.onClear($input);
				}
				e.preventDefault();
			});
		}

	};

	$.fn[pluginName] = function(options) {
		return this.each(function() {
			if (!$.data(this, "plugin_" + pluginName)) {
				$.data(this, "plugin_" + pluginName,
					new Plugin(this, options));
			}
		});
	};

})(jQuery, window, document);
d20.journal = d20.journal || {};
d20.compendium = d20.compendium || {};

d20.journal.charsheetLoadResolve = null;
d20.journal.charsheetLoadReject = null;
d20.journal.charsheetLoadPromise = new Promise((resolve, reject) => {
	d20.journal.charsheetLoadResolve = resolve;
	d20.journal.charsheetLoadReject = reject;
});

d20.journal.sandboxLoadResolve = null;
d20.journal.sandboxLoadReject = null;
d20.journal.sandboxLoadPromise = new Promise((resolve, reject) => {
	d20.journal.sandboxLoadResolve = resolve;
	d20.journal.sandboxLoadReject = reject;
});

d20.compendium.compendiumLoadResolve = null;
d20.compendium.compendiumLoadReject = null;
d20.compendium.compendiumLoadPromise = new Promise((resolve, reject) => {
	d20.compendium.compendiumLoadResolve = resolve;
	d20.compendium.compendiumLoadReject = reject;
});
d20.journal.usingFallback = false;

class CharsheetFallbackError extends Error {
	constructor(...params) {
		super(...params);

		if (Error.captureStackTrace) {
			Error.captureStackTrace(this, CharsheetFallbackError);
		}

		this.name = 'CharsheetFallbackError';
	}
}

const getErrorMessage = (error) => {
	try {
		return `Charsheet Fallback: Code: ${error.status}; Status: ${error.statusText}`;
	} catch (e) {
		return 'Charsheet Fallback: Unkown Error';
	}
};

const getTimingForRetries = (retries) => {
	switch (retries) {
		case 1:
			return { timeout: 15000, delay: 2000 };
		case 2:
			return { timeout: 30000, delay: 5000 };
		default:
			return { timeout: 5000, delay: 100 };
	}
};

function getCharsheetData(props = []) {
	return new Promise((resolve, reject) => {
		let retries = 0;

		const sendRequest = () => {
			const { timeout, delay } = getTimingForRetries(retries);

			$.ajax({
				url: `${CHARSHEET_URL}/graphql`,
				type: 'POST',
				data: { query: `{characterSheet(shortname: "${CHARSHEET_NAME}", campaignId: ${campaign_id}){${props.join()}}}` },
				timeout,
				error: (error) => {
					if (retries < 2) {
						retries += 1;
						setTimeout(sendRequest, delay);
					} else {
						reject(error);
						if (!d20.journal.usingFallback) {
							d20.journal.usingFallback = true;
							throw new CharsheetFallbackError(getErrorMessage(error));
						}
					}
				},
				success: (result) => {
					if (result.errors) reject(result.errors);

					if (result.data && result.data.characterSheet) {
						resolve(result.data.characterSheet);
					} else {
						reject();
					}
				},
			});
		};

		if (CHARSHEET_NAME === 'custom') {
			// For now, always use the fallback for a custom sheet
			reject('CUSTOM');
		} else {
			sendRequest();
		}
	});
}

function getCharsheetDataFallback() {
	const url = CHARSHEET_NAME === 'custom' ? `/editor/customcharsheetdata/${campaign_id}` : `/editor/charsheetdata/${campaign_id}`;

	return new Promise((resolve, reject) => {
		let retries = 0;

		const sendRequest = () => {
			$.ajax({
				url,
				type: 'GET',
				error: (error) => {
					if (retries < 2) {
						retries += 1;
						sendRequest();
					} else {
						reject(error);
					}
				},
				success: (result) => {
					const parsedResult = JSON.parse(result);
					resolve(parsedResult);
				},
			});
		};

		sendRequest();
	});
}

d20.journal.loadCustomCharsheet = async () => {
	await d20.journal.charsheetFetchPromise;

	let $layoutfrag = $(`<div class='root'>${d20.journal.customSheets.layouthtml}</div>`);
	$layoutfrag = d20.utils.htmlTranslator($layoutfrag);

	d20.journal.customSheets.availableRolls = {};
	d20.journal.customSheets.availableActions = {};
	d20.journal.customSheets.availableAttributes = {};
	d20.journal.customSheets.reservedAttributes = {};
	d20.journal.customSheets.tokenActions = [];
	d20.journal.customSheets.attrDeps = {};

	d20.journal.customSheets.eventListeners = [];

	const attrregex = /@{[^}]+}/g;

	d20.journal.updateSheetDeps = function (attrname, attrval) {
		const includedAttributes = attrval.match(attrregex);

		if (!includedAttributes) return true;

		for (let jj = 0; jj < includedAttributes.length; jj++) {
			const includedAttrName = includedAttributes[jj].substring(2, includedAttributes[jj].length - 1).toLowerCase();
			if (!d20.journal.customSheets.attrDeps[includedAttrName]) d20.journal.customSheets.attrDeps[includedAttrName] = [];
			if (d20.journal.customSheets.attrDeps[includedAttrName].indexOf(attrname.toLowerCase()) === -1) {
				d20.journal.customSheets.attrDeps[includedAttrName].push(attrname.toLowerCase());
			}
		}
	};

	$layoutfrag.find('button[type=roll]').each(function () {
		// Assume it starts with + strip out "roll_" in the "name" attribute
		const $thisel = $(this);
		const _$fieldset = $thisel.parents('fieldset');
		const _rollprefix = (_$fieldset.length > 0 ? `${_$fieldset.attr('class')}_` : '');

		if ($thisel.attr('name') !== undefined) {
			const _rollname = _rollprefix + $thisel.attr('name').substring(5, $thisel.attr('name').length).toLowerCase();
			d20.journal.customSheets.availableRolls[_rollname] = $thisel.val().split('\\n').join('\n');
			if ($thisel.hasClass('tokenaction')) {
				d20.journal.customSheets.tokenActions.push(_rollname);
			}
		}

		$thisel.addClass('btn');
	});

	// Get a list of action buttons, so we can use them in macros
	$layoutfrag.find('button[type=action]').each(function () {
		const $thisel = $(this);
		const fieldset = $thisel.parents('fieldset');
		// Prefix with repeating section name, if in one
		const rollprefix = (fieldset.length > 0 ? `${fieldset.attr('class')}_` : '');

		if ($thisel.attr('name') !== undefined) {
			const buttonName = $thisel.attr('name').replace(/^act_/, '');
			const rollName = (rollprefix + buttonName).toLowerCase();
			d20.journal.customSheets.availableActions[rollName] = buttonName;
		}
	});

	d20.journal.customSheets.tokenActions = _.sortBy(
		d20.journal.customSheets.tokenActions, (actionname) => actionname
	);

	const check_default = function (_attrname, $thisel, default_value) {
		if (!d20.journal.customSheets.availableAttributes[_attrname] || (d20.journal.customSheets.availableAttributes[_attrname] && $thisel.val() && $thisel.val() != default_value)) {
			return true;
		}
		return false;
	};

	$layoutfrag.find('*[name^="attr_"]').each(function () {
		const $thisel = $(this);

		const _$fset = $thisel.parents('fieldset');
		let _prefix = '';
		if (_$fset.length > 0) {
			const classlist = _$fset[0].classList;
			let groupname;
			_.each(classlist, (val) => {
				if (val.substring(0, 10) === 'repeating_') {
					groupname = val.toLowerCase().replace("'", '&quot;');
					return false;
				}
			});
			if (groupname) _prefix = `${groupname}_`;
		}

		const _attrname = _prefix + $thisel.attr('name').substring(5, $thisel.attr('name').length).toLowerCase();

		if (this.tagName.toLowerCase() === 'input' && $thisel.attr('type') === 'checkbox' && $thisel.val() !== undefined && check_default(_attrname, $thisel, undefined)) {
			if ($thisel.prop('checked')) {
				d20.journal.customSheets.availableAttributes[_attrname] = $thisel.val() || '';
			} else {
				d20.journal.customSheets.availableAttributes[_attrname] = '0';
			}
		} else if (this.tagName.toLowerCase() === 'input' && $thisel.attr('type') === 'radio' && $thisel.val() !== undefined && check_default(_attrname, $thisel, undefined)) {
			if ($thisel.prop('checked')) {
				d20.journal.customSheets.availableAttributes[_attrname] = $thisel.val() || '';
			}
		} else if ($thisel.prop('disabled')) {
			if (!this.attributes.value) {
				console.log('SHEET ERROR: Specified a disabled input without a valid formula in the value attribute.');
				return true;
			}
			d20.journal.customSheets.availableAttributes[_attrname] = this.attributes.value.nodeValue || '';
			d20.journal.updateSheetDeps(_attrname, d20.journal.customSheets.availableAttributes[_attrname]);
			$thisel.attr('data-formula', this.attributes.value.nodeValue);
			d20.journal.customSheets.reservedAttributes[_attrname] = true;
		} else if (this.tagName.toLowerCase() === 'span') {
			// if it already has a value, keeps the value, otherwise it is set to undefined
			d20.journal.customSheets.availableAttributes[_attrname] = d20.journal.customSheets.availableAttributes[_attrname];
		} else if (check_default(_attrname, $thisel, '')) {
			d20.journal.customSheets.availableAttributes[_attrname] = $thisel.val() || '';
		}

		// Check for dynamic dependencies
		if (!$thisel.prop('disabled') && typeof $thisel.val() === 'string' && $thisel.val().indexOf('@{') !== -1) {
			d20.journal.updateSheetDeps(_attrname, $thisel.val());
		}
	});

	d20.journal.customSheets.layouthtml = $layoutfrag.html();

	const head = document.head || document.getElementsByTagName('head')[0];

	if (d20.journal.customSheets.iframeCss) {
		d20.journal.customSheets.iframeStyleEl = d20.journal.makeCssElement(d20.journal.customSheets.iframeCss);
	}

	d20.journal.customSheets.styleel = d20.journal.makeCssElement(d20.journal.customSheets.css);
	$('style[title=charsheet]').remove();
	head.appendChild(d20.journal.customSheets.styleel);

	d20.journal.charsheetLoadResolve();
};

d20.journal.makeCssElement = (css) => {
	const style = document.createElement('style');

	style.type = 'text/css';
	style.title = 'charsheet';
	if (style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		style.appendChild(document.createTextNode(css));
	}
	return style;
};

const htmlSanitizeLegacy = (dirtyHtml) => {
	let allowed = '<br><input><textarea><div><span><label><hr><img><b><i><strong><em><h1><h2><h3><h4><h5><h6><p><hr><table><tr><td><tbody><thead><th><tfoot><select><option><fieldset><button><ul><li><ol><caption>';
	// Remove anything in <mobile> tags
	let input = dirtyHtml.replace(/<mobile\s*>[\s\S]*?<\/mobile\s*>|<\/*web\s*>|<\/*mobile\s*>/g, '');
	// Strips HTML and PHP tags from a string
	if (allowed !== undefined) {
		input = html_sanitize(
			input,
			(url) => {
				const match = url.toString();
				const noproxy = ['https://s3.amazonaws.com/files.d20.io', 'http://imgsrv.roll20.net', 'https://imgsrv.roll20.net', imgsrv_url, 'https://app.roll20.net', 'https://storage.googleapis.com/char-sheet-app-images-6e101411'];

				for (let i = 0; i < noproxy.length; i++) {
					if (match.substring(0, noproxy[i].length) === noproxy[i]) {
						return match;
					}
				}
				if (/^https?:\/\//.test(match)) {
					return `${imgsrv_url}?src=${escape(match)}`;
				}

				return '';
			},
			(groupid) => {
				const classes = groupid.split(' ');
				_.each(classes, (id, idx) => {
					if (id.substring(0, 5) === 'attr_' || id.substring(0, 6) === 'sheet-' || id.substring(0, 10) === 'repeating_' || id.substring(0, 5) === 'roll_' || id.substring(0, 4) === 'act_' || id === 'tokenaction' || id.substring(0, 5) === 'comp_') {
						classes[idx] = id;
					} else {
						classes[idx] = `sheet-${id}`;
					}
				});
				return classes.join(' ');
			},
		);
	}
	allowed = ((`${allowed || ''}`).toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join(''); // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
	const tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;
	const commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;
	return input.replace(commentsAndPhpTags, '').replace(tags, ($0, $1) => (allowed.indexOf(`<${$1.toLowerCase()}>`) > -1 ? $0 : ''));
};

const htmlSanitize = (dirtyHtml, legacy = false) => {
	const tags = ['a', 'abbr', 'address', 'article', 'aside', 'b', 'bdi', 'bdo', 'blockquote', 'br', 'button', 'caption',
		'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'details', 'dfn', 'div', 'dl', 'dt', 'em', 'fieldset', 'figcaption',
		'figure', 'footer', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'i', 'img', 'input', 'kbd',
		'label', 'li', 'main', 'main', 'mark', 'nav', 'ol', 'option', 'p', 'pre', 'q', 'rb', 'rp', 'rt', 'rtc', 'ruby',
		's', 'samp', 'section', 'select', 'small', 'span', 'strong', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea',
		'tfoot', 'th', 'thead', 'time', 'tr', 'u', 'ul', 'var', 'wbr'];
	let attributes = ['abbr', 'accept', 'accesskey', 'align', 'alt', 'aria-*', 'autocomplete', 'axis', 'bgcolor', 'border',
		'cellpadding', 'cellspacing', 'char', 'charoff', 'checked', 'class', 'clear', 'color', 'cols', 'colspan', 'compact',
		'controls', 'coords', 'data-*', 'datetime', 'default', 'dir', 'disabled', 'draggable', 'enctype', 'face', 'for',
		'frame', 'frameborder', 'height', 'hidden', 'high', 'href', 'hreflang', 'hspace', 'inert', 'inputmode', 'ismap', 'itemprop',
		'itemscope', 'kind', 'label', 'lang', 'list', 'loading', 'loop', 'low', 'marginheight', 'marginwidth', 'max', 'maxlength',
		'method', 'min', 'multiple', 'muted', 'name', 'nohref', 'noshade', 'novalidate', 'nowrap', 'open', 'placeholder',
		'preload', 'radiogroup', 'readonly', 'required', 'reversed', 'role', 'rows', 'rowspan', 'rules', 'scope', 'selected',
		'shape', 'size', 'span', 'spellcheck', 'src', 'srclang', 'start', 'step', 'style', 'summary', 'tabindex', 'title',
		'translate', 'type', 'valign', 'value', 'vspace', 'width', 'wrap'];

	if (!legacy) attributes = attributes.concat('id');

	// Remove anything in <mobile> tags
	const input = dirtyHtml.replace(/<mobile\s*>[\s\S]*?<\/mobile\s*>|<\/*web\s*>|<\/*mobile\s*>/g, '');

	const cleanedHtml = Window.sanitizeHtml(
		input,
		{
			allowedAttributes: {
				'*': attributes,
			},
			allowedTags: tags,
			transformTags: {
				'*': (tagName, attribs) => {
					const newAttribs = attribs;
					if (legacy && attribs.class) {
						const classes = attribs.class.split(' ');
						classes.forEach((klass, i) => {
							if (klass.substring(0, 6) === 'sheet-' || klass === 'tokenaction' || ['attr', 'repeating', 'roll', 'act', 'comp'].includes(klass.split('_')[0])) {
								classes[i] = klass;
							} else {
								classes[i] = `sheet-${klass}`;
							}
						});
						newAttribs.class = classes.join(' ');
					}

					if (attribs.src) {
						newAttribs.src = d20.utils.addImageProxy(attribs.src);
					}

					if (attribs.href) {
						if (attribs.href.substring(0, 1) !== '#') {
							newAttribs.href = '#';
						}
					}

					return {
						tagName,
						attribs: newAttribs,
					};
				},
			},
			parser: {
				xmlMode: true,
				decodeEntities: false,
			},
		},
	);

	return cleanedHtml;
};

d20.journal.setLegacySanitization = (legacy) => {
	d20.journal.legacySanitization = legacy;
	d20.journal.htmlFilterFunc = legacy ? htmlSanitizeLegacy : htmlSanitize;
};

d20.journal.cssFilterFunc = function (inputCss, allowed) {
	let input = inputCss.replace(/\/\*\s*start mobile\s*\*\/[\S\s]*?\/\*\s*end mobile\s*\*\//gi, ''); // remove mobile css
	input = input.replace(/\/\*[^*]+\*\//g, ''); // remove all css comments

	// Look for selectors, make sure that they start with .char-sheet
	const font_imports = input.match(/(@import url\(['|"].+['|"]\);*)/ig) || [];
	input = input.replace(/(@import url\(['|"].+['|"]\);*)/ig, '');

	input = input.replace(/([^{]+){[^}]*}/ig, (match, selectors) => {
		selectors = $.trim(selectors);
		const sarray = selectors.split(',');
		let finalselector = '';
		for (let i = 0; i < sarray.length; i++) {
			sarray[i] = $.trim(sarray[i]);
			if (sarray[i].substring(0, 1) === '#') {
				sarray[i] = sarray[i].replace('#', '.');
			}
			if (sarray[i].match(/^\.lang-[a-z]{2}( .*)?$/)) {
				sarray[i] = `.charsheet${sarray[i]}`;
			} else if (!sarray[i].match(/^\.charsheet(\.lang-[a-z]{2})?( .*)?$/) && sarray[i] !== '@font-face' && sarray[i].substring(0, 20) !== '.sheet-rolltemplate-' && sarray[i].substring(0, 36) !== '.withoutavatars .sheet-rolltemplate-' && sarray[i].substring(0, 8) !== '@import ') {
				sarray[i] = `.charsheet ${sarray[i]}`;
			}
		}
		finalselector = sarray.join(',');
		match = match.replace(selectors, finalselector);
		return match;
	});

	const evil = [
		/(\bdata:\b|eval|cookie|\bwindow\b|\bparent\b|\bthis\b)/i, // suspicious javascript-type words
		/behaviou?r|expression|moz-binding|@charset|javascript|vbscript|[\<]|\\\w/i,
		/@import (?!url\(['"]https:\/\/fonts\.googleapis\.com\/css\?family=)/i,
		/// [\<>]/, // back slash, html tags,
		/[\x7f-\xff]/, // high bytes -- suspect
		/[\x00-\x08\x0B\x0C\x0E-\x1F]/, // low bytes -- suspect
		/&\#/, // bad charset
	];

	for (let i = 0; i < evil.length; i++) {
		if (input.match(evil[i])) {
			console.log(input.match(evil[i]));
			console.error('Potential CSS security violation; character sheet template styling thrown out.');
			input = '';
		}
	}

	font_imports.forEach((fontImport) => {
		if (fontImport.includes('fonts.googleapis.com')) {
			input = `${fontImport} ${input}`;
		}
	});

	input = input.replace(/url[\s]*\([^\)]+\)/ig, (match) => {
		match = match.replace(/\s/gi, ''); // replace all whitespace.
		match = match.replace('url(', '');
		const ps = match.split(')');
		match = ps[ps.length - 2]; // everything before last parentheses
		match = match.replace(/'/ig, '');
		match = match.replace(/"/ig, ''); // remove all quotes/apostrophes
		// At this point it should just be the URL.
		const noproxy = ['https://s3.amazonaws.com/files.d20.io', 'http://imgsrv.roll20.net', 'https://imgsrv.roll20.net', imgsrv_url, 'https://app.roll20.net' , 'https://storage.googleapis.com/char-sheet-app-images-6e101411'];

		for (let i = 0; i < noproxy.length; i++) {
			if (match.substring(0, noproxy[i].length) === noproxy[i]) {
				return `url("${match}")`;
			}
		}
		if (/^https?:\/\//.test(match)) {
			return `url('${imgsrv_url}/?src=${escape($.trim(match))}')`;
		}

		return '';
	});

	allowed = ((`${allowed || ''}`).toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join(''); // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)
	const tags = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi;
	const commentsAndPhpTags = /<!--[\s\S]*?-->|<\?(?:php)?[\s\S]*?\?>/gi;
	return input.replace(commentsAndPhpTags, '').replace(tags, ($0, $1) => (allowed.indexOf(`<${$1.toLowerCase()}>`) > -1 ? $0 : ''));
};

d20.journal.loadSheetFromFallback = (customcharsheet_html, customcharsheet_css) => {
	d20.journal.customSheets.rollTemplates = {};
	d20.journal.customSheets.charmancerTemplates = {};
	d20.journal.customSheets.charmancerRepeating = {};
	d20.journal.customSheets.workerScripts = [];

	let decodedhtml = BASE64.decode(customcharsheet_html);
	const decodedCss = BASE64.decode(customcharsheet_css).replace(/\/\*\s*?start mobile\s*?\*\/[\s\S]*?\/\*\s*?end mobile\s*?\*\//gim, '');

	const rolltemplateregex = /(<rolltemplate [^>]+>)([\s\S]*?)(<\/rolltemplate>)/ig;
	const rolltempclassregex = /(class=\"sheet-rolltemplate-)([^\"]+)(\">)/i;

	decodedhtml = decodedhtml.replace(rolltemplateregex, function (match) {
		const classmatches = rolltempclassregex.exec(match);
		if (classmatches && classmatches.length > 3) {
			const myid = classmatches[2];
			let templateInnerHtml = arguments[2];
			templateInnerHtml = d20.journal.htmlFilterFunc(templateInnerHtml, true);
			d20.journal.customSheets.rollTemplates[myid] = templateInnerHtml;
		}

		return '';
	});

	const charmancertemplateregex = /(<charmancer [^>]+>)([\s\S]*?)(<\/charmancer>)/ig;
	const charmancertempclassregex = /(class=\"sheet-(charmancer|repeating)-)([^\"]+)(\">)/i;

	decodedhtml = decodedhtml.replace(charmancertemplateregex, function (match) {
		const classmatches = charmancertempclassregex.exec(match);
		if (classmatches && classmatches.length > 4) {
			const myid = classmatches[3];
			let templateInnerHtml = arguments[2];
			templateInnerHtml = d20.journal.htmlFilterFunc(templateInnerHtml);
			if (classmatches[2].toLowerCase() == 'charmancer') {
				d20.journal.customSheets.charmancerTemplates[myid] = templateInnerHtml;
			} else {
				d20.journal.customSheets.charmancerRepeating[myid.split(' ')[0]] = templateInnerHtml;
			}
		}

		return '';
	});

	const scriptjsregex = /(<script [^>]+>)([\s\S]*?)(<\/script>)/ig;
	const workerjstyperegex = /(type=[\"|']text\/worker[\"|']>)/i;

	decodedhtml = decodedhtml.replace(scriptjsregex, function (match) {
		const workermatches = workerjstyperegex.exec(match);
		if (workermatches && workermatches[0].indexOf('text/worker') !== -1) {
			d20.journal.customSheets.workerScripts.push(arguments[2]);
			return '';
		}

		return match;
	});

	d20.journal.customSheets.layouthtml = d20.journal.htmlFilterFunc(decodedhtml);

	d20.journal.customSheets.css = d20.journal.cssFilterFunc(decodedCss);

	if (!d20.journal.legacySanitization) d20.journal.customSheets.iframeCss = decodedCss;
};

const loadBlankSheet = () => {
	d20.journal.useCustomSheets = false;
	d20.journal.customSheets.translation = { values: {}, lang: LANGUAGE };
	i18n.translator.add(d20.journal.customSheets.translation);

	d20.journal.setLegacySanitization(false);
	d20.journal.customSheets.sheetSettings = {};
	d20.journal.customSheets.rollTemplates = {};
	d20.journal.customSheets.charmancerTemplates = {};
	d20.journal.customSheets.charmancerRepeating = {};
	d20.journal.customSheets.workerScripts = [];
	d20.journal.customSheets.layouthtml = '';
	d20.journal.customSheets.css = '';
	d20.journal.customSheets.iframeCss = '';

	d20.journal.customSheets.availableRolls = {};
	d20.journal.customSheets.availableActions = {};
	d20.journal.customSheets.availableAttributes = {};
	d20.journal.customSheets.reservedAttributes = {};
	d20.journal.customSheets.tokenActions = [];
	d20.journal.customSheets.attrDeps = {};

	d20.journal.customSheets.eventListeners = [];

	d20.compendium.shortName = COMPENDIUM_OVERRIDE ? COMPENDIUM_OVERRIDE : '';
};

async function getAllCharsheetData() {
	d20.journal.useCustomSheets = true;
	d20.journal.customSheets = {
		sheetSettings: {},
		rollTemplates: {},
		charmancerTemplates: {},
		charmancerRepeating: {},
		workerScripts: [],
		layouthtml: '',
		css: '',
		iframeCss: '',

		availableRolls: {},
		availableActions: {},
		availableAttributes: {},
		reservedAttributes: {},
		tokenActions: [],
		attrDeps: {},

		eventListeners: [],
	};

	return new Promise((resolve) => {
		if (CHARSHEET_NAME === 'none') {
			loadBlankSheet();
			resolve();
		} else {
			Promise.all([
				getCharsheetData(['css(sanitized: true)', 'html', 'rolltemplates', 'mancertemplates', 'userOptions']),
				getCharsheetData(['sheetworkers', 'legacySanitization', `translation(language: "${LANGUAGE}")`, 'iframeCss', 'compendium']),
			]).then((results) => {
				const charsheetData = {
					...results[0],
					...results[1],
				};
				d20.journal.setLegacySanitization(charsheetData.legacySanitization);

				d20.journal.customSheets.translation = { values: charsheetData.translation, lang: LANGUAGE };
				i18n.translator.add(d20.journal.customSheets.translation);

				d20.journal.customSheets.sheetSettings = charsheetData.userOptions;

				d20.journal.customSheets.rollTemplates = charsheetData.rolltemplates;
				d20.journal.customSheets.charmancerTemplates = charsheetData.mancertemplates.charmancer;
				d20.journal.customSheets.charmancerRepeating = charsheetData.mancertemplates.repeating;
				d20.journal.customSheets.workerScripts = charsheetData.sheetworkers;
				d20.journal.customSheets.layouthtml = charsheetData.html;
				d20.journal.customSheets.css = charsheetData.css;
				d20.journal.customSheets.iframeCss = charsheetData.iframeCss;

				d20.compendium.shortName = COMPENDIUM_OVERRIDE ? COMPENDIUM_OVERRIDE : charsheetData.compendium;

				resolve();
			}).catch((error) => {
				if (error !== 'CUSTOM') {
					// Don't need to warn if we're falling back for a custom sheet
					console.warn('Failure contacting character sheet service, using fallback.');
				}

				getCharsheetDataFallback().then((result) => {
					d20.journal.setLegacySanitization(result.legacy_sanitization);

					if (sheetSandboxGame) {
						d20.journal.customcharsheet_html = result.html;
						d20.journal.customcharsheet_css = result.css;
						d20.journal.customcharsheet_translation = result.translation;
					}

					d20.journal.customSheets.translation = JSON.parse(BASE64.decode(result.translation));
					i18n.translator.add(d20.journal.customSheets.translation);

					d20.journal.customSheets.sheetSettings = result.sheet_options;

					d20.compendium.shortName = COMPENDIUM_OVERRIDE ? COMPENDIUM_OVERRIDE : result.compendium;

					d20.journal.loadSheetFromFallback(result.html, result.css);

					resolve();
				}).catch((innerError) => {
					// If the fallback fails, load a blank sheet.
					console.error('Unable to load character sheet data.');
					if (innerError) console.error(innerError);

					loadBlankSheet();

					resolve();
				});
			});
		}
	});
}

d20.journal.charsheetFetchPromise = getAllCharsheetData();

d20.DicePEG = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "rollExpression": parse_rollExpression,
        "rollExpressionPrimary": parse_rollExpressionPrimary,
        "validRollSuffix": parse_validRollSuffix,
        "rollGroup": parse_rollGroup,
        "rollGroupExpression": parse_rollGroupExpression,
        "labelAwareRollOperator": parse_labelAwareRollOperator,
        "rollOperator": parse_rollOperator,
        "fullRoll": parse_fullRoll,
        "coreRoll": parse_coreRoll,
        "numberOfDice": parse_numberOfDice,
        "numberOfSides": parse_numberOfSides,
        "groupMods": parse_groupMods,
        "rollMods": parse_rollMods,
        "explodingMod": parse_explodingMod,
        "compoundingMod": parse_compoundingMod,
        "penetratingMod": parse_penetratingMod,
        "keepMod": parse_keepMod,
        "dropMod": parse_dropMod,
        "customCritMod": parse_customCritMod,
        "customFumbleMod": parse_customFumbleMod,
        "rerollMod": parse_rerollMod,
        "rerollOnceMod": parse_rerollOnceMod,
        "sortMod": parse_sortMod,
        "floorMod": parse_floorMod,
        "multipleMod": parse_multipleMod,
        "successMod": parse_successMod,
        "matchMod": parse_matchMod,
        "matchTotalMod": parse_matchTotalMod,
        "matchThreshold": parse_matchThreshold,
        "comparisonPoint": parse_comparisonPoint,
        "comparison": parse_comparison,
        "mathExpression": parse_mathExpression,
        "mathExpressionPrimary": parse_mathExpressionPrimary,
        "inlineLabelWithSpace": parse_inlineLabelWithSpace,
        "inlineLabel": parse_inlineLabel,
        "operator": parse_operator,
        "number": parse_number,
        "integer": parse_integer,
        "signedInteger": parse_signedInteger,
        "float": parse_float,
        "exponent": parse_exponent,
        "_": parse__,
        "__": parse___
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_rollExpression();
        if (result0 !== null) {
          result1 = [];
          if (input.length > pos) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (input.length > pos) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, re, com) {
            if (!Array.isArray(re)) {
              re = [re];
            }
        
            //If a comment exists append it to the end of the roll expression
            if (com !== "") {
              com = com.join("");
              if (com.trim().length > 0) {
                re.push(new Comment(com));
              }
            }
        
            return re;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_rollExpression() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_rollExpressionPrimary();
        if (result0 !== null) {
          result1 = parse_labelAwareRollOperator();
          if (result1 !== null) {
            result2 = parse_rollExpression();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, oper, right) {
            var result = left;
            result = mergeExpressions(result, oper);
            result = mergeExpressions(result, right);
            return result;
          })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_rollExpressionPrimary();
          if (result0 !== null) {
            result1 = parse_inlineLabelWithSpace();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, rep, lbl) {
              return mergeExpressions(rep, lbl);
            })(pos0, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            pos1 = pos;
            result0 = parse_inlineLabelWithSpace();
            if (result0 !== null) {
              result1 = parse_rollExpression();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
            if (result0 !== null) {
              result0 = (function(offset, lbl, re) {
                return mergeExpressions(lbl, re);
              })(pos0, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              result0 = parse_rollExpressionPrimary();
              if (result0 !== null) {
                result0 = (function(offset, rep) {
                  if (!Array.isArray(rep)) {
                    rep = [rep];
                  }
                  return rep;
                })(pos0, result0);
              }
              if (result0 === null) {
                pos = pos0;
              }
            }
          }
        }
        return result0;
      }
      
      function parse_rollExpressionPrimary() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_fullRoll();
        if (result0 !== null) {
          pos2 = pos;
          reportFailures++;
          result1 = parse_validRollSuffix();
          reportFailures--;
          if (result1 !== null) {
            result1 = "";
            pos = pos2;
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, fr) {
            return fr;
          })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_rollGroup();
          if (result0 !== null) {
            pos2 = pos;
            reportFailures++;
            result1 = parse_validRollSuffix();
            reportFailures--;
            if (result1 !== null) {
              result1 = "";
              pos = pos2;
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, rg) {
              return rg;
            })(pos0, result0[0]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            result0 = parse_number();
            if (result0 !== null) {
              result0 = (function(offset, num) {
                return new MathExpression(num);
              })(pos0, result0);
            }
            if (result0 === null) {
              pos = pos0;
            }
            if (result0 === null) {
              pos0 = pos;
              pos1 = pos;
              if (input.substr(pos, 6) === "floor(") {
                result0 = "floor(";
                pos += 6;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"floor(\"");
                }
              }
              if (result0 !== null) {
                result1 = parse__();
                if (result1 !== null) {
                  result2 = parse_rollExpression();
                  if (result2 !== null) {
                    result3 = parse__();
                    if (result3 !== null) {
                      if (input.charCodeAt(pos) === 41) {
                        result4 = ")";
                        pos++;
                      } else {
                        result4 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result4 !== null) {
                        result0 = [result0, result1, result2, result3, result4];
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
              if (result0 !== null) {
                result0 = (function(offset, rexp) {
              
                  return mergeExpressions("floor(", mergeExpressions(rexp, ")"));
                })(pos0, result0[2]);
              }
              if (result0 === null) {
                pos = pos0;
              }
              if (result0 === null) {
                pos0 = pos;
                pos1 = pos;
                if (input.substr(pos, 5) === "ceil(") {
                  result0 = "ceil(";
                  pos += 5;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"ceil(\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse__();
                  if (result1 !== null) {
                    result2 = parse_rollExpression();
                    if (result2 !== null) {
                      result3 = parse__();
                      if (result3 !== null) {
                        if (input.charCodeAt(pos) === 41) {
                          result4 = ")";
                          pos++;
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result4 !== null) {
                          result0 = [result0, result1, result2, result3, result4];
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
                if (result0 !== null) {
                  result0 = (function(offset, rexp) {
                
                    return mergeExpressions("ceil(", mergeExpressions(rexp, ")"));
                  })(pos0, result0[2]);
                }
                if (result0 === null) {
                  pos = pos0;
                }
                if (result0 === null) {
                  pos0 = pos;
                  pos1 = pos;
                  if (input.substr(pos, 6) === "round(") {
                    result0 = "round(";
                    pos += 6;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"round(\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse__();
                    if (result1 !== null) {
                      result2 = parse_rollExpression();
                      if (result2 !== null) {
                        result3 = parse__();
                        if (result3 !== null) {
                          if (input.charCodeAt(pos) === 41) {
                            result4 = ")";
                            pos++;
                          } else {
                            result4 = null;
                            if (reportFailures === 0) {
                              matchFailed("\")\"");
                            }
                          }
                          if (result4 !== null) {
                            result0 = [result0, result1, result2, result3, result4];
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, rexp) {
                  
                      return mergeExpressions("round(", mergeExpressions(rexp, ")"));
                    })(pos0, result0[2]);
                  }
                  if (result0 === null) {
                    pos = pos0;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    pos1 = pos;
                    if (input.substr(pos, 4) === "abs(") {
                      result0 = "abs(";
                      pos += 4;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"abs(\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse__();
                      if (result1 !== null) {
                        result2 = parse_rollExpression();
                        if (result2 !== null) {
                          result3 = parse__();
                          if (result3 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                              result4 = ")";
                              pos++;
                            } else {
                              result4 = null;
                              if (reportFailures === 0) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result4 !== null) {
                              result0 = [result0, result1, result2, result3, result4];
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, rexp) {
                    
                        return mergeExpressions("abs(", mergeExpressions(rexp, ")"));
                      })(pos0, result0[2]);
                    }
                    if (result0 === null) {
                      pos = pos0;
                    }
                    if (result0 === null) {
                      pos0 = pos;
                      pos1 = pos;
                      if (input.charCodeAt(pos) === 40) {
                        result0 = "(";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (result0 !== null) {
                        result1 = parse__();
                        if (result1 !== null) {
                          result2 = parse_rollExpression();
                          if (result2 !== null) {
                            result3 = parse__();
                            if (result3 !== null) {
                              if (input.charCodeAt(pos) === 41) {
                                result4 = ")";
                                pos++;
                              } else {
                                result4 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\")\"");
                                }
                              }
                              if (result4 !== null) {
                                result0 = [result0, result1, result2, result3, result4];
                              } else {
                                result0 = null;
                                pos = pos1;
                              }
                            } else {
                              result0 = null;
                              pos = pos1;
                            }
                          } else {
                            result0 = null;
                            pos = pos1;
                          }
                        } else {
                          result0 = null;
                          pos = pos1;
                        }
                      } else {
                        result0 = null;
                        pos = pos1;
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, rexp) {
                      
                          return mergeExpressions("(", mergeExpressions(rexp, ")"));
                        })(pos0, result0[2]);
                      }
                      if (result0 === null) {
                        pos = pos0;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_validRollSuffix() {
        var result0;
        var pos0;
        
        result0 = parse___();
        if (result0 === null) {
          result0 = parse_inlineLabelWithSpace();
          if (result0 === null) {
            if (input.charCodeAt(pos) === 125) {
              result0 = "}";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"}\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 44) {
                result0 = ",";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 41) {
                  result0 = ")";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\")\"");
                  }
                }
                if (result0 === null) {
                  pos0 = pos;
                  reportFailures++;
                  result0 = parse_operator();
                  reportFailures--;
                  if (result0 !== null) {
                    result0 = "";
                    pos = pos0;
                  } else {
                    result0 = null;
                  }
                  if (result0 === null) {
                    pos0 = pos;
                    reportFailures++;
                    if (input.length > pos) {
                      result0 = input.charAt(pos);
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("any character");
                      }
                    }
                    reportFailures--;
                    if (result0 === null) {
                      result0 = "";
                    } else {
                      result0 = null;
                      pos = pos0;
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_rollGroup() {
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 123) {
          result0 = "{";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            result2 = parse_rollGroupExpression();
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                if (input.charCodeAt(pos) === 125) {
                  result4 = "}";
                  pos++;
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"}\"");
                  }
                }
                if (result4 !== null) {
                  result5 = parse_groupMods();
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, rolls, mod) {
            return new GroupExpression(rolls, mod);
          })(pos0, result0[2], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_rollGroupExpression() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_rollExpression();
        if (result0 === null) {
          result0 = parse_rollGroup();
        }
        if (result0 !== null) {
          result1 = parse__();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 44) {
              result2 = ",";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = parse__();
              if (result3 !== null) {
                result4 = parse_rollGroupExpression();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, right) {
            if (!Array.isArray(left)) {
              left = [left];
            }
            if (right !== "") {
              return [left].concat(right);
            }
        
            return left;
          })(pos0, result0[0], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          result0 = parse_rollExpression();
          if (result0 === null) {
            result0 = parse_rollGroup();
          }
          if (result0 !== null) {
            result0 = (function(offset, left) { 
              return [left];
            })(pos0, result0);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_labelAwareRollOperator() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_rollOperator();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_rollOperator();
          if (result2 === null) {
            result2 = parse_inlineLabelWithSpace();
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_rollOperator();
            if (result2 === null) {
              result2 = parse_inlineLabelWithSpace();
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, oper, addl) {
            var result = oper;
            for (var i = 0; i < addl.length; i++) {
              result = mergeExpressions(result, addl[i]);
            }
            return result;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_inlineLabelWithSpace();
          if (result0 !== null) {
            result1 = parse_labelAwareRollOperator();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, lbl, oper) {
              return mergeExpressions(lbl, oper);
           })(pos0, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_rollOperator() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_operator();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result3 = parse_mathExpressionPrimary();
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_rollOperator();
                  if (result5 !== null) {
                    result6 = parse__();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, num, right) {
            return left + num + right;
          })(pos0, result0[1], result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse__();
          if (result0 !== null) {
            result1 = parse_operator();
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, oper) {
              return oper;
            })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_fullRoll() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_coreRoll();
        if (result0 !== null) {
          result1 = parse_rollMods();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, roll, mod) {
            if (mod !== "") {
              roll.mods = mod;
            }
        
            return roll;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_numberOfDice();
          if (result0 !== null) {
            if (input.substr(pos, 1).toLowerCase() === "t") {
              result1 = input.substr(pos, 1);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"t\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_inlineLabel();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, count, table) {
              return new TableRollExpression(count, table.text);
            })(pos0, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_coreRoll() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_numberOfDice();
        if (result0 !== null) {
          if (input.substr(pos, 1).toLowerCase() === "d") {
            result1 = input.substr(pos, 1);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"d\"");
            }
          }
          if (result1 !== null) {
            if (input.substr(pos, 1).toLowerCase() === "f") {
              result2 = input.substr(pos, 1);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"f\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, count) {
            return new FateRollExpression(count);
          })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_numberOfDice();
          if (result0 !== null) {
            if (input.substr(pos, 1).toLowerCase() === "d") {
              result1 = input.substr(pos, 1);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"d\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_numberOfSides();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, count, sides) {
              return new RollExpression(count, sides);
            })(pos0, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_numberOfDice() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        result0 = parse_integer();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 40) {
            result0 = "(";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_mathExpression();
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    result4 = ")";
                    pos++;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, expr) {
              return Math.round(eval("(" + expr + ")"));
            })(pos0, result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            result0 = "";
            if (result0 !== null) {
              result0 = (function(offset) { return 1; })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_numberOfSides() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        result0 = parse_integer();
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 40) {
            result0 = "(";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_mathExpression();
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    result4 = ")";
                    pos++;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, expr) {
              return Math.round(eval("(" + expr + ")"));
            })(pos0, result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
          if (result0 === null) {
            pos0 = pos;
            if (input.substr(pos, 1).toLowerCase() === "f") {
              result0 = input.substr(pos, 1);
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"f\"");
              }
            }
            if (result0 !== null) {
              result0 = (function(offset) { return "F"; })(pos0);
            }
            if (result0 === null) {
              pos = pos0;
            }
          }
        }
        return result0;
      }
      
      function parse_groupMods() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_keepMod();
        if (result0 === null) {
          result0 = parse_dropMod();
          if (result0 === null) {
            result0 = parse_multipleMod();
            if (result0 === null) {
              result0 = parse_matchTotalMod();
              if (result0 === null) {
                result0 = parse_matchMod();
                if (result0 === null) {
                  result0 = parse_successMod();
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_groupMods();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_groupMods();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
            return processMods(head, tail);
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_rollMods() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_compoundingMod();
        if (result0 === null) {
          result0 = parse_penetratingMod();
          if (result0 === null) {
            result0 = parse_explodingMod();
            if (result0 === null) {
              result0 = parse_keepMod();
              if (result0 === null) {
                result0 = parse_dropMod();
                if (result0 === null) {
                  result0 = parse_rerollOnceMod();
                  if (result0 === null) {
                    result0 = parse_rerollMod();
                    if (result0 === null) {
                      result0 = parse_customCritMod();
                      if (result0 === null) {
                        result0 = parse_customFumbleMod();
                        if (result0 === null) {
                          result0 = parse_sortMod();
                          if (result0 === null) {
                            result0 = parse_matchTotalMod();
                            if (result0 === null) {
                              result0 = parse_matchMod();
                              if (result0 === null) {
                                result0 = parse_successMod();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_rollMods();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_rollMods();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, head, tail) {
            return processMods(head, tail);
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_explodingMod() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 33) {
          result0 = "!";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_comparisonPoint();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cp) {
            return { 
              exploding: cp
            };
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_compoundingMod() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "!!") {
          result0 = "!!";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!!\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_comparisonPoint();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cp) {
            return { 
              compounding: cp
            };
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_penetratingMod() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 33) {
          result0 = "!";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"!\"");
          }
        }
        if (result0 !== null) {
          if (input.substr(pos, 1).toLowerCase() === "p") {
            result1 = input.substr(pos, 1);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"p\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_comparisonPoint();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cp) {
            return { 
              penetrating: cp
            };
          })(pos0, result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_keepMod() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 1).toLowerCase() === "k") {
          result0 = input.substr(pos, 1);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"k\"");
          }
        }
        if (result0 !== null) {
          if (/^['h'|'l']/i.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("['h'|'l']i");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, hl, count) {
            return { 
              keep: {
                end: (hl.toLowerCase() || 'h'),
                count:count
              }
            };
          })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_dropMod() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 1).toLowerCase() === "d") {
          result0 = input.substr(pos, 1);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"d\"");
          }
        }
        if (result0 !== null) {
          if (/^['h'|'l']/i.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("['h'|'l']i");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, hl, count) {
            return { 
              drop: {
                end: (hl.toLowerCase() || 'l'),
                count:count
              }
            };
          })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_customCritMod() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2).toLowerCase() === "cs") {
          result0 = input.substr(pos, 2);
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"cs\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_comparisonPoint();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_customCritMod();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cp, tail) {
            var result = {
              customCrit: (cp !== "" ? [cp] : [{}])
            };
        
            if (tail !== "") {
              result.customCrit = result.customCrit.concat(tail.customCrit);
            }
        
            return result;
          })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_customFumbleMod() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2).toLowerCase() === "cf") {
          result0 = input.substr(pos, 2);
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"cf\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_comparisonPoint();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_customFumbleMod();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cp, tail) {
            var result = {
              customFumble: (cp !== "" ? [cp] : [{}])
            };
        
            if (tail !== "") {
              result.customFumble = result.customFumble.concat(tail.customFumble);
            }
        
            return result;
          })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_rerollMod() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 1).toLowerCase() === "r") {
          result0 = input.substr(pos, 1);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"r\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_comparisonPoint();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_rerollMod();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cp, tail) {
            var result = {
              reroll: (cp !== "" ? [cp] : [{}])
            };
        
            if (tail !== "") {
                result.reroll = result.reroll.concat(tail.reroll);
            }
        
            return result;
          })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_rerollOnceMod() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2).toLowerCase() === "ro") {
          result0 = input.substr(pos, 2);
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"ro\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_comparisonPoint();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_rerollMod();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cp, tail) {
            var result = {
              reroll: (cp !== "" ? [cp] : [{}])
            };
        
            if (tail !== "") {
                result.reroll = result.reroll.concat(tail.reroll);
            }
        
            if(result.reroll && result.reroll[0]) result.reroll[0].maxrerolls = 1;
        
            return result;
          })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_sortMod() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 1).toLowerCase() === "s") {
          result0 = input.substr(pos, 1);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"s\"");
          }
        }
        if (result0 !== null) {
          if (/^['a'|'d']/i.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("['a'|'d']i");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, order) {
            return { 
              sort: {
                order: (order.toLowerCase() || 'a')
              }
            };
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_floorMod() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.substr(pos, 3) === "flr") {
          result0 = "flr";
          pos += 3;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"flr\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) {
            return {
              round: {
                type: "floor"
              }
            };
          })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_multipleMod() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 1).toLowerCase() === "x") {
          result0 = input.substr(pos, 1);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"x\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_integer();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, times) {
            return { 
              multiple: {
                times: times
              }
            };
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_successMod() {
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_comparisonPoint();
        if (result0 !== null) {
          pos2 = pos;
          if (input.substr(pos, 1).toLowerCase() === "f") {
            result1 = input.substr(pos, 1);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"f\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_comparisonPoint();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = pos2;
            }
          } else {
            result1 = null;
            pos = pos2;
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, cp, failure) {
            var result = { 
              success: cp
            };
        
            if (failure !== "") {
              result["failure"] = failure[1];
            }
        
            return result;
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_matchMod() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 109) {
          result0 = "m";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"m\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_matchThreshold();
          if (result1 !== null) {
            result2 = parse_comparisonPoint();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, mt, cp) {
            var result = {
              match: (cp !== "" ? cp : {})
            };
            result.match["threshold"] = mt;
        
            return result;
          })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_matchTotalMod() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.substr(pos, 2) === "mt") {
          result0 = "mt";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"mt\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_matchThreshold();
          if (result1 !== null) {
            result2 = parse_comparisonPoint();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, mt, cp) {
            var result = {
              match: (cp !== "" ? cp : {})
            };
            result.match["threshold"] = mt;
            result.match["total"] = true;
        
            return result;
          })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_matchThreshold() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[0-9]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, num) { 
            var result = num && num != [] && parseInt(num.join(""), 10) > 2 ? parseInt(num.join(""), 10) : 2;
            return result
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_comparisonPoint() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_comparison();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_integer();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, comp, point) {
            return {
              comp:(comp == "" ? "=" : comp) + "=", 
              point:point
            };
          })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_comparison() {
        var result0;
        
        if (/^[>|<|=]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[>|<|=]");
          }
        }
        return result0;
      }
      
      function parse_mathExpression() {
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_mathExpressionPrimary();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result3 = parse_operator();
              if (result3 !== null) {
                result4 = parse__();
                if (result4 !== null) {
                  result5 = parse_mathExpression();
                  if (result5 !== null) {
                    result6 = parse__();
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = pos1;
                    }
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, left, oper, right) {
            return left + oper + right;
          })(pos0, result0[1], result0[3], result0[5]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse__();
          if (result0 !== null) {
            result1 = parse_mathExpressionPrimary();
            if (result1 !== null) {
              result2 = parse__();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, expr) {
              return expr;
            })(pos0, result0[1]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_mathExpressionPrimary() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_number();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, num) {
            return num;
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          if (input.charCodeAt(pos) === 40) {
            result0 = "(";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"(\"");
            }
          }
          if (result0 !== null) {
            result1 = parse__();
            if (result1 !== null) {
              result2 = parse_mathExpression();
              if (result2 !== null) {
                result3 = parse__();
                if (result3 !== null) {
                  if (input.charCodeAt(pos) === 41) {
                    result4 = ")";
                    pos++;
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = pos1;
                  }
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, expr) {
              return "(" + expr + ")";
            })(pos0, result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse_inlineLabelWithSpace() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse__();
        if (result0 !== null) {
          result1 = parse_inlineLabel();
          if (result1 !== null) {
            result2 = parse__();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, lbl) { 
            return lbl;
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_inlineLabel() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 91) {
          result0 = "[";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^\]]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\\]]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^\]]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\\]]");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 93) {
              result2 = "]";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, text) {
            return new Label(text.join(""));
          })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_operator() {
        var result0;
        
        if (/^[+|\-|*|\/|%]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+|\\-|*|\\/|%]");
          }
        }
        return result0;
      }
      
      function parse_number() {
        var result0;
        
        result0 = parse_exponent();
        if (result0 === null) {
          result0 = parse_float();
          if (result0 === null) {
            result0 = parse_signedInteger();
          }
        }
        return result0;
      }
      
      function parse_integer() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[0-9]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[0-9]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, digits) { 
            return parseInt(digits.join(""), 10);
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_signedInteger() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (/^[+|\-]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+|\\-]");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_integer();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, sign, int) {
           return sign == "-" ? -1 * int : int;
         })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_float() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_signedInteger();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            if (/^[0-9]/.test(input.charAt(pos))) {
              result3 = input.charAt(pos);
              pos++;
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9]");
              }
            }
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                if (/^[0-9]/.test(input.charAt(pos))) {
                  result3 = input.charAt(pos);
                  pos++;
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, int, dec) {
            //Check for -0 for stuff like -0.5 starting an expression.
            if(int === 0 && (1/int < 0)) return (-1.0 * parseFloat(int + "." + dec.join("")));
            else return parseFloat(int + "." + dec.join(""));
          })(pos0, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_exponent() {
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_signedInteger();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos) === 46) {
            result1 = ".";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_integer();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 101) {
                result3 = "e";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"e\"");
                }
              }
              if (result3 !== null) {
                result4 = parse_signedInteger();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = pos1;
                }
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, int, dec, exp) { 
            return parseFloat(int + "." + dec + "e" + exp);
          })(pos0, result0[0], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        if (result0 === null) {
          pos0 = pos;
          pos1 = pos;
          result0 = parse_signedInteger();
          if (result0 !== null) {
            if (input.charCodeAt(pos) === 101) {
              result1 = "e";
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"e\"");
              }
            }
            if (result1 !== null) {
              result2 = parse_signedInteger();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
          if (result0 !== null) {
            result0 = (function(offset, int, exp) { 
              return parseFloat(int + "e" + exp);
            })(pos0, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = pos0;
          }
        }
        return result0;
      }
      
      function parse__() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        if (/^[ |\t]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ |\\t]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[ |\t]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[ |\\t]");
            }
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, space) {
            return space.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse___() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[ |\t]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ |\\t]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ |\t]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ |\\t]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, space) {
            return space.join("");
          })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
        //Setup TYPE_* variables in the d20 namespace so that at runtime the same constants
        // are used by all scripts
        var d20 = (typeof window !== 'undefined' && window.d20 !== undefined) ? window.d20 : {};
        if (d20.dice == undefined) {
          d20.dice = d20.dice || {};
          d20.dice.TYPE_MATH_EXPR = "M";
          d20.dice.TYPE_ROLL_EXPR = "R";
          d20.dice.TYPE_GROUP_EXPR = "G";
          d20.dice.TYPE_LABEL = "L";
          d20.dice.TYPE_COMMENT = "C";
          d20.dice.TYPE_VALIDATED_ROLLS = "V";
        }
        
        function log(d) {
           console.log(d);
        }
        
        /**
         * Creates a new math expression
         * 
         * @param expr Base expression, defaults to ""
         */
        function MathExpression(expr) {
           this.type = d20.dice.TYPE_MATH_EXPR;
           this.expr = (expr != undefined ? expr : "");
        };
        
        /**
         * Creates a new roll expression
         * 
         * @param dice Number of dice to roll
         * @param sides Number of sides on the dice
         */
        function RollExpression(dice, sides) {
          this.type = d20.dice.TYPE_ROLL_EXPR;
          this.dice = dice;
          this.sides = sides;
          this.mods = {};
        };
      
        /**
         * Creates a new fate roll expression
         */
        function FateRollExpression(dice, table) {
          this.type = d20.dice.TYPE_ROLL_EXPR;
          this.dice = dice;
          this.fate = true;
          this.mods = {};
        };
      
        /**
         * Creates a new table roll expression
         */
        function TableRollExpression(dice, table) {
          this.type = d20.dice.TYPE_ROLL_EXPR;
          this.dice = dice;
          this.table = table;
          this.mods = {};
        };
      
        /**
         * Creates a new group expression
         * 
         * @param rolls The array of rolls that are members of the group
         */
        function GroupExpression(rolls, mods) {
          this.type = d20.dice.TYPE_GROUP_EXPR;
          this.rolls = rolls;
          this.mods = (mods || {});
        }
      
        /**
         * Creates a new label
         * 
         * @param text content of the label
         */
        function Label(text) {
          this.type = d20.dice.TYPE_LABEL;
          this.text = text;
        }
      
        /**
         * Creates a new comment
         * 
         * @param text content of the comment
         */
        function Comment(text) {
          this.type = d20.dice.TYPE_COMMENT;
          this.text = text;
        }
        
        /**
         * Merge two expressions or arrays of expressions. For both arguments strings,
         * single expressions, and arrays of expressions are all valid.
         * 
         * String arguments are converted into MathExpressions
         * Adjacent MathExpressions are merged into a single MathExpression
         * 
         * @returns array of expressions
         */
        function mergeExpressions(left, right) {
           //If left is a string convert to MathExpression
           if (typeof left == "string") {
              if (left.length == 0) {
                return right;
              }
              left = new MathExpression(left);
           }
           //If right is a string convert to MathExpression
           if (typeof right == "string") {
              if (right.length == 0) {
                return left;
              }
              right = new MathExpression(right);
           }
      
           //If both left and right are arrays merge into a single array
           if (Array.isArray(left) && Array.isArray(right)) {
             //If end of left and start of right are both math expressions
             if (left[left.length-1].type == d20.dice.TYPE_MATH_EXPR && right[0].type == d20.dice.TYPE_MATH_EXPR) {
               //Remove the end of the left
               var leftMath = left.pop();
               //Merge the end of the left to the start of the right
               right[0].expr = leftMath.expr + right[0].expr;
             }
             
             //Merge the two arrays
             return left.concat(right);
           }
           //Left is an array, right is an object
           else if (Array.isArray(left)) {
             //End of the left and right are math expressions, append right onto the end of left
             if (left[left.length-1].type == d20.dice.TYPE_MATH_EXPR && right.type == d20.dice.TYPE_MATH_EXPR) {
               left[left.length-1].expr += right.expr;
             }
             //End of the left is not a math expression, append right to the left array
             else {
               left.push(right);
             }
             
             return left;
           }
           //Right is an array, left is an object
           else if (Array.isArray(right)) {
             //Start of the right and left are math expressions, prepend left onto the start of right
             if (right[0].type == d20.dice.TYPE_MATH_EXPR && left.type == d20.dice.TYPE_MATH_EXPR) {
               right[0].expr = left.expr + right[0].expr;
             }
             //Start of the right is not a math expression, prepend left to the right array
             else {
               right.unshift(left);
             }
             
             return right;
           }
           //If both left and right are single math expressions append right to left
           //and return left
           else if (left.type == d20.dice.TYPE_MATH_EXPR && right.type == d20.dice.TYPE_MATH_EXPR) {
             left.expr += right.expr;
             return left;
           }
           
           //Left and Right are not arrays
           return [left, right];
        }
        
        /**
         * Process roll/group mods into a single object
         * @returns The complete object
         */
        function processMods(head, tail) {
          var result = head;
          if (tail.length > 0) {
            for (var attrname in tail[0]) {
              if (result[attrname] != undefined) {
                throw {message:"'" + attrname + "' roll modifier can only be specified once"};
              }
              result[attrname] = tail[0][attrname];
            }
          }
          return result;
        };
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();

d20.dice_formatter = {};
d20ext["dice_formatter"] = d20.dice_formatter;

(function() {

	var showCritAnimation = function() {

		return;

		if(d20.textchat.chatstartingup) return;

		$("#critanimation").addClass("critted");
		$("#maincanvas").addClass("critted");
		setTimeout(function() {
			$("#critanimation").removeClass("critted");
			$("#maincanvas").removeClass("critted");
		}, 2000);
	}
	
	var formatRolls = function(rolls) {

		var formula = "";

		for(var i=0; i < rolls.length; i++) {

			if(rolls[i].type === d20.dice.TYPE_GROUP_EXPR) {
				formula += "{<div class='parsegroup'>"
				for(var gi=0; gi < rolls[i].rolls.length; gi++) {
					formula += "<div class='parsegroupitem ";
					if(rolls[i].results && rolls[i].results[gi].d) {
						formula += "dropped";
					}
					formula += "'>";
					formula += formatRolls(rolls[i].rolls[gi]);
					if(gi + 1 < rolls[i].rolls.length) {
						formula += " + "
					}
					formula += "</div>";
				}
				formula += "</div>}";
			}

			if(rolls[i].type === d20.dice.TYPE_ROLL_EXPR) {
				formula += "<div class='dicegrouping' data-groupindex='"+i+"' "

				//Is the next one a label? if so add a title
				if(rolls[i+1] && rolls[i+1].type == d20.dice.TYPE_LABEL) {
					formula += "title='"+rolls[i+1].text.replace(/'/g, "&apos;")+"'"
				}

				formula += ">";
				formula += "(";
				for (var r = 0; r < rolls[i].results.length; r++) {
					formula += "<div data-origindex='"+r+"' class='diceroll "

					if(rolls[i].results.length > 50) {
						formula += "withouticons ";
					}

					if(rolls[i].fate) {
						formula += "d6";
					}
					else if(!rolls[i].table) {
						formula += "d" + rolls[i].sides;
					}

					if(rolls[i].results[r].d === true) {
						formula += " dropped ";
					}

					var didCrit = false;
					var didFumble = false;
					var didMatch = false;

					if(rolls[i].mods && rolls[i].mods.customCrit) {
						//Check each to see if we critted.
						_.each(rolls[i].mods.customCrit, function(csdef) {
							if(csdef.comp === "<=") {
								if(rolls[i].results[r].v <= csdef.point) didCrit = true;
							}
							else if(csdef.comp === ">=") {
								if(rolls[i].results[r].v >= csdef.point) didCrit = true;
							}
							else if(csdef.comp === "==") {
								if(rolls[i].results[r].v === csdef.point) didCrit = true;
							}
						});
					}
					else if(rolls[i].results[r].v === rolls[i].sides) {
						didCrit = true;
					}

					if(didCrit) {
						formula += " critsuccess ";
						showCritAnimation();
					}

					if(rolls[i].mods && rolls[i].mods.customFumble) {
						//Check each to see if we critted.
						_.each(rolls[i].mods.customFumble, function(csdef) {
							if(csdef.comp === "<=") {
								if(rolls[i].results[r].v <= csdef.point) didFumble = true;
							}
							else if(csdef.comp === ">=") {
								if(rolls[i].results[r].v >= csdef.point) didFumble = true;
							}
							else if(csdef.comp === "==") {
								if(rolls[i].results[r].v === csdef.point) didFumble = true;
							}
						});
					}
					else if(rolls[i].results[r].v === 1 && rolls[i].fate !== true) {
						didFumble = true;
					}

					if(didFumble) {
						formula += " critfail ";
					}

					if(rolls[i].mods && rolls[i].mods.match && rolls[i].mods.match.matches[rolls[i].results[r].v]) {
						didMatch = true;
					}

					if(didMatch) {
						formula += " match-" + rolls[i].mods.match.matches[rolls[i].results[r].v] + "";
					}

					formula += "'>";

					if(didMatch) {
						formula += "<div class='matchbar' style='border-color:" + rolls[i].mods.match.matches[rolls[i].results[r].v] + "'></div>";
					}

					formula += "<div class='dicon'><div class='didroll'>"; 
					if (rolls[i].fate === true) {
						switch(rolls[i].results[r].v) {
							case 1: 
								formula += "+";
								break;
							case 0: 
								formula += "0";
								break;
							case -1:
								formula += "-";
								break;
						}
					}
					else if(rolls[i].results[r].tableItem) {
						if(rolls[i].results[r].tableItem.avatar && rolls[i].results[r].tableItem.avatar !== "") {
							const avatar = rolls[i].results[r].tableItem.avatar.replace("/med.webm", "/thumb.webm");
							const title = d20ext.utils.strip_tags(rolls[i].results[r].tableItem.name).replace(/'/g, "&apos;");
							
							formula += d20.utils.isVideo(avatar) ?
								`<video src="${avatar}" title="${title}" muted autoplay loop />` :
								`<img src="${avatar}" title="${title}" />`;
						}
						else {
							formula += d20ext.utils.strip_tags(rolls[i].results[r].tableItem.name);
						}
					}
					else {
						formula += rolls[i].results[r].v;
					}

					formula += "</div><div class='backing'></div></div>";

					if (rolls[i].fate !== true && r + 1 < rolls[i].results.length) {
						formula += "+";
					}

					formula += "</div>";
				}
				formula += ")";
				formula += "</div>";
			}

			else if(rolls[i].type === d20.dice.TYPE_MATH_EXPR) {
				formula += rolls[i].expr;
			}

		}

		return formula;
	};

	var textOnlyFormatRolls = function(rolls) {

		var formula = "";

		for(var i=0; i < rolls.length; i++) {

			if(rolls[i].type === d20.dice.TYPE_GROUP_EXPR) {
				formula += "{"
				for(var gi=0; gi < rolls[i].rolls.length; gi++) {
					formula += textOnlyFormatRolls(rolls[i].rolls[gi]);
					if(gi + 1 < rolls[i].rolls.length) {
						formula += "+"
					}
				}
				formula += "}";
			}

			if(rolls[i].type === d20.dice.TYPE_ROLL_EXPR) {
				var rl = rolls[i].results !== undefined ? rolls[i].results.length : 0;
				formula += "(";
				for (var r = 0; r < rl; r++) {
					if (rolls[i].fate === true) {
						switch(rolls[i].results[r].v) {
							case 1: 
								formula += "+";
								break;
							case 0: 
								formula += "0";
								break;
							case -1:
								formula += "-";
								break;
						}
					}
					else if(rolls[i].results[r].tableItem) {
						formula += d20ext.utils.strip_tags(rolls[i].results[r].tableItem.name);
					}
					else {
						formula += rolls[i].results[r].v;
					}

					if (rolls[i].fate !== true && r + 1 < rolls[i].results.length) {
						formula += "+";
					}
				}
				formula += ")";
			}

			else if(rolls[i].type === d20.dice.TYPE_MATH_EXPR) {
				formula += rolls[i].expr;
			}

		}

		return formula;

	};

	var basicHTMLFormatRolls = function(rolls) {

		if(!rolls) return;

		var formula = "";

		for(var i=0; i < rolls.length; i++) {
			if(rolls[i].type === d20.dice.TYPE_GROUP_EXPR) {
				formula += "{"
				for(var gi=0; gi < rolls[i].rolls.length; gi++) {
					formula += basicHTMLFormatRolls(rolls[i].rolls[gi]);
					if(gi + 1 < rolls[i].rolls.length) {
						formula += "+"
					}
				}
				formula += "}";
			}

			if(rolls[i].type === d20.dice.TYPE_ROLL_EXPR) {
				var rl = rolls[i].results !== undefined ? rolls[i].results.length : 0;
				var matches = rolls[i].mods && rolls[i].mods.match && rolls[i].mods.match.matches ? rolls[i].mods.match.matches : [];
				formula += "(";
				for (var r = 0; r < rl; r++) {

					formula += "<span class='basicdiceroll";

					if(rolls[i].results[r].d) {
						formula += " dropped";
					}
					else {
						var didCrit = false;
						var didFumble = false;
						if(rolls[i].mods && rolls[i].mods.customCrit) {
							//Check each to see if we critted.
							_.each(rolls[i].mods.customCrit, function(csdef) {
								if(csdef.comp === "<=") {
									if(rolls[i].results[r].v <= csdef.point) didCrit = true;
								}
								else if(csdef.comp === ">=") {
									if(rolls[i].results[r].v >= csdef.point) didCrit = true;
								}
								else if(csdef.comp === "==") {
									if(rolls[i].results[r].v === csdef.point) didCrit = true;
								}
							});
						}
						else if(rolls[i].results[r].v === rolls[i].sides) {
							didCrit = true;
						}

						if(didCrit) {
							formula += " critsuccess ";
						}

						if(rolls[i].mods && rolls[i].mods.customFumble) {
							//Check each to see if we critted.
							_.each(rolls[i].mods.customFumble, function(csdef) {
								if(csdef.comp === "<=") {
									if(rolls[i].results[r].v <= csdef.point) didFumble = true;
								}
								else if(csdef.comp === ">=") {
									if(rolls[i].results[r].v >= csdef.point) didFumble = true;
								}
								else if(csdef.comp === "==") {
									if(rolls[i].results[r].v === csdef.point) didFumble = true;
								}
							});
						}
						else if(rolls[i].results[r].v === 1 && rolls[i].fate !== true) {
							didFumble = true;
						}

						if(didFumble) {
							formula += " critfail ";
						}
					}

					if(matches != [] && matches[rolls[i].results[r].v]) {
						formula += "' style='color: " + matches[rolls[i].results[r].v] + "'";
					}

					formula += "'>";

					if (rolls[i].fate === true) {
						switch(rolls[i].results[r].v) {
							case 1: 
								formula += "+";
								break;
							case 0: 
								formula += "0";
								break;
							case -1:
								formula += "-";
								break;
						}
					}
					else if(rolls[i].results[r].tableItem) {
						formula += d20ext.utils.strip_tags(rolls[i].results[r].tableItem.name);
					}
					else {
						formula += rolls[i].results[r].v;
					}

					formula += "</span>";

					if (rolls[i].fate !== true && r + 1 < rolls[i].results.length) {
						formula += "+";
					}
				}
				formula += ")";
			}

			else if(rolls[i].type === d20.dice.TYPE_MATH_EXPR) {
				formula += rolls[i].expr;
			}

		}

		return formula;

	};

	d20.dice_formatter.checkForCrits = function(rolls, crittype) {

		if(!rolls) return false;

		var didCrit = false;
		var didFumble = false;

		for(var i=0; i < rolls.length; i++) {

			if(rolls[i].type === d20.dice.TYPE_GROUP_EXPR) {
				for(var gi=0; gi < rolls[i].rolls.length; gi++) {
					if(d20.dice_formatter.checkForCrits(rolls[i].rolls[gi], crittype) === true) {
						if(crittype === "crit") 
							didCrit = true;
						else 
							didFumble = true;
					}
				}
			}

			if(rolls[i].type === d20.dice.TYPE_ROLL_EXPR) {
				var rl = rolls[i].results !== undefined ? rolls[i].results.length : 0;
				for (var r = 0; r < rl; r++) {
					// Skip dropped dice so they can't trigger WasCrit or WasFumble
					if(rolls[i].results[r].d === true) continue;

					if(rolls[i].mods && rolls[i].mods.customCrit) {
						//Check each to see if we critted.
						_.each(rolls[i].mods.customCrit, function(csdef) {
							if(csdef.comp === "<=") {
								if(rolls[i].results[r].v <= csdef.point) didCrit = true;
							}
							else if(csdef.comp === ">=") {
								if(rolls[i].results[r].v >= csdef.point) didCrit = true;
							}
							else if(csdef.comp === "==") {
								if(rolls[i].results[r].v === csdef.point) didCrit = true;
							}
						});
					}
					else if(rolls[i].results[r].v === rolls[i].sides) {
						didCrit = true;
					}

					if(rolls[i].mods && rolls[i].mods.customFumble) {
						//Check each to see if we critted.
						_.each(rolls[i].mods.customFumble, function(csdef) {
							if(csdef.comp === "<=") {
								if(rolls[i].results[r].v <= csdef.point) didFumble = true;
							}
							else if(csdef.comp === ">=") {
								if(rolls[i].results[r].v >= csdef.point) didFumble = true;
							}
							else if(csdef.comp === "==") {
								if(rolls[i].results[r].v === csdef.point) didFumble = true;
							}
						});
					}
					else if(rolls[i].results[r].v === 1 && rolls[i].fate !== true) {
						didFumble = true;
					}
				}
			}
		}

		return (crittype === "crit" ? didCrit : didFumble);
	}

	d20.dice_formatter.getHtmlForResult = function(resultObj) {
		var formula = formatRolls(resultObj.rolls);
		var total = resultObj.total;

		if(resultObj.resultType === d20.dice.ROLL_TYPE_SUCCESS) {
			total = total === 1 ? total + " Success" : total + " Successes";
		}
		else if(resultObj.resultType === d20.dice.ROLL_TYPE_MATCH) {
			total = total === 1 ? total + " Match" : total + " Matches";
		}

		return {
			formula: formula,
			total: total
		}
	};

	d20.dice_formatter.replaceInlineRolls = function(textcontent, op, allowedTags) {
		// textcontent = d20.utils.strip_tags(textcontent.replace("<","&lt;"), allowedTags);
		textcontent = d20.utils.strip_tags(textcontent, allowedTags);
		if(!op.inlinerolls) return textcontent;
		textcontent = textcontent.replace(/\$\[\[[0-9]+(\.computed)?\]\]/g, function(inlinematch) {
			const strippedMatch = inlinematch.replace(/[\$\[\[\]\]]/g, '');
			// Check whether we're looking for the computed value
			const computed = strippedMatch.substr(-9) === '.computed' ? true : false;
			var inlinerollindex = strippedMatch.split('.')[0];
			var inlineroll = op.inlinerolls[parseInt(inlinerollindex, 10)];
			if(!inlineroll || !inlineroll.results) {
				return "INVALID INLINE ROLL!";
			}

			inlineroll.expression = inlineroll.expression.replace("<","&lt;");
			var mytitle = "Rolling " + d20.utils.strip_tags(inlineroll.expression, allowedTags) + " = ";

			if(inlineroll.signature && d20.textchat.verifyRoll(inlineroll.rollid, inlineroll.results, inlineroll.signature)) {
				mytitle = "<img src='/images/quantumrollwhite.png' class='inlineqroll'> " + mytitle;
			}

			mytitle += basicHTMLFormatRolls(inlineroll.results.rolls);

			// Use the computed result if requested
			// Note that if a computed value isn't present, the total will be used
			var mytotal = computed && inlineroll.computed !== undefined ? inlineroll.computed :inlineroll.results.total;
			try {
				if(mytotal == 0 && inlineroll.results.rolls[0].results[0].tableItem) mytotal = d20ext.utils.strip_tags(inlineroll.results.rolls[0].results[0].tableItem.name);
			}
			catch(e) {
				//discard
			}

			var myhtml = "<span class='inlinerollresult showtip tipsy-n-right";
			var hascrit = mytitle.indexOf("critsuccess") !== -1;
			var hasfail = mytitle.indexOf("critfail") !== -1;

			if(hascrit && hasfail) {
				myhtml += " importantroll";
			}
			else if(hascrit) {
				myhtml += " fullcrit";
			}
			else if(hasfail) {
				myhtml += " fullfail";
			}

			myhtml += "' title='"+mytitle.replace(/'/g, "&quot;")+"'>" + mytotal + "</span>";

			return myhtml;

		});

		return textcontent;
	};

	/**
	* Associate format markers with CSS classes
	*/
	var rollFormats = {
		"@": "critsuccess",
		"#": "critfail",
		"_": "dropped"
	};

	/**
	* Determines all nessted formatting rules 
	*/
	var getAllFormats = function(roll, formats) {
		for (var formatType in rollFormats) {
			var pattern = new RegExp("\\{" + formatType + "(.+?)" + formatType + "\\}", "g");
			var match;
			if ((match = pattern.exec(roll)) != null) {
				formats.push( rollFormats[formatType] );
				return getAllFormats(match[1], formats);
			}
		}

		return roll;
	}

	/**
	* Formats a dice roll string into HTML
	*/
	d20.dice_formatter.oldformat = function(rollResult) {
		if(rollResult === undefined) {
			return "";
		}
		return rollResult.replace(/\{([@#_])(.+?)\1\}/g, function(roll, formatType, value) {
			var formats = [ rollFormats[formatType] ];
			var value = getAllFormats(value, formats);

			return "<span class='" + formats.sort().join(" ") + "'>" + value + "</span>";
		});
	}
	
})();

d20.dice_engine = function(seed) {
	d20.dice = d20.dice || {};
	d20.dice.TYPE_MATH_EXPR = "M";
	d20.dice.TYPE_ROLL_EXPR = "R";
	d20.dice.TYPE_GROUP_EXPR = "G";
	d20.dice.TYPE_LABEL = "L";
	d20.dice.TYPE_COMMENT = "C";
	d20.dice.TYPE_VALIDATED_ROLLS = "V";
	d20.dice.ROLL_TYPE_MATCH = "match";
	d20.dice.ROLL_TYPE_SUCCESS = "success";
	d20.dice.ROLL_TYPE_TABLE = "table";
	d20.dice.ROLL_TYPE_SUM = "sum";
	d20.dice.MATCH_COLORS = ["#ee0086","#ff9c00","#688de8","#a6f900","#a909e1","#ff6a00","#07afde","#eefe00"];

	if (d20.getTableElementCount == undefined) {
		d20.getTableElementCount = function(name) {
			log("Using fallback getTableElementCount(" + name + ")");
			return name.length;
		};
		d20.getTableElementValue = function(name, index) {
			log("Using fallback getTableElementValue(" + name + ", " + index + ")");
			return parseInt(name, 10) || 0;
		};
	}

	var MAX_NUM_ROLLS = 999;
	var MAX_ROLL = 9999999;
	var recentRolls = [];

	if (seed == undefined) {
		Math.seedrandom(window.RANDOM_ENTROPY, true);
	}
	else {
		Math.seedrandom(seed);
	}

	this.random = Math.randomInt;

	var othis = this;

	/**
	 * Utility class that triggers the execution of a callback after
	 * a specified number of tasks have signalled completion by calling
	 * taskComplete();
	 *
	 * @param taskCount Number of tasks that must complete before completionCallback is executed
	 * @param completionCallback The callback to execute once taskCount tasks have been completed
	 */
	function TaskCompletionCallback(taskCount, completionCallback, name) {
		var calls = 0;
		var called = false;

		this.taskComplete = function() {
			if (calls == taskCount) {
				throw "All " + calls + " tasks have already been completed for: " + name;
			}
			calls++;
			//log(name + ": " + calls);
			if (calls == taskCount) {
				called = true;
				completionCallback();
			}
		};

		this.verify = function() {
			if (calls == taskCount && !called) {
				completionCallback();
			}
		};
	};

	/**
	 * The result of rolling a die
	 */
	function RollResult(i) {
		this.i = i;
		this.v = 0;
	}

	/**
	 * The result of rolling a group
	 */
	function GroupResult(v) {
		this.v = v;
	}

	/**
	 * The result of a parsed roll expression that has also been validated
	 */
	function ValidatedRollExpression(rolls, resultType) {
		this.type = d20.dice.TYPE_VALIDATED_ROLLS;
		this.rolls = rolls;
		this.resultType = resultType;
	};

	/**
	 * Builds an eval'able expression from the roll results. Handles groups of expressions and
	 * groups with no entries as well as success/failure comparisons.
	 */
	function ExpressionBuilder() {
		var expression = "";
		var groupMemeberCount = undefined;
		var prevResults;

		var verifyInGroup = function() {
			if (groupMemeberCount == undefined) {
				throw "Not currently in a group expression: '" + expression + "'";
			}
		};

		this.addMathExpr = function(expr) {
			expression += expr;
		};

		this.startGroup = function() {
			expression += "(";
			groupMemeberCount = 0;
			prevResults = []; // FOR MATCH TOTAL ROLLS ONLY
		};

		this.addGroupValue = function(value) {
			verifyInGroup();
			if (groupMemeberCount > 0) {
				expression += "+";
			}
			expression += value;
			groupMemeberCount++;
		};

		this.addGroupSuccess = function(value, cp) {
			this.addGroupValue("(" + value + cp.comp + cp.point + "?1:0)");
		};

		this.addGroupFailure = function(value, cp) {
			this.addGroupValue("(" + value + cp.comp + cp.point + "?-1:0)");
		};

		this.addGroupMatch = function(value, cp) {
			var comp = cp.comp ? cp.comp : ">=";
			var point = cp.point ? cp.point : "0";
			prevResults.push(value);
			var match_obj = {};
			for (var i = 0; i < prevResults.length; i++) {
				var num = prevResults[i];
				match_obj[num] = match_obj[num] ? match_obj[num] + 1 : 1;
			}
			var matches = match_obj[value];
			if(matches === cp.threshold) {
				this.addGroupValue("(" + value + comp + point + "?1:0)");
			}
		};

		this.endGroup = function() {
			verifyInGroup();
			if (groupMemeberCount == 0) {
				expression += "0";
			}
			expression += ")";
			groupMemeberCount = undefined;
			prevResults = [];
		};

		this.eval = function() {
			log(expression);
			var result;
			var thisexp = expression;
			(function() {

				"use strict";

				var floor = Math.floor;
				var ceil = Math.ceil;
				var round = Math.round;
				var max = Math.max;
				var min = Math.min;
				var abs = Math.abs;

				try {
					result = eval(thisexp);
				}
				catch (e) {
					result = 0;
				}
			})();
			return result;
		};
	};

	/**
	 * log a message, might be disabled, see logerr for parameter details.
	 */
	var log = function(m) {
		return; // comment out this line to disable logging
		logerr(m);
	};

	/**
	 * Log a message, will never be disabled
	 *
	 * @param m
	 *          the message to log, if m is a function it will be evaluated before
	 *          logging
	 */
	var logerr = function(m) {
		if (_.isFunction(m)) {
			m = m();
		}
	};

	var fallbackErrorHandler = function(e) {
		logerr(e);
		throw e;
	};

	/**
	 * Formats a diceRoll object back into a roll expression
	 */
	var diceRollToString = function(roll) {
		var rollStr = roll.dice + "d" + roll.sides;

		if (roll.mods.compounding) {
			rollStr += "!!" + comparePointToString(roll.mods.compounding);
		}
		if (roll.mods.penetrating) {
			rollStr += "!p" + comparePointToString(roll.mods.penetrating);
		}
		if (roll.mods.exploding) {
			rollStr += "!" + comparePointToString(roll.mods.exploding);
		}
		if (roll.mods.keep) {
			rollStr += "k";
			if (roll.mods.keep.end != "h") {
				rollStr += roll.mods.keep.end;
			}
			rollStr += roll.mods.keep.count;
		}
		if (roll.mods.drop) {
			rollStr += "k";
			if (roll.mods.drop.end != "l") {
				rollStr += roll.mods.drop.end;
			}
			rollStr += roll.mods.drop.count;
		}
		if (roll.mods.reroll) {
			roll.mods.reroll.forEach(function(cp) {
				rollStr += "r" + comparePointToString(cp);
			});
		}
		if (roll.mods.sort) {
			rollStr += "s" + roll.mods.sort.order;
		}
		if (roll.mods.success) {
			rollStr += comparePointToString(roll.mods.success, true);
		}
		if (roll.mods.failure) {
			rollStr += "f" + comparePointToString(roll.mods.failure, true);
		}

		return rollStr;
	};
	var comparePointToString = function(cp, explicitEquals) {
		var cpStr = "";
		if (cp.point) {
			if (cp.comp != "==" || explicitEquals) {
				cpStr += cp.comp.charAt(0);
			}
			cpStr += cp.point;
		}
		return cpStr;
	};

	/**
	 * Validates that all of the rolls in the expression have sane combinations and limits in place
	 *
	 * @return The number of actual rolls in the array of expression objects
	 */
	var validateParseResult = function(rolls) {
		var resultType = undefined;

		// Per level track success/sum state
		for (var i = 0; i < rolls.length; i++) {
			if (rolls[i].type == d20.dice.TYPE_ROLL_EXPR || rolls[i].type == d20.dice.TYPE_GROUP_EXPR) {
				var rollType = getRollType(rolls[i]);
				if (resultType == undefined) {
					resultType = rollType;
				}
				else if (resultType != rollType) {
					throw "Cannot mix " + resultType + " and " + rollType + " rolls in a single roll expression";
				}
			}

			if (rolls[i].type == d20.dice.TYPE_ROLL_EXPR) {
				//Setup sides for fate rolls
				if (rolls[i].fate) {
					rolls[i].sides = 3;
				}
				//Setup sides for table rolls
				else if (rolls[i].table != undefined) {
					rolls[i].sides = d20.getTableElementCount(rolls[i].table);
				}

				// Enforce that fate dice don't support compounding
				if (rolls[i].fate && rolls[i].mods.compounding != undefined) {
					throw "Compounding FATE dice are not legal, try ! instead of !! for exploding FATE dice";
				}

				//Make sure that we don't try to do an exploding d1 dice. /sigh
				if (rolls[i].mods && rolls[i].mods.exploding != undefined && rolls[i].sides < 2) {
					throw "You must roll a d2 or higher to roll exploding dice.";
				}

				// Add sanity bounds checks
				rolls[i].dice = Math.max(Math.min(rolls[i].dice, MAX_NUM_ROLLS), 0);
				rolls[i].sides = Math.max(Math.min(rolls[i].sides, MAX_ROLL), 0);
			}

			if (rolls[i].type == d20.dice.TYPE_GROUP_EXPR) {

				//For groups with one sub-roll doign a sucess check verify that the sub-roll only contains one roll expression and no group expressions
				if (rolls[i].rolls.length == 1 && resultType == d20.dice.ROLL_TYPE_SUCCESS) {
					var foundRoll = false;
					for (var r = 0; r < rolls[i].rolls[0].length; r++) {
						if (rolls[i].rolls[0][r].type == d20.dice.TYPE_ROLL_EXPR) {
							if (foundRoll) {
								throw "Only one roll expression is allowed in a single sub-roll expression success check";
							}
							foundRoll = true;
						}
						else if (rolls[i].rolls[0][r].type == d20.dice.TYPE_GROUP_EXPR) {
							throw rolls[i].rolls[0][r].type + " expression is not supported in a single sub-roll expression success check";
						}
					}
				}

				// Recurse on grouped rolls
				var groupResultType = undefined;
				for (var g = 0; g < rolls[i].rolls.length; g++) {
					var subGroupResultType = validateParseResult(rolls[i].rolls[g]);
					if (groupResultType == undefined) {
						groupResultType = subGroupResultType;
					}
					else if (groupResultType != subGroupResultType) {
						throw "Cannot mix " + groupResultType + " and " + subGroupResultType + " rolls in a  roll group";
					}
				}
				rolls[i].resultType = groupResultType;
			}
		}

		if (resultType == undefined) {

			//Math-only rolls.
			if (rolls[0].type === d20.dice.TYPE_MATH_EXPR) {
				return d20.dice.TYPE_MATH_EXPR;
			}

			throw "Could not determine result type of: " + JSON.stringify(rolls);
		}
		return resultType;
	};

	var getRollType = function(diceRoll) {
		if (diceRoll.mods && diceRoll.mods.match !== undefined && diceRoll.mods.match.total !== undefined) {
			return d20.dice.ROLL_TYPE_MATCH;
		}
		else if (diceRoll.mods && diceRoll.mods.success !== undefined) {
			return d20.dice.ROLL_TYPE_SUCCESS;
		}
		else if (diceRoll.sides != undefined && diceRoll.sides.type == d20.dice.TYPE_LABEL) {
			return d20.dice.ROLL_TYPE_TABLE;
		}
		else {
			return d20.dice.ROLL_TYPE_SUM;
		}
	};

	/**
	 * Parse the dice formula string using the dice grammar and validate
	 * the result
	 *
	 * @param formula The parsed roll object model
	 */
	var parseRollString = function(rollString) {
		log(function() { return "E parseRollString: " + rollString; });

		// Use Parser Grammar to parse the roll expression
		var rolls = d20.DicePEG.parse(rollString);
		log(rolls);

		var resultType = validateParseResult(rolls);

		var vre = new ValidatedRollExpression(rolls, resultType);
		log(vre);
		log(JSON.stringify(vre));
		log(function() { return "L parseRollString: " + vre.rolls.length + " expressions from: " + rollString; });

		return vre;
	};

	/**
	 * Initiate all rolls in the parse tree
	 *
	 * @param rolls An array of expresion objects
	 * @param roll rollsCompleteCallback Callback to execute when each entry in the array is complete
	 */
	var initiateRolls = function(rolls, resultType, rollsCompleteCallback) {
		for (var i = 0; i < rolls.length; i++) {
			if (rolls[i].type == d20.dice.TYPE_ROLL_EXPR) {
				doRolls(rolls[i], rollsCompleteCallback);
			}
			else if (rolls[i].type == d20.dice.TYPE_GROUP_EXPR) {
				initiateGroupRolls(rolls[i], resultType, rollsCompleteCallback);
			}
			else {
				rollsCompleteCallback();
			}
		}
	};
	/**
	 * Initiates rolls for a group, needed so the correct scoping of groupCompleteCallback
	 * is used.
	 */
	var initiateGroupRolls = function(groupRoll, resultType, rollsCompleteCallback) {
		var groupCompleteCallback = new TaskCompletionCallback(groupRoll.rolls.length, function() {
			postProcessCompleteGroup(groupRoll, resultType);
			rollsCompleteCallback();
		}, "groupCompleteCallback");

		for (var g = 0; g < groupRoll.rolls.length; g++) {
			initiateSubGroupRolls(groupRoll.rolls[g], groupRoll.resultType, groupCompleteCallback);
		}
	};
	/**
	 * Initiates rolls for a subgroup, needed so the correct scoping of subGroupCompleteCallback
	 * is used.
	 */
	var initiateSubGroupRolls = function(subGroup, resultType, groupCompleteCallback) {
		var subGroupCompleteCallback = new TaskCompletionCallback(subGroup.length, function() {
			groupCompleteCallback.taskComplete();
		}, "subGroupCompleteCallback");

		initiateRolls(subGroup, resultType, function() {
			subGroupCompleteCallback.taskComplete();
		});
	};

	/**
	 * Fire off each roll required for the diceRoll using asyncRand.
	 */
	var doRolls = function(diceRoll, rollsCompleteCallback) {
		log(function() { return diceRollToString(diceRoll) + "\t - E doRolls"; });

		// Add arrays to track rolls to diceRoll
		diceRoll.results = [];

		// Setup the callback tracker for signaling when each roll is complete
		var taskCallback = new TaskCompletionCallback(diceRoll.dice, function() {
			diceRollCompleteCallback(diceRoll);
			rollsCompleteCallback();
		}, "rollCompleteCallback");

		var rollCompleteCallback = function() {
			taskCallback.taskComplete();
		};

		// Execute each roll for the dice
		for (var r = 0; r < diceRoll.dice; r++) {
			rollDie(r, diceRoll, rollCompleteCallback);
		}

		//Handling for the case where diceRoll.dice == 0, ensures the callback is executed no matter what
		taskCallback.verify();

		log(function() { return diceRollToString(diceRoll) + "\t - L doRolls"; });
	};

	/**
	 * Processes modifiers on the a single dice roll that are applied after all dice within
	 * the roll have completed. This includes keep, drop, and sort.
	 */
	var diceRollCompleteCallback = function(diceRoll) {
		log(function() { return diceRollToString(diceRoll) + "\t - E diceRollCompleteCallback"; });

		//First order rolls by index and the drop flag to have an intuitive "natural" ordering of dice
		diceRoll.results.sort(function(a, b) {
			var d = (a.i - b.i);
			if (d != 0 || a.d == b.d) {
				return d;
			}
			if (a.d) {
				return -1;
			}
			return 1;
		});

		//Clean up data model by removing roll index, it isn't needed after this point (right?)
		diceRoll.results.forEach(function(r) {
			delete r.i;
		});

		if (diceRoll.mods && diceRoll.mods.keep != undefined) {
			var order = (diceRoll.mods.keep.end == "l" ? "a" : "d");
			var sortedResults = sortRolls(diceRoll.results, order);

			keepRolls(sortedResults, diceRoll.mods.keep.count);
		}
		if (diceRoll.mods && diceRoll.mods.drop != undefined) {
			var order = (diceRoll.mods.drop.end == "l" ? "a" : "d");
			var sortedResults = sortRolls(diceRoll.results, order);

			dropRolls(sortedResults, diceRoll.mods.drop.count);
		}
		if (diceRoll.mods && diceRoll.mods.sort != undefined) {
			diceRoll.results = sortRolls(diceRoll.results, diceRoll.mods.sort.order);
		}

		log(function() { return diceRollToString(diceRoll) + "\t - L diceRollCompleteCallback"; });
	};

	/**
	 * Process modifiers on a group of rolls that are applied after all of the group expressions
	 * within the group.
	 */
	var postProcessCompleteGroup = function(groupRoll, resultType) {
		log(function() { return "E postProcessCompleteGroup(" + resultType + ")"; });

		if (groupRoll.mods && groupRoll.mods.keep != undefined && groupRoll.rolls.length == 1) {
			//apply keep to the total set of rolls within the group
			var order = (groupRoll.mods.keep.end == "l" ? "a" : "d");

			var allRolls = buildSubGroupRollsArray(groupRoll.rolls[0]);

			allRolls = sortRolls(allRolls, order);
			keepRolls(allRolls, groupRoll.mods.keep.count);

			cleanupSubGroupValues(groupRoll.rolls[0]);
		}
		if (groupRoll.mods && groupRoll.mods.drop != undefined && groupRoll.rolls.length == 1) {
			//apply drop to the total set of rolls within the group
			var order = (groupRoll.mods.drop.end == "l" ? "a" : "d");

			var allRolls = buildSubGroupRollsArray(groupRoll.rolls[0]);

			allRolls = sortRolls(allRolls, order);
			dropRolls(allRolls, groupRoll.mods.drop.count);

			cleanupSubGroupValues(groupRoll.rolls[0]);
		}

		//Total things up for the group, needed for subgroup keep/drop
		totalResult(groupRoll, resultType);

		if (groupRoll.mods && groupRoll.mods.keep != undefined && groupRoll.rolls.length > 1) {
			//apply keep to the subgroup results
			var order = (groupRoll.mods.keep.end == "l" ? "a" : "d");
			var groupResults = sortRolls(groupRoll.results, order);
			keepRolls(groupResults, groupRoll.mods.keep.count);
		}
		if (groupRoll.mods && groupRoll.mods.drop != undefined && groupRoll.rolls.length > 1) {
			//apply drop to the subgroup results
			var order = (groupRoll.mods.drop.end == "l" ? "a" : "d");
			var groupResults = sortRolls(groupRoll.results, order);
			dropRolls(groupResults, groupRoll.mods.drop.count);
		}

		log(function() { return "L postProcessCompleteGroup"; });
	};

	var buildSubGroupRollsArray = function(subGroups) {
		var allRolls = [];
		for (var g = 0; g < subGroups.length; g++) {
			if (subGroups[g].type == d20.dice.TYPE_ROLL_EXPR) {
				allRolls = allRolls.concat(subGroups[g].results);
			}
			else if (subGroups[g].type == d20.dice.TYPE_GROUP_EXPR) {
				subGroups[g].v = totalResult(subGroups[g], subGroups[g].resultType).eval();
				allRolls.push(subGroups[g]);
			}
		}
		return allRolls;
	};

	var cleanupSubGroupValues = function(subGroups) {
		subGroups.forEach(function(e) {
			if (e.type == d20.dice.TYPE_GROUP_EXPR) {
				delete e.v;
			}
		});
	};

	/**
	 * Keeps the first count rolls that are not already marked as dropped iterating through
	 * the array from 0 to N. After the count rolls are kept the remaining rolls are marked
	 * as dropped.
	 *
	 * @param rolls sorted array of rolls
	 * @param count number of rolls to keep
	 */
	var keepRolls = function(rolls, count) {
		var kept = 0;
		for (var i = 0; i < rolls.length; i++) {
			if (!rolls[i].d) {
				if (kept < count) {
					kept++;
				}
				else {
					rolls[i].d = true;
				}
			}
		}
	};

	/**
	 * Drops the first count rolls that are not already marked as dropped iterating through
	 * the array from 0 to N. After the count rolls are marked as dropped the method returns
	 *
	 * @param rolls sorted array of rolls
	 * @param count number of rolls to drop
	 */
	var dropRolls = function(rolls, count) {
		var dropped = 0;
		for (var i = 0; i < rolls.length && dropped < count; i++) {
			if (!rolls[i].d) {
				rolls[i].d = true;
				dropped++;
			}
		}
	};

	/**
	 * Return a of the rolls array sorted in the specified order
	 */
	var sortRolls = function(rolls, order) {
		var orderMod = (order == "d" ? -1 : 1);
		return rolls.slice(0).sort(function(a, b) {
			return (a.v - b.v) * orderMod;
		});
	};

	/**
	 * A simple random number generator, but we force it to be asynchronous so we
	 * can make sure that our dice engine can support an asynch generator. This
	 * way we can substitute in something like 3D Dice rolling or server-side
	 * "real" random numbers later on.
	 *
	 * @param sides
	 *          maximum integer to roll, returned value will be between 1 and
	 *          maxRoll inclusive
	 * @param randCallback
	 *          function called when the random number is generated, the random
	 *          number is provided as the only argument
	 */
	var asyncRand = function(sides, randCallback, no3d, rollid) {
		if (sides === 0) {
			setTimeout(function() {
				randCallback(0);
			}, 0);
		}

		//We no longer do local 3D rolls.

		else if (sides === 6 && d20.textchat && d20.textchat.egg_clickhole && !$("#lightly-overlay").is(":visible")) {
			var possibilities = [
				["2990", 1, 4],
				["2991", 1, 7],
				["2992", 1, 12],
				["2993", 2, 7],
				["2994", 2, 5],
				["2995", 2, 38],
				["2996", 2, 11],
				["2997", 3, 13],
				["2998", 3, 16],
				["2999", 3, 6],
				["3000", 3, 16],
				["3001", 4, 17],
				["3002", 4, 18],
				["3003", 4, 16],
				["3004", 5, 7],
				["3006", 5, 24],
				["3005", 5, 14],
				["3007", 5, 27],
				["3008", 6, 7],
				["3009", 6, 6],
				["3010", 6, 5],
				["3012", 6, 10]
			];

			var chosen = possibilities[othis.random(possibilities.length)];

			d20.textchat.sendShout({
				type: "playclickhole",
				playerid: window.currentPlayer.id,
				content: chosen,
				time: new Date().getTime()
			});

			if (window.fakeLightly) {
				window.fakeLightly("http://v.theonion.com/onionstudios/video/" + chosen[0] + "/640.mp4");
			}

			setTimeout(function() {
				randCallback(chosen[1]);
				$("#lightly-overlay").hide();
			}, (chosen[2] * 1000) + 2000);

		}
		else {
			setTimeout(function() {
				randCallback(othis.random(sides) + 1);
			}, 0);
		}
	};

	/**
	 * Compare a value to a ComparePoint, if defaultPoint is specified and no
	 * ComparePoint operator exists the comparison will be done as
	 * "value == defaultPoint"
	 */
	var compareToPoint = function(value, cp, defaultPoint) {
		if (cp.comp != undefined) {
			var cpFormula = value + cp.comp + cp.point;
			var cpResult = eval(cpFormula);
			return cpResult;
		}

		return value == defaultPoint;
	};

	/**
	 * Creates a new RollResult, pushes it onto the results array for the diceRoll
	 * and triggers asyncRand with a callback to individualRollCallback
	 *
	 * @param diceRoll The roll expression being executed
	 * @param rollCompleteCallback The callback to execute when the random number is generated
	 * @param rollModifierFunction An optional modifier function that can change the random number before it is passed to rollCompleteCallback
	 */
	var rollDie = function(rollIndex, diceRoll, rollCompleteCallback, extraRollCounter) {
		//Roll an additional die
		var rollResult = new RollResult(rollIndex);
		diceRoll.results.push(rollResult);

		//Have to do anon function call to so the correct rollResult reference is passed to the individualRollCallback
		(function(rr) {
			asyncRand(diceRoll.sides, function(rand) {
				individualRollCallback(diceRoll, rr, rand, rollCompleteCallback, extraRollCounter);
			}, (diceRoll.table !== undefined), diceRoll.rollid);
		}(rollResult));
	};

	/**
	 * Called by asyncRand for each new random roll, handles logic around immediately needed additional rolls
	 * for exploding, compounding, penetrating, and reroll modifiers
	 */
	var individualRollCallback = function(diceRoll, rollResult, rand, rollCompleteCallback, extraRollCounter) {
		extraRollCounter = (extraRollCounter || 0);
		log(function() { return diceRollToString(diceRoll) + "\t - E individualRollCallback(" + extraRollCounter + ") " + rand; });

		//Save the roll value, addition is used to handle modifiers like compounding that use the same
		//rollResult for multiple rolls
		//if(diceRoll.mods === undefined) diceRoll.mods = {};

		//If this is a rollable table roll, get the value for that table index.
		if (diceRoll.table !== undefined) {
			rollResult.tableidx = rand - 1;
			rollResult.v += d20.getTableElementValue(diceRoll.table, rollResult.tableidx);
		}
		else {
			rollResult.v += rand;
		}

		//Offset FATE rolls
		if (diceRoll.fate) {
			rollResult.v -= 2;
		}

		//Reduce roll by 1 for every extra penetrating roll
		if (diceRoll.mods && diceRoll.mods.penetrating != undefined && extraRollCounter > 0) {
			rollResult.v -= 1;
		}

		//Make sure we haven't exploded/compounded/penetrated/rerolled too many times
		if (extraRollCounter > MAX_NUM_ROLLS) {
			rollCompleteCallback();
		}
		else if (diceRoll.mods && diceRoll.mods.exploding != undefined && compareToPoint(rand, diceRoll.mods.exploding, diceRoll.sides)) {
			//Exploded - Roll an additional die
			rollDie(rollResult.i, diceRoll, rollCompleteCallback, extraRollCounter + 1);
		}
		else if (diceRoll.mods && diceRoll.mods.compounding != undefined && compareToPoint(rand, diceRoll.mods.compounding, diceRoll.sides)) {
			//Compounding - Roll another die but use the same rollResult
			asyncRand(diceRoll.sides, function(rand) {
				individualRollCallback(diceRoll, rollResult, rand, rollCompleteCallback, extraRollCounter + 1);
			}, (diceRoll.table !== undefined), diceRoll.rollid);
		}
		else if (diceRoll.mods && diceRoll.mods.penetrating != undefined && compareToPoint(rand, diceRoll.mods.penetrating, diceRoll.sides)) {
			//Exploded - Roll an additional die
			rollDie(rollResult.i, diceRoll, rollCompleteCallback, extraRollCounter + 1);
		}
		else if (diceRoll.mods && diceRoll.mods.reroll != undefined) {
			var rerolled = diceRoll.mods.reroll.some(function(reroll) {

				if (reroll.maxrerolls) {
					var numrollsforindex = 0;
					for (var jj = 0; jj < diceRoll.results.length; jj++) {
						if (diceRoll.results[jj].i === rollResult.i && diceRoll.results[jj].d === true) numrollsforindex++;
					}
				}

				if (compareToPoint(rand, reroll, 1)) {

					if (reroll.maxrerolls && numrollsforindex >= reroll.maxrerolls) {
						return false;
					}

					//Note that we
					//rerolled = true;
					rollResult.d = true;

					//ReRolled - Roll an additional die to replace the one that was dropped
					rollDie(rollResult.i, diceRoll, rollCompleteCallback, extraRollCounter + 1);

					//A true return stops iteration
					return true;
				}

				return false;
			});

			//If nothing was rerolled this die roll is complete
			if (!rerolled) {
				rollCompleteCallback();
			}
		}
		else {
			//No additional roll modifier, signal the die roll is complete
			rollCompleteCallback();
		}

		log(function() { return diceRollToString(diceRoll) + "\t - L individualRollCallback(" + extraRollCounter + ") " + rand; });
	};

	/**
	 * Apply all of the post-roll modifiers and perform totals
	 */
	var postProcessCompleteRolls = function(rolls, resultType, reprocess) {
		log(function() { return "E postProcessCompleteRolls"; });

		if (rolls.type == d20.dice.TYPE_VALIDATED_ROLLS) {
			// Special handling for the outer validated rolls data
			var total = postProcessCompleteRolls(rolls.rolls, rolls.resultType);
			rolls.total = total;
			return total;
		}

		var result = totalResults(rolls, resultType, reprocess);

		log(function() { return "L postProcessCompleteRolls - " + result; });
		return result;
	};

	var totalResults = function(rolls, resultType, reprocess, expression) {
		var expression = expression || new ExpressionBuilder();
		var expression = new ExpressionBuilder();
		for (var r = 0; r < rolls.length; r++) {
			totalResult(rolls[r], resultType, reprocess, expression);
		}
		return expression.eval();
	};

	var totalResult = function(roll, resultType, reprocess, expression) {
		var expression = expression || new ExpressionBuilder();
		if (roll.type == d20.dice.TYPE_ROLL_EXPR) {
			expression.startGroup();
			for (var d = 0; d < roll.results.length; d++) {
				if (!roll.results[d].d) {
					addResultValue(expression, resultType, roll.results[d].v, roll);
				}
			}
			expression.endGroup();
			// If we've got a match mod create a "matches" property with a random color assigned to the value if the number of matches meets threshold and comparison/point
			if(roll.mods.match) {
				var val_array = [];
				var match_obj = {};
				_.each(roll.results, function(r) {
					val_array.push(r["v"]);
				});
				var count_obj = val_array.reduce(function(countMap, value) {countMap[value] = ++countMap[value] || 1;return countMap}, {});
				var cur_count = 0;
				for(var k in count_obj) {
					if(count_obj[k] >= roll.mods.match.threshold) {
						if(!roll.mods.match.comp || !roll.mods.match.point || (roll.mods.match.comp === ">=" && k >= roll.mods.match.point) || (roll.mods.match.comp === "<=" && k <= roll.mods.match.point) || (roll.mods.match.comp === "==" && k == roll.mods.match.point)) {
							if(cur_count == 8) {cur_count = 0};
							match_obj[k] = d20.dice.MATCH_COLORS[cur_count];
							cur_count++;
						};
					};
				}
				roll.mods.match["matches"] = match_obj;
			}
		}
		else if (roll.type == d20.dice.TYPE_MATH_EXPR) {
			expression.addMathExpr(roll.expr);
		}
		else if (roll.type == d20.dice.TYPE_GROUP_EXPR) {
			expression.startGroup();
			if (!roll.d) {
				if (roll.results == undefined || reprocess) {
					roll.results = [];

					//For groups with 1 sub-roll that are have a success rollType use special to total each roll
					if (roll.rolls.length == 1 && resultType == d20.dice.ROLL_TYPE_SUCCESS) {

						//First step is to build up the math expressions to use before and after each roll result
						var mathPrefix = "";
						var rollExpression = undefined;
						var mathSuffix = "";
						for (var r = 0; r < roll.rolls[0].length; r++) {
							if (roll.rolls[0][r].type == d20.dice.TYPE_ROLL_EXPR) {
								if (rollExpression != undefined) {
									throw "Only one roll expression is allowed in a single sub-roll expression success check";
								}
								rollExpression = roll.rolls[0][r];
							}
							else if (roll.rolls[0][r].type == d20.dice.TYPE_MATH_EXPR) {
								if (rollExpression == undefined) {
									mathPrefix += roll.rolls[0][r].expr;
								}
								else {
									mathSuffix += roll.rolls[0][r].expr;
								}
							}
							else if (roll.rolls[0][r].type == d20.dice.TYPE_GROUP_EXPR) {
								throw roll.rolls[0][r].type + " expression is not supported in a single sub-roll expression success check";
							}
						}

						//Second step is to evaluate each roll with the math expressions and store the result in the group's results
						for (var r = 0; r < rollExpression.results.length; r++) {
							if (!rollExpression.results[r].d) {
								var rExp = new ExpressionBuilder();
								rExp.startGroup();
								rExp.addMathExpr(mathPrefix);
								rExp.addGroupValue(rollExpression.results[r].v);
								rExp.addMathExpr(mathSuffix);
								rExp.endGroup();

								roll.results.push(new GroupResult(rExp.eval()));
							}
						}
					}
					else {
						for (var g = 0; g < roll.rolls.length; g++) {
							var groupTotal = totalResults(roll.rolls[g], roll.resultType, reprocess);
							roll.results.push(new GroupResult(groupTotal));

							addResultValue(expression, resultType, groupTotal, roll);
						}
					}
				}
				else {
					roll.results.forEach(function(r) {
						if (!r.d) {
							addResultValue(expression, resultType, r.v, roll);
						}
					});
				}
			}
			expression.endGroup();
		}

		return expression;
	};

	var addResultValue = function(expression, resultType, value, roll) {
		if (resultType == d20.dice.ROLL_TYPE_SUM) {
			expression.addGroupValue(value);
		}
		else if (resultType == d20.dice.ROLL_TYPE_SUCCESS) {
			expression.addGroupSuccess(value, roll.mods.success);
			if (roll.mods && roll.mods.failure != undefined) {
				expression.addGroupFailure(value, roll.mods.failure);
			}
		}
		else if (resultType == d20.dice.ROLL_TYPE_MATCH) {
			expression.addGroupMatch(value, roll.mods.match);
		}
		else {
			throw "Unsupported resultType: " + resultType;
		}
	};

	/**
	 * reprocess an already processed roll result. Useful if structural changes such as reordering,
	 * or keep/drop toggling has been done and a recalculation of totals is needed
	 *
	 * @param rollResult The json object model returned to the finalCallback when the roll expression was originally processed
	 */
	this.reprocess = function(rollResult, finalCallback, errorCallback) {
		errorCallback = errorCallback || fallbackErrorHandler;

		try {
			postProcessCompleteRolls(rollResult, undefined, true);
			finalCallback(rollResult);
		}
		catch (e) {
			errorCallback(e);
		}
	};

	var remoteRollQueue = [];
	var remoteRollCallbacks = {};

	var performRemoteRoll = function(vre, rollid, rolltype, finalCallback, errorCallback) {
		remoteRollQueue.push({
			vre: vre,
			rollid: rollid,
			rolltype: rolltype
		});

		remoteRollCallbacks[rollid] = {
			success: finalCallback,
			error: errorCallback
		}

		debounced_doRemoteRollRequest();
	};

	var _doRemoteRollRequest = function() {

		if (remoteRollQueue.length === 0) return;

		if (!window.is_playerapp && window.currentPlayer.get("tddiceenabled") && window.currentPlayer.get("disableagency") === false) {

			if ($("#tdagencyoverlay").is(":visible")) {
				return;
			}
			$("#tdagencyoverlay").show();
			//DICECUP SFX
			var numberofdice = remoteRollQueue[0].vre.rolls[0].dice ? remoteRollQueue[0].vre.rolls[0].dice : 1;
			d20.tddice.playsound("dicecup", numberofdice);
			// d20.tddice.soundfx["dicecup.wav"].play();
			var posinfo = {};
			var $showline = $("#tdagencyoverlay svg line");
			var started_dragging = false;
			$("#tdagencyoverlay").on("mousedown", function(e) {
				posinfo.startx = e.clientX / $(window).width();
				posinfo.starty = e.clientY / $(window).height();
				$showline.attr("x1", e.clientX).attr("y1", e.clientY).attr("x2", e.clientX).attr("y2", e.clientY);
				started_dragging = true;
			});
			$("#tdagencyoverlay").on("mousemove", function(e) {
				if (started_dragging) {
					var xdist = Math.abs(posinfo.startx - (e.clientX / $(window).width()));
					var ydist = Math.abs(posinfo.starty - (e.clientY / $(window).height()));
					var curdist = Math.sqrt((xdist * xdist) + (ydist * ydist));
					if (curdist < 0.2) {
						$showline.css("stroke", "rgb(255,255,255)");
					}
					else if (curdist < 0.5) {
						$showline.css("stroke", "rgb(245,238,44)");
					}
					else {
						$showline.css("stroke", "rgb(245,44,44)");
					}
					$showline.attr("x2", e.clientX).attr("y2", e.clientY);
				}
			});
			$("#tdagencyoverlay").on("mouseup", function(e) {
				$("#tdagencyoverlay").off().hide();
				$showline.attr("x1", 0).attr("y1", 0).attr("x2", 0).attr("y2", 0);
				firebase.auth().currentUser.getIdToken(false).then((token) => {
					if (!posinfo.startx) {
						_posthookrollrequest(null, token);
					}
					else {
						posinfo.stopx = e.clientX / $(window).width();
						posinfo.stopy = e.clientY / $(window).height();
						_posthookrollrequest(posinfo, token);
					}
				});
			})
		}
		else {
			setTimeout(function() {
				if(window.GNTKN === "tutorial") {
					_posthookrollrequest();
				} else {
					firebase.auth().currentUser.getIdToken(false).then((token) => {
						_posthookrollrequest(null, token);
					});
				}
			}, 50);
		}
	};

	var _posthookrollrequest = function(posinfo = {}, idToken) {
		if (remoteRollQueue.length === 0) return;

		var rolldata = {
			cid: window.campaign_storage_path,
			fbnum: window.FIREBASE_ROOT,
			authkey: idToken,
			pid: window.currentPlayer.id,
			rolls: remoteRollQueue,
			use3d: (window.is_playerapp ? window.currentPlayer.get("apptddiceenabled") : window.currentPlayer.get("tddiceenabled")),
		};

		if (posinfo) {

			var deltas = {
				x: posinfo.startx - posinfo.stopx,
				y: posinfo.starty - posinfo.stopy
			};

			var mindistance = 0.01;
			var maxdistance = 0.3;

			if (Math.abs(deltas["x"]) < mindistance) {
				deltas["x"] = deltas["x"] < 0 ? -mindistance : mindistance
			}
			if (Math.abs(deltas["y"]) < mindistance) {
				deltas["y"] = deltas["y"] < 0 ? -mindistance : mindistance
			}
			if (Math.abs(deltas["x"]) > maxdistance) {
				deltas["x"] = deltas["x"] < 0 ? -maxdistance : maxdistance
			}
			if (Math.abs(deltas["y"]) > maxdistance) {
				deltas["y"] = deltas["y"] < 0 ? -maxdistance : maxdistance
			}

			rolldata.deltas = {
				x: deltas.x * 80 * -1,
				y: deltas.y * 80 * 1
			};
		}
		else if (rolldata.use3d === true) {
			rolldata.deltas = {
				x: Math.random() * 10 - 5,
				y: 20
			};
		}

		const rollURL = window.ROLL_URL || 'https://dice.roll20.net';

		$.ajax({
			url: rollURL + "/doroll",
			type: "POST",
			data: JSON.stringify(rolldata),
			contentType: "application/json; charset=utf-8",
			dataType: "json",
			success: function(queueresults) {
				for (var resultrid in queueresults) {
					if (!remoteRollCallbacks[resultrid]){
						remoteRollCallbacks[resultrid] = {
							success: d20.textchat.roll_default_callback,
							error: d20.textchat.roll_error_callback
						}
					}

					d20.dice_engine.newRoll(resultrid);
					if (queueresults[resultrid].error != undefined) {
						remoteRollCallbacks[resultrid].error("There was an error fetching your roll. " + queueresults[resultrid].error);
						continue;
					}
					var thisvre = JSON.parse(queueresults[resultrid].json);
					postProcessCompleteRolls(thisvre);
					remoteRollCallbacks[resultrid].success(thisvre, resultrid, queueresults[resultrid].signature, queueresults[resultrid].tdseed);

					if (d20.tutorial && queueresults[resultrid].shoutjson !== undefined) {
						d20.tddice.remoteRoll(JSON.parse(queueresults[resultrid].shoutjson));
					}
				}
			},
			error: function(e) {
				//Fallback to local rolling.
				_.each(rolldata.rolls, function(thisroll) {

					var vre = thisroll.vre;

					var wholeRollCompleteCallback = new TaskCompletionCallback(vre.rolls.length, function() {
						postProcessCompleteRolls(vre);
						setTimeout(function() {
							remoteRollCallbacks[thisroll.rollid].success(vre, null, false);
						}, 0);
					}, "wholeRollCompleteCallback");

					initiateRolls(vre.rolls, vre.resultType, function() {
						wholeRollCompleteCallback.taskComplete();
					});
				});
			}
		});

		remoteRollQueue = [];
	};

	var numBounce = 0;
	function showWarning (obj, bounces) {
		var player = window.Campaign.players.get(obj.pid);
		d20.textchat.incoming(false, {
			who: "system",
			type: "system",
			content: i18n("warning_roll_results_missing_name_number").tranSub(player.get("displayname"), bounces)
		});
		numBounce = 0;
	}
	var showWarningTH = _.throttle(showWarning, 7000, { leading: false }); // The warning will only show up every 5 seconds.
	d20.dice_engine.handleRollReceived = function(obj) {
		// If the roll comes in before the shout, we don't have to worry about it at all
		if (recentRolls.indexOf(obj.rid) === -1) {
			setTimeout(function() {
				if (recentRolls.indexOf(obj.rid) === -1) {
					showWarningTH(obj, ++numBounce);
				}
				else {
					recentRolls.splice(recentRolls.indexOf(obj.rid), 1);
				}
			}, 3000)
		}
		else {
			recentRolls.splice(recentRolls.indexOf(obj.rid), 1);
		}
	};
	d20.dice_engine.newRoll = function(rollId) {
		if (recentRolls.indexOf(rollId) === -1) {
			recentRolls.push(rollId);
		}
	};

	this.flushRemoteQueue = function() {
		_doRemoteRollRequest();
	}

	var debounced_doRemoteRollRequest = _.debounce(_doRemoteRollRequest, 100);

	/**
	 * Process a roll expression and call finalCallback when complete with an
	 * object that contains the total, formula, and originalFormula
	 */
	this.process = function(rollString, finalCallback, errorCallback) {
		errorCallback = errorCallback || fallbackErrorHandler;

		try {
			var vre = parseRollString(rollString);

			if (vre.rolls == 0) {
				throw "There were no dice to roll!";
			}

			var didHaveTables = false;
			var didHaveRolls = false;
			var hasTablesDepth = 0;

			var hasTables = function(subrolls) {
				hasTablesDepth++;
				if (subrolls !== undefined) {
					for (var i = 0; i < subrolls.length; i++) {
						if (subrolls[i].table !== undefined) {
							didHaveTables = true;
						}
						if (subrolls[i].type === "R") {
							didHaveRolls = true;
						}
						if ((!didHaveTables || !didHaveRolls) && hasTablesDepth < 99 && subrolls[i].rolls !== undefined && subrolls[i].rolls.length > 0) {
							for (var j = 0; j < subrolls[i].rolls.length; j++) {
								hasTables(subrolls[i].rolls[j]);
							}
						}
					}
				}
			};

			try {
				hasTables(vre.rolls);
			}
			catch (e) {
			}

			hasTables = null;

			if (d20.textchat && d20.textchat.egg_clickhole) {
				didHaveTables = true; //force using local rolls.
			}

			if (didHaveTables === true || didHaveRolls === false) {
				var wholeRollCompleteCallback = new TaskCompletionCallback(vre.rolls.length, function() {
					postProcessCompleteRolls(vre);
					setTimeout(function() {
						finalCallback(vre, null, false);
					}, 0);
				}, "wholeRollCompleteCallback");

				initiateRolls(vre.rolls, vre.resultType, function() {
					wholeRollCompleteCallback.taskComplete();
				});
			}

			else if (typeof $ === "undefined") {
				//We're on the API server?

				var rollid = generateUUID();

				var rolldata = {
					vre: vre,
					cid: CAMPAIGNID,
					fbnum: 'https://' + FIREBASENUM + '.firebaseio.com/',
					pid: "api",
					rid: rollid,
					use3d: false,
					authkey: FIREBASETOKEN,
					rolltype: d20.textchat.currentRollType
				};

				// This is only needed until we are 100% on GKE
				const rollURL = window.ROLL_URL || "https://app.roll20.net";
				request.post({
					url: rollURL + "/doroll",
					body: rolldata,
					json: true,
					timeout: 5000
				}, function(error, response, body) {

					if (!error && response.statusCode == 200 && body !== "") {
						var snap = body;
						if (snap.error !== undefined) {
							errorCallback("There was an error fetching your roll. " + snap.error);
							return;
						}
						var finalvre = JSON.parse(snap.json);
						postProcessCompleteRolls(finalvre);
						finalCallback(finalvre, rollid, snap.signature);
					}

					else {
						errorCallback("There was an error communicating with the QuantumRoll server.");
					}
				});
			}

			else {

				var rollid = generateUUID();

				performRemoteRoll(vre, rollid, d20.textchat.currentRollType, finalCallback, errorCallback);
			}
		}
		catch (e) {
			errorCallback(e);
		}
	};

	this.handleRollReq = function(vre, finalCallback) {
		var wholeRollCompleteCallback = new TaskCompletionCallback(vre.rolls.length, function() {
			try {
				postProcessCompleteRolls(vre);
			}
			catch (e) {
				finalCallback({
					error: "There was an error processing this roll."
				});
				return;
			}
			setTimeout(function() {
				finalCallback(vre);
			}, 0);
		}, "wholeRollCompleteCallback");

		try {
			initiateRolls(vre.rolls, vre.resultType, function() {
				wholeRollCompleteCallback.taskComplete();
			});
		}
		catch (e) {
			finalCallback({
				error: "There was an error processing this roll."
			});
		}
	};

	this.handleRollString = function(rollString) {
		var vre = parseRollString(rollString);

		if (vre.rolls == 0) {
			throw "There were no dice to roll!";
		}

		return vre;
	}

	return this;
};



const charactersMentioned = (content, regex) => {
	const matches = content.match(regex);

	if (matches == null) return {};

	return matches.reduce((acc, match) => {
		const input = match.substring(2, match.length - 1);
		const fields = input.split('|');

		let character;

		if (fields.length === 4) {
			const characterId = fields[0];
			character = d20.Campaign.characters.get(characterId);
			if (character != null) {
				acc[character.id] = character;
				return acc;
			}
		}

		const charName = fields[0];

		if (['selected', 'target', 'tracker'].includes(charName)) {
			if (charName === 'selected') {
				const selected = d20.engine.selected();
				if (selected.length > 0 && selected[0].model?.get('represents')) {
					character = d20.Campaign.characters.get(selected[0].model.get('represents'));
				}
				if (character != null) {
					acc[character.id] = character;
					return acc;
				}
			}
			return acc;
		}

		d20.Campaign.characters.each((someCharacter) => {
			if (
				someCharacter.get('name').toLowerCase() === charName.toLowerCase()
			) {
				character = someCharacter;
				acc[character.id] = character;
				return false;
			}
			return true;
		});

		return acc;
	}, {});
};

function RollCommandError(message) {
	this.name = 'RollCommandError';
	this.message = message;
	this.stack = (new Error()).stack;
}
RollCommandError.prototype = new Error();

d20.textchat = {
	commandhistory: [],
	commandIndex: 0,
	currentRollType: 'rollresult',
	commandInProgress: false,
	lastChatBeep: 0,
	talktomyself: false,
	allowed3drolls: [],
	globalrolled: 0,
	egg_clickhole: false,
	roll_error_callback(e) {
		console.log(e);
		const eop = {
			who: 'error',
			type: 'error',
			content: typeof e === 'string' ? e : 'There was an error with your formula. Please try again.',
		};
		d20.textchat.incoming(false, eop);
		d20.utils.textchatNotify(false);
	},
	subTables(rolls, passNum) {
		let _runningTotal = 0;
		let _hasTable = false;

		if (passNum > 99) {
			console.log('Too many subgroups, abort.');
			return undefined;
		}

		_.each(rolls, (roll) => {
			if (roll.type === 'G') {
				_.each(roll.rolls, (subrolls) => {
					const _subresult = d20.textchat.subTables(subrolls, passNum + 1);
					if (_subresult !== undefined) {
						_runningTotal += _subresult;
						_hasTable = true;
					}
				});
			} else if (roll.table) {
				const table = d20.Campaign.rollabletables.findTableByName(roll.table);
				const weighted = table.getWeightedArray();
				if (table) {
					_.each(roll.results, (result) => {
						_hasTable = true;
						result.tableItem = table.tableitems
							.get(weighted[result.tableidx])
							.toJSON();
						if (result.d === undefined) {
							_runningTotal += result.v;
						}
					});
				}
			} else if (roll.results) {
				_.each(roll.results, (result) => {
					if (result.d) return true;
					_runningTotal += result.v;
				});
			}
		});

		if (_hasTable) return _runningTotal;
		return undefined;
	},
	roll_default_callback(results, rollid, signature, tdseed) {
		const parentRef = firebase.database().ref(
			`${window.campaign_storage_path}`,
		);
		const fbref = parentRef.child('chat');
		const roll_type = 'rollresult';

		d20.textchat.globalrolled++;

		d20.utils.textchatNotify(false);

		if (results.error) {
			const eop = {
				who: 'error',
				type: 'error',
				content: results.error,
			};
			d20.textchat.incoming(false, eop);
		} else {
			if (results.rolls && results.rolls.length > 0) {
				try {
					const _tableResult = d20.textchat.subTables(results.rolls, 0);

					if (_tableResult !== undefined) {
						signature = null;
					}
				} catch (e) {
					console.log('ERROR matching table');
					console.log(e);
				}
			}

			const newop = {
				who: d20.textchat.$speakingas.find('option:selected').text(),
				type: roll_type,
				content: JSON.stringify(results),
				signature,
				origRoll: '[error]',
				playerid: window.currentPlayer.id,
				avatar: '',
				_fbid: rollid,
			};
			fbref
				.child(rollid)
				.setWithPriority(newop, firebase.database.ServerValue.TIMESTAMP);
		}
	},
};

$(() => {
	let lastName = '';
	let linesSinceName = 0;
	let windowIsFocused = true;
	let popoutWindowIsFocused = false;
	let autoCompleteOpen = false;
	let lastWhisperReceived;
	let fbref;
	let shoutref;
	const istypingtimers = {};
	const whoistyping = {};

	d20.textchat.tabIsFocused = true;

	if (d20.dice_engine) {
		d20.textchat.diceengine = new d20.dice_engine();
	}

	$(window).bind('focus', () => {
		windowIsFocused = true;
	});

	$(window).bind('blur', () => {
		windowIsFocused = false;
	});

	d20.textchat.$textarea = $('#textchat-input textarea');
	d20.textchat.$speakingas = $('#speakingas');
	d20.textchat.$textchat = $('#textchat');

	const x509 = new X509();
	x509.readCertPEM(
		'-----BEGIN CERTIFICATE-----\
MIICtTCCAl+gAwIBAgIJAJtwle/qkHJnMA0GCSqGSIb3DQEBBQUAMHIxCzAJBgNV\
BAYTAlVTMQswCQYDVQQIEwJLUzEQMA4GA1UEBxMHV2ljaGl0YTEPMA0GA1UEChMG\
Um9sbDIwMRMwEQYDVQQDEwpyb2xsMjAubmV0MR4wHAYJKoZIhvcNAQkBFg90ZWFt\
QHJvbGwyMC5uZXQwHhcNMTQwMzAzMTgwMTQ4WhcNMTQwNDAyMTgwMTQ4WjByMQsw\
CQYDVQQGEwJVUzELMAkGA1UECBMCS1MxEDAOBgNVBAcTB1dpY2hpdGExDzANBgNV\
BAoTBlJvbGwyMDETMBEGA1UEAxMKcm9sbDIwLm5ldDEeMBwGCSqGSIb3DQEJARYP\
dGVhbUByb2xsMjAubmV0MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALJq8muAFnZM\
kJysXg9VJsevoQxtxV1NytYvCKHTtaCja/tyeLTRei0nu+NymPfNKKiRhv7R8D33\
oZLvIA/udusCAwEAAaOB1zCB1DAdBgNVHQ4EFgQUarGxVvODYDpzS5OKyKsTyCEm\
DSUwgaQGA1UdIwSBnDCBmYAUarGxVvODYDpzS5OKyKsTyCEmDSWhdqR0MHIxCzAJ\
BgNVBAYTAlVTMQswCQYDVQQIEwJLUzEQMA4GA1UEBxMHV2ljaGl0YTEPMA0GA1UE\
ChMGUm9sbDIwMRMwEQYDVQQDEwpyb2xsMjAubmV0MR4wHAYJKoZIhvcNAQkBFg90\
ZWFtQHJvbGwyMC5uZXSCCQCbcJXv6pByZzAMBgNVHRMEBTADAQH/MA0GCSqGSIb3\
DQEBBQUAA0EAjBHayltU3K4DCs2h4nC2quGGKzGE2h1nMCBzhQ1ed+vir+lLnWQv\
AOrqt50Nx7lMk+23uFGhGMysK2UyrqptMw==\
-----END CERTIFICATE-----',
	);

	const rollre = /\/((roll)|(r)|(gmroll)|(gr))[ ]+/i;
	const inviteLinkMessage = () => {
		if (window.is_gm) {
			$.get(`/campaigns/sharelink/${window.campaign_id}`, (bitly) => {
				d20.textchat.incoming(false, {
					who: 'system',
					type: 'system',
					content: `<h1 style="font-size: 1.2em;">Invite Players</h1>${i18n(
						'chat_campaign_link',
					)}<div class='sharelink'><a href='${bitly}'>${bitly}</a></div><div style='font-size: 0.9em;'></div>`,
				});
			});
		}
	};

	const postProcessOp = function (op, callback) {
		const listenerid = op.listenerid ? op.listenerid : undefined;
		op.content += '';
		if (op.content.match(rollre) !== null) {
			let currentRollType = 'rollresult';
			if (op.content.match(/\/((gmroll)|(gr))[ ]+/i) !== null) {
				currentRollType = 'gmrollresult';
			}

			d20.textchat.currentRollType = currentRollType;

			try {
				let rollexpression = op.content.replace(rollre, '');
				// Substitute in the final value of any inline rolls before we process our roll expressions.
				rollexpression = rollexpression.replace(
					/\$\[\[[0-9]+\]\]/g,
					(inlinematch) => {
						const inlinerollindex = inlinematch.substring(
							3,
							inlinematch.length - 1,
						);
						const inlineroll = op.inlinerolls[parseInt(inlinerollindex, 10)];
						if (inlineroll) {
							return inlineroll.results.total;
						}
						return 'INVALID INLINE ROLL';
					},
				);

				d20.utils.textchatNotify('Rolling the dice...');

				d20.textchat.diceengine.process(
					rollexpression,
					(results, rollid, signature, tdseed) => {
						d20.textchat.globalrolled++;

						d20.utils.textchatNotify(false);

						if (results.error) {
							const eop = {
								who: 'error',
								type: 'error',
								content: results.error,
							};
							d20.textchat.incoming(false, eop);
						} else {
							if (results.rolls && results.rolls.length > 0) {
								try {
									const _tableResult = d20.textchat.subTables(results.rolls, 0);

									if (_tableResult !== undefined) {
										signature = null;
									}
								} catch (e) {
									console.log('ERROR matching table');
									console.log(e);
								}
							}

							const newop = {
								who: d20.textchat.$speakingas.find('option:selected').text(),
								type: currentRollType,
								content: JSON.stringify(results),
								signature,
								origRoll: op.content.replace(rollre, ''),
								playerid: window.currentPlayer.id,
								avatar: op.avatar,
								_fbid: rollid,
							};

							if (listenerid) {
								newop.listenerid = listenerid;
							}

							if (tdseed) {
								newop.tdseed = tdseed;
							}

							if (op && op.opts && op.opts.tracker) {
								// Send the result to the tracker.
								sendResultToTracker(
									op.currentSelected,
									results,
									op.opts.tracker,
								);
							}

							callback(newop);
						}
					},
					d20.textchat.roll_error_callback,
				);
			} catch (e) {
				console.log(e);
				var eop = {
					who: 'error',
					type: 'error',
					content: typeof e === 'string' ? e : 'There was an error with your formula. Please try again.',
				};
				d20.textchat.incoming(false, eop);
			}
		} else if (
			op.content.substring(0, 4) === '/em ' || op.content.substring(0, 3) == '/e ' || op.content.substring(0, 4) == '/me '
		) {
			const emote = op.content
				.replace('/em ', '')
				.replace('/e ', '')
				.replace('/me ', '');

			var newop = {
				who: d20.textchat.$speakingas.find('option:selected').text(),
				type: 'emote',
				content: emote,
				playerid: window.currentPlayer.id,
				avatar: op.avatar,
			};

			if (listenerid) {
				newop.listenerid = listenerid;
			}

			callback(newop);
		} else if (
			op.content.substring(0, 5) === '/ooc ' || op.content.substring(0, 3) === '/o '
		) {
			var content = op.content.replace('/ooc ', '').replace('/o ', '');

			var newop = {
				who: d20.textchat.$speakingas.find('option:first-child').text(),
				type: 'general',
				playerid: window.currentPlayer.id,
				content,
				avatar: `/users/avatar/${window.currentPlayer.get('d20userid')}/30`,
			};

			if (listenerid) {
				newop.listenerid = listenerid;
			}

			callback(newop);
		} else if (window.is_gm && op.content.substring(0, 4) === '/as ') {
			var content = op.content.substring(4, op.content.length);
			var match = content.match(/\w+|"[^"]+"/);
			if (match != null && match.length) {
				content = content.substring(match[0].length, content.length);
				var newop = {
					who: match[0][0] === '"' ? match[0].substring(1, match[0].length - 1) : match[0],
					type: 'general',
					playerid: window.currentPlayer.id,
					content,
				};

				if (listenerid) {
					newop.listenerid = listenerid;
				}

				callback(newop);
			} else {
				throw 'Invalid. Try /as "Name of Character" <message>';
			}
		} else if (window.is_gm && op.content.substring(0, 6) === '/emas ') {
			var content = op.content.substring(6, op.content.length);
			var match = content.match(/\w+|"[^"]+"/);
			if (match != null && match.length) {
				content = content.substring(match[0].length, content.length);
				var newop = {
					who: match[0][0] === '"' ? match[0].substring(1, match[0].length - 1) : match[0],
					type: 'emote',
					playerid: window.currentPlayer.id,
					content,
				};

				if (listenerid) {
					newop.listenerid = listenerid;
				}

				callback(newop);
			} else {
				throw 'Invalid. Try /as "Name of Character" <message>';
			}
		} else if (window.is_gm && op.content.substring(0, 6) === '/desc ') {
			var content = op.content.substring(6, op.content.length);
			var newop = {
				who: '',
				type: 'desc',
				playerid: window.currentPlayer.id,
				content,
			};

			if (listenerid) {
				newop.listenerid = listenerid;
			}

			callback(newop);
		} else if (op.content.substring(0, 3) === '/w ') {
			const s = op.content.split(' ');
			let ms = s.slice(2, s.length);
			const whisperreg = /\"([^"]+)\"/i;
			var target = s[1];
			let matchfunc = function (input, tomatch) {
				return input.split(' ')[0].toLowerCase() === tomatch.toLowerCase();
			};

			if (s[1].substring(0, 1) === '"') {
				const regsearch = whisperreg.exec(op.content);
				if (regsearch) {
					target = regsearch[1];
					ms = op.content
						.replace(whisperreg, (_match) => '')
						.split(' ')
						.slice(1, s.length);
					matchfunc = function (input, tomatch) {
						return input.toLowerCase() === tomatch.toLowerCase();
					};
				}
			}

			// Try to find the target's id.
			var targetid = 0;
			let targetname;
			if (target.toLowerCase() == 'gm') {
				targetid = 'gm';
				targetname = 'GM';
			}
			if (targetid == 0) {
				// Check players.
				d20.Campaign.players.each((player) => {
					if (matchfunc(player.get('displayname'), target)) {
						targetid = player.id;
						targetname = player.get('displayname');
					}
				});
			}
			if (targetid == 0) {
				// Check characters.
				d20.Campaign.characters.each((character) => {
					if (matchfunc(character.get('name'), target)) {
						// Who conrols this character?
						if (
							!character.get('controlledby') || character.get('controlledby') == ''
						) {
							targetid = 'gm';
							targetname = 'GM';
						} else {
							targetid = character.get('controlledby');
							targetname = character.get('name');
						}
					}
				});
			}

			if (targetid == 0) {
				var eop = {
					who: 'error',
					type: 'error',
					content: `Unable to find a player or character with name: ${target}`,
				};
				d20.textchat.incoming(false, eop);
				return;
			}
			const message = ms.join(' ');
			var newop = {
				who: d20.textchat.$speakingas.find('option:selected').text(),
				type: 'whisper',
				target: targetid,
				target_name: targetname,
				playerid: window.currentPlayer.id,
				content: message,
				avatar: op.avatar,
			};

			if (listenerid) {
				newop.listenerid = listenerid;
			}
			callback(newop);
		} else if (op.content.substring(0, 5) == '/say ') {
			const speaktext = op.content.replace('/say ', '');
			const speakas = d20.textchat.$speakingas.val();

			op.content = speaktext;

			callback(newop);

			if (speakas.indexOf('character|') === -1) {
				// only do bubbles if we are speaking as a character.
				return;
			}
			const charid = speakas.split('|')[1];

			const shout = {
				type: 'say',
				characterid: charid,
				content: speaktext,
			};

			if (listenerid) {
				shout.listenerid = listenerid;
			}
		} else if (op.content.substring(0, 4) == '/fx ') {
			const fxopts = op.content.split(' ');
			let aimed = false;
			var target = op.currentSelected;
			let destination = false;
			let fxName = fxopts[1];
			const typebase = fxName.indexOf('-') > -1 ? fxName.split('-')[0] : fxName;
			// AIMED EFFECT?
			if (d20.fx.presetEffects[typebase]) {
				if (d20.fx.presetEffects[typebase].angle === -1) {
					aimed = true;
				}
			} else if (window.Campaign.custFx) {
				const customFx = window.Campaign.custFx.filter(
					(fx) => fx.get('name').toLowerCase() === typebase.toLowerCase(),
				)[0];
				if (customFx) {
					fxName = customFx.id;
					const definition = window.Campaign.custFx
						.get(fxName)
						.get('definition');
					if (definition.angle === -1) {
						aimed = true;
					}
				}
			}
			// ADDING DEFAULT DURATION IF NOT SET
			if (fxName.indexOf('|') === -1) {
				fxName += '|duration:25';
			} else if (fxName.indexOf('duration') === -1) {
				fxName += ',duration:25';
			}
			// CUSTOM TARGET?
			if (fxopts.length > 2) {
				var targetid = fxopts[2];
				target = d20.Campaign.activePage().thegraphics.get(targetid).view
					.graphic;
			}
			// CUSTOM DESTINATION?
			if (fxopts.length > 3) {
				const destinationid = fxopts[3];
				destination = d20.Campaign.activePage().thegraphics.get(destinationid)
					.view.graphic;
			}
			if (!target) {
				var eop = {
					who: 'error',
					type: 'error',
					content: 'The /fx command requires a selected token or token ID, but none was provided. Select a token and try again.',
				};
				d20.textchat.incoming(false, eop);
			} else {
				const x = target.left;
				const y = target.top;
				if (aimed) {
					if (destination) {
						const velocityInfo = {};
						velocityInfo.distance = getDist(
							destination.left - target.left,
							destination.top - target.top,
						);
						velocityInfo.angle = getAngle(
							destination.left - target.left,
							destination.top - target.top,
						);
						d20.fx.spawnFx(x, y, fxName, velocityInfo);
					} else {
						d20.fx.agencyFx(
							(velocityInfo) => {
								d20.fx.spawnFx(x, y, fxName, velocityInfo);
							},
							x,
							y,
						);
					}
				} else {
					d20.fx.spawnFx(x, y, fxName);
				}
			}

			callback('noop');
		} else if (
			op.content.substring(0, 16) === '/talktomyself on' || op.content === '/talktomyself' || op.content.substring(0, 17) === '/talktomyself off'
		) {
			if (
				op.content.substring(0, 16) === '/talktomyself on' || (op.content === '/talktomyself' && d20.textchat.talktomyself === false)
			) {
				d20.textchat.talktomyself = true;

				var eop = {
					who: 'system',
					type: 'system',
					content: '<strong>You are now talking to yourself.</strong> Chat messages and dice rolls will <strong>NOT BE BROADCAST</strong> to others until you turn this off. Use <code>/talktomyself off</code> to disable.',
				};

				d20.textchat.incoming(false, eop);

				d20.utils.textchatNotify('Talking to Yourself', true);
			} else if (
				op.content.substring(0, 17) === '/talktomyself off' || (op.content === '/talktomyself' && d20.textchat.talktomyself === true)
			) {
				d20.textchat.talktomyself = false;

				var eop = {
					who: 'system',
					type: 'system',
					content: '<strong>You are no longer talking to yourself.</strong> Hooray!',
				};

				d20.textchat.incoming(false, eop);

				d20.utils.textchatNotify(false, true);
			}
		} else if (op.content.split(' ')[0] === '/invite') {
			inviteLinkMessage();
		} else {
			var eop = {
				who: 'error',
				type: 'error',
				content: `Unrecognized command: ${op.content}`,
			};
			d20.textchat.incoming(false, eop);
		}
	};

	var getAngle = function (deltaX, deltaY) {
		let angle = (Math.atan2(deltaY, deltaX) * 180) / Math.PI;
		if (angle < 0) {
			angle = 360 + angle;
		}

		if (angle % 180 > 90) {
			if (angle % 90 > 45) {
				angle += 10 - (angle % 45) / 4.5;
			} else {
				angle += (angle % 45) / 4.5;
			}
		} else if (angle % 90 > 45) {
			angle -= 10 - (angle % 45) / 4.5;
		} else {
			angle -= (angle % 45) / 4.5;
		}

		return angle;
	};

	var getDist = function (deltaX, deltaY) {
		return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	};

	var sendResultToTracker = function (currentSelected, results, modifytype) {
		if (!currentSelected || currentSelected.type !== 'image') {
			const eop = {
				who: 'error',
				type: 'error',
				content: 'You wanted to send the result of this roll to the turn tracker, but no valid token was selected!',
			};
			d20.textchat.incoming(false, eop);
		} else {
			// See if this token already has a turn.

			d20.Campaign.parentRef
				.child('campaign')
				.child('turnorder')
				.transaction((currentList) => {
					// Make sure our Backbone Model is up to date with the latest data.
					d20.Campaign.set('turnorder', currentList);

					const initlist = d20.Campaign.initiativewindow.cleanList();
					let foundexisting = false;

					if (results.total && results.total % 1 != 0) {
						results.total = parseFloat(results.total.toPrecision(12)); // ROUNDING ERROR BUGFIX
					}
					_.each(initlist, (listitem) => {
						if (listitem.id === currentSelected.model.id) {
							foundexisting = true;
							switch (modifytype) {
								case '+':
									listitem.pr = parseFloat(listitem.pr) + results.total;
									break;
								case '-':
									listitem.pr = parseFloat(listitem.pr) - results.total;
									break;
								default:
									listitem.pr = results.total;
							}
						}
					});
					if (!foundexisting) {
						initlist.push({
							id: currentSelected.model.id,
							pr: results.total,
							custom: '',
							_pageid: d20.Campaign.activePage().id,
						});
					}

					return JSON.stringify(initlist); // we return the new data
				});
		}
	};

	if (window.localStorage.getItem('colorTheme') === 'dark') {
		$('#textchat').addClass('sheet-darkmode');
	}
	d20.textchat.rawChatInput = function (op) {
		const finalop = _.extend(
			{
				who: d20.textchat.$speakingas.find('option:selected').text(),
				type: 'general',
				playerid: window.currentPlayer.id,
				content: '',
			},
			op,
		);
		if (d20.textchat.talktomyself) {
			d20.textchat.incoming(true, finalop);
		} else {
			const newid = fbref.push().key;
			fbref
				.child(newid)
				.setWithPriority(finalop, firebase.database.ServerValue.TIMESTAMP);
		}
	};

	const translateVariableToTokenOrCharacter = function (
		attrname,
		model,
		valtype,
	) {
		if (attrname.toLowerCase() == 'bar1') {
			return valtype == 'max' ? model.get('bar1_max') : model.get('bar1_value');
		}
		if (attrname.toLowerCase() == 'bar2') {
			return valtype == 'max' ? model.get('bar2_max') : model.get('bar2_value');
		}
		if (attrname.toLowerCase() == 'bar3') {
			return valtype == 'max' ? model.get('bar3_max') : model.get('bar3_value');
		}
		if (attrname.toLowerCase() == 'token_name') {
			return model.get('name');
		}
		if (attrname.toLowerCase() === 'token_id') {
			return model.id;
		}

		return undefined;

		// if(model.get("represents") !== "") {
		// character = d20.Campaign.characters.get(model.get("represents"));
		// if(attrname.toLowerCase() == "character_name") {
		// 	return character.get("name");
		// }
		// }
	};

	const handleDoChatInput = async (
		input,
		triggered_by = 'chatbox',
		listenerid = undefined,
		originalRollPromise = undefined,
	) => {
		if (!fbref) {
			console.log('No document!');
			return; // ERROR!
		}

		input = d20.utils.strip_tags(input);

		if (input != '') {
			d20.textchat.commandhistory.push(input);
			d20.textchat.commandhistory = _.last(d20.textchat.commandhistory, 20);
			d20.textchat.commandIndex = 0;

			const speakingas = d20.textchat.$speakingas.find('option:selected').val();
			let avatar = false;
			if (speakingas.indexOf('player') !== -1) {
				avatar = `/users/avatar/${window.currentPlayer.get('d20userid')}/30`;
			} else {
				const character = d20.Campaign.characters.get(speakingas.split('|')[1]);
				if (character) {
					avatar = character.get('avatar');
				}
			}

			let op = {
				who: d20.textchat.$speakingas.find('option:selected').text(),
				type: 'general',
				content: $.trim(input),
				playerid: window.currentPlayer.id,
				avatar,
			};

			if (listenerid) {
				op.listenerid = listenerid;
			}

			let noParseCommands = false;

			if (op.content.substring(0, 1) === '`') {
				noParseCommands = true;
				op.content = op.content.substring(1, op.content.length);
			}

			const selected = d20.engine.selected();
			if (selected.length > 0 && selected[0].model) {
				op.currentSelected = selected[0];
			}

			const macros = {};
			d20.Campaign.players.each((player) => {
				player.macros.each((shortcut) => {
					if (
						player.id == window.currentPlayer.id || shortcut.visibleToCurrentPlayer()
					) {
						macros[`#${shortcut.get('name')}`] = shortcut.get('action');
					}
				});
			});

			let queryCache = {};
			let targetCache = {};
			let prevMode = `${d20.engine.mode}`;

			// Resolve all abilities, variables, and macros, looping through both in case of nesting.
			const reg = /(#[^ \n]+)/gm;
			const abilreg = /(%{[^}]+})/gm;
			const optreg = /&{[^}]+}/;
			const varreg = /(@{[^}]+})/gm;
			let prev_resolved = '';

			let subpasses = 0;

			let makeSubstitutions = async () => {
				const charAttribs = charactersMentioned(op.content, varreg);
				const pendingAttribs = Object.values(charAttribs).reduce((promises, character) => {
					if (!character.attribs.backboneFirebase) {
						character.attribs.backboneFirebase = new BackboneFirebase(character.attribs);
						promises[character.id] = character.attribs.backboneFirebase.reference.once('value');
					}
					return promises;
				}, {});

				const charAbilities = charactersMentioned(op.content, abilreg);
				const pendingAbilities = Object.values(charAbilities).reduce((promises, character) => {
					if (!character.abilities.backboneFirebase) {
						character.abilities.backboneFirebase = new BackboneFirebase(character.abilities);
						promises[character.id] = character.abilities.backboneFirebase.reference.once('value');
					}
					return promises;
				}, {});

				await Promise.all([
					...Object.values(pendingAttribs),
					...Object.values(pendingAbilities),
				]);

				try {
					let origtoken;
					let waitOnTarget = false;
					let _squelch_errors = false;
					let actionHandled = false;

					/// Special case: This option has to be processed beofre we do substitutions.
					op.content = op.content.replace(/&{noerror}/g, (match) => {
						_squelch_errors = true;
						return ''; // take it out
					});

					op.content = op.content.replace(abilreg, (match) => {
						let abilid;
						let charid;
						let character;
						let ability;
						let charname;
						let abilname;
						let abilaction;
						let repsection;

						match = match.substring(2, match.length - 1);
						// Split off the potential roll id
						const firstSplit = match.split('||');
						match = firstSplit[0];
						const originalRollId = firstSplit[1];
						const s = match.split('|');

						if (s.length == 4) {
							abilid = s[1];
							charid = s[0];
							charname = s[2];
							abilname = s[3];
							character = d20.Campaign.characters.get(charid);
							if (character) {
								ability = character.abilities.get(abilid);
								abilaction = ability.get('action');
							}
						}

						if (s.length == 2) {
							charname = s[0];
							abilname = s[1];
						}

						// 3-argument target variant
						if (s.length == 3) {
							charname = s[0];
							abilname = s[2];
						}

						if (
							abilname.substring(0, 10) === 'repeating_' && !(d20.journal.customSheets && d20.journal.customSheets.availableRolls[abilname.toLowerCase()] !== undefined)
						) {
							const _reps = abilname.split('_');
							abilname = `repeating_${_reps[1]}_${_reps.slice(3).join('_')}`;
							repsection = `repeating_${_reps[1]}_${_reps[2]}_`;
						}

						if (charname.toLowerCase() == 'selected') {
							if (!op.currentSelected) {
								throw 'You attempted to use a roll command looking for the value of a selected token, but no tokens are selected.';
								return match;
							}

							if (op.currentSelected.model.get('represents') !== '') {
								character = d20.Campaign.characters.get(
									op.currentSelected.model.get('represents'),
								);
							} else {
								throw 'You attempted to use a roll command looking for a selected token ability, but the selected token does not represent a Character, and therefore has no abilities.';
								return match;
							}
						} else if (charname.toLowerCase() === 'target') {
							if (waitOnTarget || d20.engine.nextTargetCallback) {
								return `%{${match}}`;
							} // don't handle this one yet.

							let targetname = 'target';
							if (s.length > 2) {
								targetname = s[1];
								abilname = s[2];
							}

							if (!abilname) {
								throw 'Syntax Error: You must specify a valid ability to fetch from the target.';
							}

							d20.engine.nextTargetCallback = function (foundtarget) {
								if (foundtarget === false) {
									cleanupRoll();
									d20.engine.nextTargetCallback = false;
									return;
								}
								op.content = op.content.replace(
									/%\${currentTarget\|[^}]+}/,
									(targetmatch) => {
										const targetabil = targetmatch
											.split('|')[1]
											.replace('}', '');
										if (foundtarget.model.get('represents') !== '') {
											const targetchar = d20.Campaign.characters.get(
												foundtarget.model.get('represents'),
											);
											if (targetchar) {
												let foundval;
												targetchar.abilities.each((thisabil) => {
													if (
														thisabil.get('name').toLowerCase() == targetabil.toLowerCase()
													) {
														// pass it back through with a hard-coded character and ability id, since furthe processing is needed.
														foundval = `%{${targetchar.id}|${
															thisabil.id
														}|${targetchar.get('name')}|${thisabil.get(
															'name',
														)}}`;
													}
												});
												if (foundval !== undefined) return foundval;
												// Try for some further processing anyway.
												return `%{${targetchar.get('name')}|${targetabil}}`;
											}
											console.log(
												"Couldn't find character that represents this token.",
											);
										}
										if (!_squelch_errors) {
											const eop = {
												who: 'error',
												type: 'error',
												content: `No ability was found for targeted token by the name of ${targetabil}`,
											};
											d20.textchat.incoming(false, eop);
										}
										return match;
									},
								);
								d20.engine.nextTargetCallback = false;
								targetCache[targetname] = foundtarget;
								makeSubstitutions();
							};
							if (targetCache[targetname] !== undefined) {
								_.defer(() => {
									d20.engine.nextTargetCallback(targetCache[targetname]);
								});
							} else {
								setMode('targeting');
								$('#targetinginstructions .targetname').text(
									ucfirst(targetname),
								);
							}
							waitOnTarget = true;
							return `%\${currentTarget|${abilname}}`;
						}

						if (!character || !ability) {
							// Find char/attribute manually.
							if (!character) {
								d20.Campaign.characters.each((thischar) => {
									if (
										thischar.get('name').toLowerCase() == charname.toLowerCase() || thischar.id === charname
									) {
										character = thischar;
										return false;
									}
								});
							}

							if (!ability && character) {
								character.abilities.each((thisabil) => {
									if (
										thisabil.get('name').toLowerCase() == abilname.toLowerCase() || thisabil.id === abilname
									) {
										ability = thisabil;
										abilaction = ability.get('action');
										return false;
									}
								});
							}

							// Check for sheet rolls or action buttons
							if (
								!ability && character && d20.journal.customSheets
								&& d20.journal.customSheets.availableRolls && d20.journal.customSheets.availableActions
							) {
								const availableRoll = d20.journal.customSheets.availableRolls[abilname.toLowerCase()];
								const availableAction = d20.journal.customSheets.availableActions[abilname.toLowerCase()];
								if (availableRoll !== undefined) {
									ability = availableRoll;
									abilaction = ability;
								} else if (availableAction !== undefined) {
									// Need to prepend repeating section info, if present
									const finalAction = repsection ? repsection + availableAction : availableAction;
									d20.journal.notifyWorkersOfButtonClick(character.id, finalAction, {}, originalRollId);
									// this flag will prevent actually posting things in the chat,
									// since the action is just triggering a sheetworker
									// (which we've already done)
									actionHandled = true;
									return;
								}
							}
						}

						if (character && ability && character.currentPlayerControls()) {
							match = abilaction;
							// Substitute any attributes for the full-form.

							const _inSectionAttrs = {};
							if (repsection) {
								character.attribs.each((attrib) => {
									if (
										attrib.get('name').substring(0, repsection.length) === repsection
									) {
										_inSectionAttrs[
											attrib
												.get('name')
												.substring(repsection.length, attrib.get('name').length)
										] = true;
									}
								});
							}

							const subvarreg = /(@{[^}]+})/gm;
							match = match.replace(subvarreg, (submatch) => {
								const subvarname = submatch.substring(2, submatch.length - 1);
								const sms = subvarname.split('|');

								if (sms.length > 1 && sms[1] !== 'max') {
									return submatch; // it's already a full form, not relative, just return it.
								}
								const repsectionname = repsection !== undefined ? repsection.split('_')[1] : '';

								// Look for Nth repeating section variables
								if (
									sms[0].substring(0, 10) === 'repeating_' && sms[0].indexOf('$') !== -1
								) {
									const smssplit = sms[0].split('_');
									if (
										smssplit.length > 3 && smssplit[2] !== undefined && smssplit[2].substring(0, 1) === '$'
									) {
										const findIndex = parseInt(
											smssplit[2].replace('$', ''),
											10,
										);
										let possibleattribs = [];
										const searchkey = `${smssplit[0]}_${smssplit[1]}`;
										character.attribs.each((attrib) => {
											if (
												attrib
													.get('name')
													.toLowerCase()
													.substring(0, searchkey.length) === searchkey.toLowerCase()
											) {
												const _splitattribname = attrib.get('name').split('_');
												if (
													_splitattribname.length > 2 && _splitattribname[2] !== undefined
												) {
													possibleattribs.push(_splitattribname[2]);
												}
											}
										});
										possibleattribs = _.uniq(possibleattribs);
										possibleattribs = character.repeatingKeyOrder(
											possibleattribs,
											searchkey,
										);
										if (possibleattribs[findIndex] !== undefined) {
											smssplit[2] = possibleattribs[findIndex];
											sms[0] = smssplit.join('_');
										} else if (!_squelch_errors) {
											const eop = {
												who: 'error',
												type: 'error',
												content: `You tried to use the repeating section row at index ${findIndex} for ${searchkey}, but there doesn't seem to be a row at that index.`,
											};
											d20.textchat.incoming(false, eop);
										}
									}
								}

								// Check for variables in repeating sections
								if (repsection && _inSectionAttrs[sms[0]] !== undefined) {
									return `@{${character.get('name')}|${repsection}${sms[0]}${
										sms.length == 2 ? `|${sms[1]}` : ''
									}}`;
								}
								// It's a repeating section attribute we haven't defined yet but we have a default value for?
								if (
									repsection && d20.journal.customSheets && d20.journal.customSheets.availableAttributes[`repeating_${repsectionname}_${sms[0]}`.toLowerCase()] !== undefined && d20.journal.customSheets.availableAttributes[sms[0].toLowerCase()] === undefined
								) {
									return `@{${character.get('name')}|${repsection}${sms[0]}${
										sms.length == 2 ? `|${sms[1]}` : ''
									}}`;
								}
								return `@{${character.get('name')}|${sms[0]}${
									sms.length == 2 ? `|${sms[1]}` : ''
								}}`;
							});

							// Look for ~-style buttons that don't have character id's attached.
							match = match.replace(/\(~[^\)]+\)/g, (match) => {
								const s = match.split('|');
								if (s.length < 2) {
									let abilname = match.substring(2, match.length);
									if (
										repsection && abilname.substring(0, 10) === 'repeating_'
									) {
										const _splitabil = abilname.split('_');
										abilname = repsection + _splitabil.splice(2).join('_');
									}
									return `(~${character.id}|${abilname}`;
								}
								return match;
							});
						} else {
							if (!_squelch_errors) {
								const eop = {
									who: 'error',
									type: 'error',
									content: `No ability was found for %{${charname}|${abilname}}`,
								};
								d20.textchat.incoming(false, eop);
							}
							return match;
						}

						return match;
					});

					op.content = op.content.replace(reg, (match) => {
						if (macros[match] !== undefined) {
							return macros[match];
						}
						return match;
					});

					// TEMP: Redo lazy loading after resolving macro
					const charAttribs = charactersMentioned(op.content, varreg);
					const pendingAttribs = Object.values(charAttribs).reduce((promises, character) => {
						if (!character.attribs.backboneFirebase) {
							character.attribs.backboneFirebase = new BackboneFirebase(character.attribs);
							promises[character.id] = character.attribs.backboneFirebase.reference.once('value');
						}
						return promises;
					}, {});

					const charAbilities = charactersMentioned(op.content, abilreg);
					const pendingAbilities = Object.values(charAbilities).reduce((promises, character) => {
						if (!character.abilities.backboneFirebase) {
							character.abilities.backboneFirebase = new BackboneFirebase(character.abilities);
							promises[character.id] = character.abilities.backboneFirebase.reference.once('value');
						}
						return promises;
					}, {});

					await Promise.all([
						...Object.values(pendingAttribs),
						...Object.values(pendingAbilities),
					]);
					// END TEMP (pain)

					op.content = op.content.replace(varreg, (match) => {
						let attrid;
						let charid;
						let character;
						let attribute;
						let charname;
						let attrname;
						let repsection;

						match = match.substring(2, match.length - 1);
						const s = match.split('|');
						let valtype = 'current';
						let _overridePermissions = false;

						if (s.length == 4) {
							attrid = s[1];
							charid = s[0];
							charname = s[2];
							attrname = s[3];
							character = d20.Campaign.characters.get(charid);
							if (character) {
								attribute = character.attribs.get(attrid);
							}
						}

						if (!character) {
							charname = s[0];
							attrname = s[1];
							if (
								s.length > 2 && (`${s[2]}`.toLowerCase() == 'max' || `${s[3]}`.toLowerCase() == 'max')
							) {
								valtype = 'max';
							}

							if (charname.toLowerCase() == 'selected') {
								if (!op.currentSelected) {
									throw 'You attempted to use a roll command looking for the value of a selected token, but no tokens are selected.';
									return match;
								}

								const tokenvariable = translateVariableToTokenOrCharacter(
									attrname,
									op.currentSelected.model,
									valtype,
								);
								if (tokenvariable !== undefined) return tokenvariable;

								if (op.currentSelected.model.get('represents') !== '') {
									character = d20.Campaign.characters.get(
										op.currentSelected.model.get('represents'),
									);
									if (attrname.toLowerCase() === 'character_name') {
										return character.get('name');
									}
									if (attrname.toLowerCase() === 'character_id') return character.id;
								}
							} else if (charname.toLowerCase() === 'target') {
								if (waitOnTarget || d20.engine.nextTargetCallback) {
									return `@{${match}}`;
								} // don't handle this one yet.

								const prevMode = `${d20.engine.mode}`;
								let targetname = 'target';
								if (s.length > 2) {
									targetname = s[1];
									attrname = s[2];
								}

								if (!attrname) {
									throw 'Syntax Error: You must specify a valid attribute to fetch from the target.';
								}

								d20.engine.nextTargetCallback = async function (foundtarget) {
									if (foundtarget === false) {
										d20.engine.nextTargetCallback = false;
										cleanupRoll();
										// Reselect Original Tokens
										setTimeout(() => {
											if (d20.engine.mode != 'targeting') {
												for (let i = 0; i < origtoken.length; i++) {
													d20.engine.select(origtoken[i]);
												}
											}
										}, 500);
										return;
									}

									// Lazy load if necessary.
									const targetAttribs = d20.Campaign.characters.get(
										foundtarget?.model?.get('represents')
									)?.attribs;
									if (targetAttribs) {
										if (!targetAttribs.backboneFirebase) {
											targetAttribs.backboneFirebase = new BackboneFirebase(targetAttribs);
											await targetAttribs.backboneFirebase.reference.once('value');
										}
									}
									op.content = op.content.replace(
										/@\${currentTarget\|[^}]+}/,
										(targetmatch) => {
											const targetvar = targetmatch
												.split('|')[1]
												.replace('}', '');
											const tokenvariable = translateVariableToTokenOrCharacter(
												targetvar,
												foundtarget.model,
												valtype,
											);
											if (tokenvariable !== undefined) return tokenvariable;
											if (foundtarget.model.get('represents') !== '') {
												const targetchar = d20.Campaign.characters.get(
													foundtarget.model.get('represents'),
												);
												if (targetchar) {
													if (attrname.toLowerCase() === 'character_name') {
														return targetchar.get('name');
													}
													if (attrname.toLowerCase() === 'character_id') return targetchar.id;
													return `@{TARGET:${targetname}|${targetvar}${
														valtype === 'max' ? '|max' : ''
													}}`;
												}
												console.log(
													"Couldn't find character that represents this token.",
												);
											}
											if (!_squelch_errors) {
												const eop = {
													who: 'error',
													type: 'error',
													content: `No attribute was found for targeted token by the name of ${targetvar}`,
												};
												d20.textchat.incoming(false, eop);
											}
											return '';
										},
									);
									d20.engine.nextTargetCallback = false;
									targetCache[targetname] = foundtarget;
									makeSubstitutions();
									// Reselect Original Tokens
									setTimeout(() => {
										if (d20.engine.mode != 'targeting') {
											for (let i = 0; i < origtoken.length; i++) {
												d20.engine.select(origtoken[i]);
											}
										}
									}, 500);
								};
								if (targetCache[targetname] !== undefined) {
									_.defer(() => {
										d20.engine.nextTargetCallback(targetCache[targetname]);
									});
								} else {
									// Remember original tokens
									if (d20.engine.mode != 'targeting') {
										origtoken = d20.engine.selected();
									}
									setMode('targeting');
									$('#targetinginstructions .targetname').text(
										ucfirst(targetname),
									);
								}
								waitOnTarget = true;
								return `@\${currentTarget|${attrname}}`;
							} else if (charname.toLowerCase() === 'tracker') {
								const currentorder = d20.Campaign.initiativewindow.cleanList();
								let foundvalue;
								_.each(currentorder, (orderitem) => {
									if (
										orderitem.custom.toLowerCase() === attrname.toLowerCase()
									) {
										foundvalue = orderitem.pr;
										return false;
									}
									if (orderitem.id) {
										const tokenobj = d20.Campaign.activePage().thegraphics.get(
											orderitem.id,
										);
										if (
											tokenobj && tokenobj.get('name').toLowerCase() === attrname.toLowerCase()
										) {
											foundvalue = orderitem.pr;
											return false;
										}
									}
								});

								if (foundvalue !== undefined) return foundvalue;

								if (!_squelch_errors) {
									var eop = {
										who: 'error',
										type: 'error',
										content: `No turn order item was found by the name ${attrname}`,
									};
									d20.textchat.incoming(false, eop);
								}
								return '';
							}
						}

						if (attrname.substring(0, 10) === 'repeating_') {
							const _reps = attrname.split('_');
							repsection = `repeating_${_reps[1]}_${_reps[2]}_`;
						}

						if (!character || !attribute) {
							// Find char/attribute manually.

							if (
								!character && charname.substring(0, 7) === 'TARGET:' && targetCache[charname.substring(7, charname.length)]
							) {
								character = d20.Campaign.characters.get(
									targetCache[charname.substring(7, charname.length)].model.get(
										'represents',
									),
								);
								_overridePermissions = true;
							}

							if (!character) {
								d20.Campaign.characters.each((thischar) => {
									if (
										thischar.get('name').toLowerCase() == charname.toLowerCase()
									) {
										character = thischar;
										return false;
									}
								});
							}

							if (!attribute && character) {
								// Look for Nth repeating section variables
								if (
									attrname.substring(0, 10) === 'repeating_' && attrname.indexOf('$') !== -1
								) {
									const smssplit = attrname.split('_');
									if (
										smssplit.length > 3 && smssplit[2] !== undefined && smssplit[2].substring(0, 1) === '$'
									) {
										const findIndex = parseInt(
											smssplit[2].replace('$', ''),
											10,
										);
										let possibleattribs = [];
										const searchkey = `${smssplit[0]}_${smssplit[1]}`;
										character.attribs.each((attrib) => {
											if (
												attrib
													.get('name')
													.toLowerCase()
													.substring(0, searchkey.length) === searchkey.toLowerCase()
											) {
												const _splitattribname = attrib.get('name').split('_');
												if (
													_splitattribname.length > 2 && _splitattribname[2] !== undefined
												) {
													possibleattribs.push(_splitattribname[2]);
												}
											}
										});
										possibleattribs = _.uniq(possibleattribs);
										possibleattribs = character.repeatingKeyOrder(
											possibleattribs,
											searchkey,
										);
										if (possibleattribs[findIndex] !== undefined) {
											smssplit[2] = possibleattribs[findIndex];
											attrname = smssplit.join('_');
										} else if (!_squelch_errors) {
											var eop = {
												who: 'error',
												type: 'error',
												content: `You tried to use the repeating section row at index ${findIndex} for ${searchkey}, but there doesn't seem to be a row at that index.`,
											};
											d20.textchat.incoming(false, eop);
										}
									}
								}

								attribute = character.attribs.find(
									(thisattrib) => thisattrib.get('name').toLowerCase() === attrname.toLowerCase(),
								);
							}
						}

						if (!character) {
							var eop = {
								who: 'error',
								type: 'error',
								content: `No character was found for '${charname}'`,
							};
							d20.textchat.incoming(false, eop);

							return match;
						}

						const _inSectionAttrs = {};
						if (repsection) {
							character.attribs.each((attrib) => {
								if (
									attrib.get('name').substring(0, repsection.length) === repsection
								) {
									_inSectionAttrs[
										attrib
											.get('name')
											.substring(repsection.length, attrib.get('name').length)
									] = true;
								}
							});
						}

						const _substituteShortForms = function (thiscommand) {
							// Substitute any attributes for the full-form.
							const subvarreg = /(@{[^}]+})/gm;
							thiscommand = `${thiscommand}`.replace(subvarreg, (submatch) => {
								const subvarname = submatch.substring(2, submatch.length - 1);
								const sms = subvarname.split('|');

								if (sms.length > 1 && sms[1] !== 'max') {
									return submatch; // it's already a full form, not relative, just return it.
								}

								const repsectionname = repsection !== undefined ? repsection.split('_')[1] : '';

								// Check for variables in repeating sections
								if (repsection && _inSectionAttrs[sms[0]] !== undefined) {
									return `@{${
										_overridePermissions ? charname : character.get('name')
									}|${repsection}${sms[0]}${
										sms.length == 2 ? `|${sms[1]}` : ''
									}}`;
								}
								// It's a repeating section attribute we haven't defined yet but we have a default value for?
								if (
									repsection && d20.journal.customSheets && d20.journal.customSheets.availableAttributes[`repeating_${repsectionname}_${sms[0]}`.toLowerCase()] !== undefined && d20.journal.customSheets.availableAttributes[sms[0].toLowerCase()] === undefined
								) {
									return `@{${
										_overridePermissions ? charname : character.get('name')
									}|${repsection}${sms[0]}${
										sms.length == 2 ? `|${sms[1]}` : ''
									}}`;
								}
								return `@{${
									_overridePermissions ? charname : character.get('name')
								}|${sms[0]}${sms.length == 2 ? `|${sms[1]}` : ''}}`;
							});

							// Look for ~-style buttons that don't have character id's attached.
							thiscommand = thiscommand.replace(/\(~[^\)]+\)/g, (match) => {
								const s = match.split('|');
								if (s.length < 2) {
									let abilname = match.substring(2, match.length);
									if (
										repsection && abilname.substring(0, 10) === 'repeating_'
									) {
										const _splitabil = abilname.split('_');
										abilname = repsection + _splitabil.splice(2).join('_');
									}
									return `(~${character.id}|${abilname}`;
								}
								return match;
							});
							return thiscommand;
						};

						if (attrname === 'character_name') {
							return character.get('name');
						}
						if (attrname === 'character_id') {
							return character.id;
						}

						let _possibleAnswer;

						if (
							attribute && (character.currentPlayerControls() || _overridePermissions === true)
						) {
							if (valtype == 'max') {
								_possibleAnswer = attribute.get('max');
							} else {
								_possibleAnswer = attribute.get('current');
							}
						}

						if (_possibleAnswer !== undefined && _possibleAnswer !== '') {
							// Definitely return this.
							return _substituteShortForms(_possibleAnswer);
						}

						// Only bother with the below if we really need it.

						let _defaultAnswer;
						let _defaultKey = (
							attrname + (valtype === 'max' ? '_max' : '')
						).toLowerCase();

						// If we are trying to fetch an attribute in a repeating section, we have to check for the default value without the ROW ID.
						// e.g. if it's @{repeating_spells_-ABC12_SpellName} the default value is actually stored as "repeating_spells_SpellName" since it's shared across all repeating section rows.
						if (
							_defaultKey.substring(0, 10) === 'repeating_' && (!d20.journal.customSheets || d20.journal.customSheets.availableAttributes[_defaultKey] === undefined)
						) {
							const _dks = _defaultKey.split('_');
							if (!isNaN(_dks[2]) || _dks[2].substring(0, 1) === '-') {
								_dks.splice(2, 1);
								_defaultKey = _dks.join('_');
							}
						}

						if (
							(character.currentPlayerControls() || _overridePermissions === true) && d20.journal.customSheets && d20.journal.customSheets.availableAttributes && d20.journal.customSheets.availableAttributes[_defaultKey] !== undefined
						) {
							const _customSheetAttr = d20.journal.customSheets.availableAttributes[_defaultKey];
							_defaultAnswer = _customSheetAttr;
						}

						// Is it blank, but we don't have a better default?
						if (_possibleAnswer !== undefined && _defaultAnswer === undefined) {
							return _substituteShortForms(_possibleAnswer);
						}
						if (_defaultAnswer !== undefined) {
							return _substituteShortForms(_defaultAnswer);
						}

						// We fell through all the way and found nothing!
						if (!_squelch_errors) {
							var eop = {
								who: 'error',
								type: 'error',
								content: `No attribute was found for @{${charname}|${attrname}}`,
							};

							d20.textchat.incoming(false, eop);
						}

						return match;
					});

					subpasses++;

					if (waitOnTarget) return;

					// This flag indicates we've completely handled this action
					// so we don't want to put anything in the chat
					if (actionHandled) return;

					if (op.content == prev_resolved || subpasses > 99) {
						processQueries();
					} else {
						prev_resolved = op.content;
						makeSubstitutions();
					}
				} catch (e) {
					const eop = {
						who: 'error',
						type: 'error',
						content: `${e}`,
					};
					d20.textchat.incoming(false, eop);
				}
			};

			let processMultiOps = function () {
				// Allow having \n inside of roll templates.
				const bracketregex = /{{[\s\S]*?}}/g;

				op.content = op.content.replace(bracketregex, (match) => match.replace(/\n/g, '%NEWLINE%'));

				const multicommands = op.content.split('\n');

				let orderedops = [];
				let finishedops = 0;

				const checkFinishedOps = function () {
					if (!orderedops || finishedops < orderedops.length) {
						return;
					}

					const allPromises = [];

					for (let j = 0; j < orderedops.length; j++) {
						if (orderedops[j] === 'noop') {
							continue;
						}

						// This promise will allow us to pause here and wait for computed dice results, if needed
						const rollPromise = new Promise((resolve) => {
							const chatOp = orderedops[j];
							if (originalRollPromise) {
								// If this roll was initiated with the 'startRoll' sheetworker function
								// We need to pause here and wait for the modified results from the 'finishRoll' function

								// Reformat results from dice server
								const processedResults = (0,_util_textchatUtils__WEBPACK_IMPORTED_MODULE_4__.parseRollData)(chatOp);
								// Create a new promise that will be resolved with the 'finishRoll' sheetworker function
								const finalRollPromise = (0,_util_textchatUtils__WEBPACK_IMPORTED_MODULE_4__.createRollPromise)(d20.journal.pendingRollPromises, originalRollPromise.promiseId);
								// This will resolve the initial roll promise and send the results from the dice server
								// to the sheetworker
								originalRollPromise.resolve({
									rollId: finalRollPromise.promiseId,
									results: processedResults,
								});
								// This promise will be resolved when the sheet calls the finishRoll function,
								// And will include the final roll string, along with the custom computed roll results
								finalRollPromise.promise.then((results) => {
									// Mark the promise as resolved, so that it doesn't get timed out
									finalRollPromise.resolved = true;
									// Add the computed result to each roll, if provided
									(0,_util_textchatUtils__WEBPACK_IMPORTED_MODULE_4__.addComputedResults)(chatOp, results.rollResults, d20.utils.strip_tags);
									// After we've modified the roll with our new information
									// resolve to send it to firebase
									resolve(chatOp);
								}).catch(() => {
									// If we're rejected, it means we've timed out. Post the roll and a message that
									// We never got the results back. This helps prevent 'swallowing' undesirable roll results
									chatOp.content = `${i18n('sheetworker_roll_not_finished')} ${chatOp.content}`;
									resolve(chatOp);
								});
							} else {
								// If this roll wasn't initiated with the 'startRoll' sheetworker function
								// Resolve immediately to send to firebase as usual
								resolve(chatOp);
							}
						}).then((chatOp) => {
							if (chatOp._fbid) {
								const _opid = chatOp._fbid;
								delete chatOp._fbid;
								if (d20.textchat.talktomyself) {
									chatOp.id = _opid;
									chatOp.timestamp = new Date().getTime();
									d20.textchat.incoming(true, chatOp);
								} else {
									sendGAChatEvent(chatOp);
									fbref
										.child(_opid)
										.setWithPriority(
											chatOp,
											firebase.database.ServerValue.TIMESTAMP,
										);
								}
							} else if (d20.textchat.talktomyself) {
								chatOp.id = fbref.push().key;
								chatOp.timestamp = new Date().getTime();
								sendGAChatEvent(chatOp);
								d20.textchat.incoming(true, chatOp);
							} else {
								const newid = fbref.push().key;
								sendGAChatEvent(chatOp);
								fbref
									.child(newid)
									.setWithPriority(chatOp, firebase.database.ServerValue.TIMESTAMP);
							}
						});

						allPromises.push(rollPromise);
					}

					// Wait for cleanup until all rolls have finished
					Promise.all(allPromises).then(() => {
						cleanupRoll();
						orderedops = null;
					});
				};

				let i = 0;

				_.each(multicommands, (splitcontent) => {
					orderedops.push(false);
					const tempop = _.clone(op);
					tempop.content = splitcontent;

					tempop.content = tempop.content.replace(/%NEWLINE%/g, '<br/>\n');

					const idx = i + 0;
					let _userolltemplate;

					const callback = function (thisop) {
						if (typeof thisop === 'object') {
							// Make sure our inline rolls survived.
							if (tempop.inlinerolls) {
								thisop.inlinerolls = tempop.inlinerolls;
							}

							if (_userolltemplate) {
								thisop.rolltemplate = _userolltemplate;
							}

							// Delete unneeded info
							delete thisop.currentSelected;
							delete thisop.opts;

							if (thisop.type == 'api') {
								// Add "Selected" info.
								const selected = d20.engine.selected();
								if (selected && selected.length > 0) {
									thisop.selected = [];
									_.each(selected, (anobj) => {
										if (anobj.model == undefined) return true; // next
										thisop.selected.push({
											_type: anobj.model.get('type') == 'image' ? 'graphic' : anobj.model.get('type'),
											_id: anobj.model.id,
										});
									});
								}
							}
						}
						orderedops[idx] = thisop;
						finishedops++;
						_.defer(() => {
							checkFinishedOps();
						});
					};

					const inlineRollsCompleteCallback = function () {
						// Check for options.
						if (!noParseCommands) {
							tempop.content = tempop.content.replace(optreg, (match) => {
								match = match.substring(2, match.length - 1);
								if (!tempop.opts) tempop.opts = {};
								const eachopt = match.split(',');
								for (let oi = 0; oi < eachopt.length; oi++) {
									const optsplit = eachopt[oi].split(':');
									tempop.opts[optsplit[0]] = optsplit.length > 1 ? optsplit[1] : true;
								}
								return '';
							});
						}

						if (tempop.opts && tempop.opts.template !== undefined) {
							_userolltemplate = tempop.opts.template;
						}

						if (tempop.content.substring(0, 2) === '//') {
							callback('noop');
						} else if (
							!noParseCommands && tempop.content.substring(0, 1) == '/'
						) {
							postProcessOp(tempop, callback);
						} else {
							if (!noParseCommands && tempop.content.substring(0, 1) == '!') {
								tempop.type = 'api';
							}

							callback(tempop);
						}
					};

					if (!noParseCommands) {
						processInlineRolls(tempop, inlineRollsCompleteCallback);
					} else {
						inlineRollsCompleteCallback();
					}

					d20.textchat.diceengine.flushRemoteQueue();

					i++;
				});
			};

			var processInlineRolls = function (thisop, thisopcallback) {
				// Resolve all inline roll results.

				const inlinerollreg = /(\[\[.+\]\](?!\]))/gm;
				const inlinerolls = [];
				let inlinerollcount = 0;
				let inlinerollscompleted = 0;

				const checkFinishedInlineRolls = function () {
					if (inlinerollscompleted < inlinerollcount) return;
					thisop.inlinerolls = inlinerolls;
					thisopcallback();
				};

				const _findInlineRolls = function (subcontent, inlinecallback) {
					const stringStarts = [];
					const ignoreBracketsAt = [];
					let ignorenext = false;
					let incomment = false;
					let levelsdeep = 0;
					let stopparsing = false;

					while (!stopparsing) {
						for (var i = 0; i < subcontent.length; i++) {
							if (subcontent[i] === '[') {
								if (subcontent[i - 1] === '[') {
									// Started one!

									levelsdeep++;

									if (subcontent[i - 2] === '$') {
										// This is a result, not an actual roll.
										ignorenext = true;
										continue;
									} else {
										stringStarts.push(i - 1);
									}
								} else if (subcontent[i + 1] === '[') {
									// Do nothing, we'll get it next loop
								} else {
									// Comment
									incomment = true;
								}
							} else if (subcontent[i] === ']') {
								if (incomment) {
									incomment = false;
									ignoreBracketsAt.push(i);
									continue;
								}

								if (
									subcontent[i - 1] === ']' && ignoreBracketsAt.indexOf(i - 1) === -1
								) {
									// Stopped one!

									levelsdeep--;

									if (ignorenext) {
										ignorenext = false;
										continue;
									}

									var startedAt = stringStarts.slice(-1)[0];
									var rollstring = subcontent.substring(startedAt, i + 1);

									if (rollstring.indexOf('$[[') !== -1) {
										continue;
									}

									(function () {
										const myinlinerollindex = inlinerollcount + 0;
										const mylevelsdeep = levelsdeep + 0;
										inlinerollcount++; // global counter

										subcontent = `${subcontent.substring(
											0,
											startedAt,
										)}$[[${myinlinerollindex}]]${subcontent.substring(
											i + 1,
											subcontent.length,
										)}`;

										thisop.content = subcontent;

										_processRoll(rollstring, myinlinerollindex, () => {
											if (mylevelsdeep > 0) {
												// We're a nested roll, so substitute in the result value *immediately*.
												thisop.content = thisop.content.replace(
													`$[[${myinlinerollindex}]]`,
													inlinerolls[myinlinerollindex].results.total,
												);
											}

											inlinecallback();
										});
									}());

									if (levelsdeep > 0) {
										d20.textchat.diceengine.flushRemoteQueue();
										return;
									}
									break; // this will allow us to re-start our loop to get an accurate length count since a substitution has been made.
								}
							}
						}

						stopparsing = true; // if we didn't break, we didn't do any subsitutions, so fall through completely and finish.
					}

					// Made it all the way through? Nothing left to do!
					inlinecallback(subcontent);
				};

				var _processRoll = function (match, myinlinerollindex, rollcallback) {
					match = $.trim(match.substring(2, match.length - 2));

					const inlineopts = {};

					// Check for options.
					match = match.replace(optreg, (optmatch) => {
						optmatch = optmatch.substring(2, optmatch.length - 1);
						const eachopt = optmatch.split(',');
						for (let oi = 0; oi < eachopt.length; oi++) {
							const optsplit = eachopt[oi].split(':');
							inlineopts[optsplit[0]] = optsplit.length > 1 ? optsplit[1] : true;
						}
						return '';
					});

					d20.textchat.diceengine.process(
						match,
						(results, rollid, signature, tdseed) => {
							d20.textchat.globalrolled++;

							if (results.rolls && results.rolls.length > 0) {
								try {
									_.each(results.rolls, (roll) => {
										if (roll.table) {
											if (!d20.utils.stattracker.rolltables) {
												d20.utils.stattracker.rolltables = true;
											}

											const table = d20.Campaign.rollabletables.findTableByName(
												roll.table,
											);
											const weighted = table.getWeightedArray();
											if (table) {
												_.each(roll.results, (result) => {
													result.tableItem = table.tableitems
														.get(weighted[result.tableidx])
														.toJSON();
												});
											}
										}
									});
								} catch (e) {
									console.log('ERROR matching table');
									console.log(e);
								}
							}

							inlinerolls[myinlinerollindex] = {
								expression: match,
								results,
								signature,
								rollid,
							};

							if (tdseed) {
								inlinerolls[myinlinerollindex].tdseed = tdseed;
							}

							if (inlineopts.tracker) {
								sendResultToTracker(
									thisop.currentSelected,
									results,
									inlineopts.tracker,
								);
							}

							inlinerollscompleted++;

							rollcallback();
						},
					);
				};

				let prevstring = '';

				var inlinefinalcallback = function (newcontent) {
					if (prevstring !== thisop.content) {
						prevstring = thisop.content;
						_findInlineRolls(`${thisop.content}`, inlinefinalcallback);
					} else {
						checkFinishedInlineRolls();
					}
				};

				_findInlineRolls(`${thisop.content}`, inlinefinalcallback);
			};

			const sendGAChatEvent = (message) => {
				let player_display_name = window.currentPlayer.attributes.displayname;
				if (window.is_gm) {
					player_display_name += ' (GM)';
				}
				const player_selected = window.currentPlayer.attributes.speakingas === '' || window.currentPlayer.attributes.speakingas.split('|')[0] === 'player';
				const ooc = !player_selected && player_display_name === message.who;
				const speakingas = player_display_name === message.who ? 'player' : 'character';
				const selected_display_name = player_selected
					? player_display_name
					: d20.Campaign.characters.get(
						window.currentPlayer.attributes.speakingas.split('|')[1],
					).attributes.name;
				const custom_speakingas = message.who !== selected_display_name && !ooc;

				let event_action = message.type === 'whisper' && message.target === 'gm' ? 'gm_whisper' : message.type;
				if (d20.textchat.talktomyself) {
					event_action = 'talktomyself';
				}
				if (ooc) {
					event_action = 'ooc';
				} else if (custom_speakingas) {
					event_action = 'custom_as';
				}

				ga('send', {
					hitType: 'event',
					eventCategory: window.is_gm ? 'GmChatInput' : 'ChatInput',
					eventAction: event_action,
					eventLabel: triggered_by,
				});
				if (!d20.textchat.talktomyself) {
					ga('send', {
						hitType: 'event',
						eventCategory: 'SpeakingAs',
						eventAction: event_action,
						eventLabel: speakingas,
					});
				}
			};

			// Resolve all query variables.

			const queryreg = /(\?{[^}]+})/m;
			let numqueries = 0;

			var processQueries = function () {
				let foundquery = false;
				op.content = op.content.replace(queryreg, (match) => {
					if (numqueries > 99) return match;

					foundquery = true;
					numqueries++;

					match = $.trim(match.substring(2, match.length - 1));
					const ms = match.split('|');
					match = ms[0];

					if (queryCache[match] !== undefined) {
						_.defer(() => {
							processQueries();
						});
						return queryCache[match];
					}

					if (ms.length <= 2) {
						var $querydialog = $(
							`<div><p style='font-size: 1.15em;'><strong>${d20.utils.strip_tags(
								match,
							)}:</strong> <input type='text' style='width: 75px; margin-left: 5px;'></p></div>`,
						);
					} else {
						const options = [];
						ms.each((eachopt) => {
							const opt = eachopt.split(',');
							const optlabel = opt[0];
							let optvalue = opt[1] ? opt[1] : opt[0];
							optvalue = optvalue.replace(/'/g, '&#39');

							if (opt != match) {
								options.push(
									`<option value='${d20.utils.strip_tags(
										optvalue,
									)}'>${d20.utils.strip_tags(optlabel)}</option>`,
								);
							}
						});
						var $querydialog = $(
							`<div><p style='font-size: 1.15em;'><strong>${d20.utils.strip_tags(
								match,
							)}:</strong> <select style='width: 150px; margin-left: 5px;'>${options.join(
								'',
							)}</select></p></div>`,
						);
					}

					$querydialog.dialog({
						title: 'Input Value',
						beforeClose() {
							return false;
						},
						buttons: {
							Submit() {
								if (ms.length < 3) {
									queryCache[match] = $querydialog.find('input').val();
									op.content = op.content.replace(
										'?${1}',
										$querydialog.find('input').val(),
									);
								} else {
									queryCache[match] = $querydialog.find('select').val();
									op.content = op.content.replace(
										'?${1}',
										$querydialog.find('select').val(),
									);
								}
								$querydialog.off();
								$querydialog.dialog('destroy').remove();
								processQueries();
								d20.textchat.$textarea.focus();
							},
							Cancel() {
								$querydialog.off();
								$querydialog.dialog('destroy').remove();
								cleanupRoll();
							},
						},
					});
					$querydialog.on('keydown', 'input, select', (e) => {
						if (e.which == 13) {
							if (ms.length < 3) {
								queryCache[match] = $querydialog.find('input').val();
								op.content = op.content.replace(
									'?${1}',
									$querydialog.find('input').val(),
								);
							} else {
								queryCache[match] = $querydialog.find('select').val();
								op.content = op.content.replace(
									'?${1}',
									$querydialog.find('select').val(),
								);
							}
							$querydialog.off();
							$querydialog.dialog('destroy').remove();
							processQueries();
							e.stopPropagation();
							e.preventDefault();
							d20.textchat.$textarea.focus();
						}
					});
					_.defer(() => {
						if (ms.length <= 2) {
							if (ms.length === 2) {
								$querydialog
									.find('input')
									.val(ms[1])
									.select();
							}
							$querydialog.find('input').focus();
						} else {
							// Alternate way of doing it: Highlihgt the Submit button so Enter will press it.
							// $querydialog.parent().find(".ui-dialog-buttonpane button:first-child").focus();
							// CUrent way of doing it: Focus the select element.
							$querydialog.find('select').focus();
						}
					});
					return '?${1}';
				});

				if (!foundquery) {
					processMultiOps();
				}
			};

			var cleanupRoll = function () {
				makeSubstitutions = null;
				processInlineRolls = null;
				processMultiOps = null;
				processQueries = null;
				const inlinerolls = null;
				op = null;
				prev_resolved = null;
				queryCache = null;
				targetCache = null;
				if (d20.engine.mode !== prevMode) {
					setMode(prevMode);
				}
				prevMode = null;
			};

			if (noParseCommands) {
				processMultiOps();
			} else {
				makeSubstitutions();
			}
		}
	};

	d20.textchat.doChatInput = handleDoChatInput;

	$('#textchat-input').on('click', 'button', () => {
		const input = $.trim(d20.textchat.$textarea.val());

		d20.textchat.doChatInput(input);

		d20.textchat.$textarea.val('').focus();
	});

	let lastBroadcastTyping = false;

	const broadcastTyping = function (showas) {
		const ctime = new Date().getTime();

		if (lastBroadcastTyping && ctime - lastBroadcastTyping < 3000) {
			return;
		}

		if (d20.textchat.talktomyself) {
			return;
		}

		lastBroadcastTyping = ctime;
		d20.textchat.sendShout({
			type: 'istyping',
			playerid: window.currentPlayer.id,
			content: showas,
			time: new Date().getTime(),
		});
	};

	d20.textchat.$textarea.bind('keyup', function () {
		let curval = $(this).val();
		if (curval.length > 1 && curval.substring(0, 1) != '#') {
			let showas = false;
			if (
				curval.substring(0, 4) === '/as ' || curval.substring(0, 6) === '/emas '
			) {
				curval = curval.replace('/as ', '').replace('/emas ', '');

				const numspaces = curval.match(/ /g);
				if (numspaces == null || numspaces.length < 2) return;

				const numquotes = curval.match(/"/g);
				if (curval[0] === '"' && numquotes !== null && numquotes.length < 2) return;

				const match = curval.match(/\w+|"[^"]+"/);

				if (match != null && match.length && match.length > 0) {
					showas = match[0][0] === '"' ? match[0].substring(1, match[0].length - 1) : match[0];
				}
			} else if (
				curval.substring(0, 5) === '/ooc ' || curval.substring(0, 3) === '/o ' || curval.substring(0, 6) === '/desc ' || curval.substring(0, 4) === '/em ' || curval.substring(0, 4) === '/me ' || curval.substring(0, 3) === '/e '
			) {
				showas = d20.textchat.$speakingas.find('option:first-child').text();
			} else if (curval.substring(0, 1) !== '/') {
				showas = d20.textchat.$speakingas.find('option:selected').text();
			}

			if (showas) {
				broadcastTyping(showas);
			}
		}
	});

	d20.textchat.$textarea.bind('keydown', function (e) {
		if (e.which === 13) {
			if (autoCompleteOpen) {
				return false;
			}
			if (e.shiftKey === true) {
				return;
			}
			$(this)
				.parent()
				.find('button')
				.trigger('click');
			e.preventDefault();
		}
	});

	d20.textchat.$textarea.bind('keyup', 'up', function () {
		const currentcommand = d20.textchat.commandhistory[d20.textchat.commandhistory.length + d20.textchat.commandIndex
		];
		if ($(this).val() == '' || $(this).val() == currentcommand) {
			if (
				Math.abs(d20.textchat.commandIndex) < d20.textchat.commandhistory.length + 1
			) {
				d20.textchat.commandIndex = d20.textchat.commandIndex - 1;
			}
			$(this).val(
				d20.textchat.commandhistory[
					d20.textchat.commandhistory.length + d20.textchat.commandIndex
				],
			);
		}
	});

	d20.textchat.$textarea.bind('keyup', 'down', function () {
		const currentcommand = d20.textchat.commandhistory[d20.textchat.commandhistory.length + d20.textchat.commandIndex
		];
		if ($(this).val() == '' || $(this).val() == currentcommand) {
			if (d20.textchat.commandIndex < 0) {
				d20.textchat.commandIndex = d20.textchat.commandIndex + 1;
			}
			$(this).val(
				d20.textchat.commandhistory[
					d20.textchat.commandhistory.length + d20.textchat.commandIndex
				],
			);
		}
	});

	// Defines for the example the match to take which is any word (with Umlauts!!).
	const _leftMatch = function (string, area) {
		return string.substring(0, area.selectionStart).match(/[\wäöüÄÖÜß#%{]+$/);
	};

	const _setCursorPosition = function (area, pos) {
		if (area.setSelectionRange) {
			area.setSelectionRange(pos, pos);
		} else if (area.createTextRange) {
			const range = area.createTextRange();
			range.collapse(true);
			range.moveEnd('character', pos);
			range.moveStart('character', pos);
			range.select();
		}
	};

	d20.textchat.$textarea.autocomplete({
		delay: 100,
		autoFocus: true,
		position: {
			my: 'left top',
			at: 'left bottom',
		},
		source(request, response) {
			let str = _leftMatch(request.term, d20.textchat.$textarea[0]);
			str = str != null ? str[0] : '';

			if (str[0] === '%' && str[1] !== '{') {
				str = `%{${str.substring(1, str.length)}`;
			}

			if (str.substring(0, 1) == '#') {
				var shortcuts = [];
				d20.Campaign.players.each((player) => {
					player.macros.each((shortcut) => {
						if (shortcut.get('name') == '') {
							return true; // next
						}
						if (
							player.id == window.currentPlayer.id || shortcut.visibleToCurrentPlayer()
						) {
							shortcuts.push(`#${shortcut.get('name')}`);
						}
					});
				});
				var results = $.ui.autocomplete.filter(shortcuts, str);
				response(results);
			} else if (
				request.term.substring(0, 3) == '/w ' && request.term.split(' ').length < 3
			) {
				var results = $.ui.autocomplete.filter(
					_.union(
						['gm'],
						d20.Campaign.players.map((p) => p.get('displayname').split(' ')[0]),
						d20.Campaign.characters.map((p) => {
							const injournals = p.get('inplayerjournals').split(',');
							if (
								window.is_gm || _.indexOf(injournals, 'all') !== -1 || (window.currentPlayer && _.indexOf(injournals, window.currentPlayer.id) !== -1)
							) {
								return p.get('name').split(' ')[0];
							}
							return false;
						}),
					),
					str,
				);
				response(results);
			} else if (str.substring(0, 2) === '%{') {
				var shortcuts = [];
				d20.Campaign.characters.each((character) => {
					if (!character.currentPlayerControls()) return;
					character.abilities.each((abil) => {
						if (
							abil
								.get('name')
								.toLowerCase()
								.indexOf(str.substring(2, str.lenght).toLowerCase()) !== -1
						) {
							shortcuts.push(`%{${character.get('name')}|${abil.get('name')}}`);
						}
					});
				});

				response(shortcuts);
			} else {
				response([]);
			}
		},
		// minLength: 2, // does have no effect, regexpression is used instead
		focus() {
			// prevent value inserted on focus
			return false;
		},
		// Insert the match inside the ui element at the current position by replacing the matching substring
		select(event, ui) {
			ui.item.value += ' ';
			const m = _leftMatch(this.value, this)[0];
			const beg = this.value.substring(0, this.selectionStart - m.length);
			this.value = beg + ui.item.value + this.value.substring(this.selectionStart, this.value.length);
			const pos = beg.length + ui.item.value.length;
			_setCursorPosition(this, pos);
			event.preventDefault();
			return false;
		},
		search(event, ui) {
			const m = _leftMatch(this.value, this);
			return m != null;
		},

		open() {
			autoCompleteOpen = true;
		},

		close() {
			setTimeout(() => {
				autoCompleteOpen = false;
			}, 250);
		},
	});

	const $content = $('#textchat .content');

	d20.textchat.incoming = function (pos, op, noremove, checkForExisting) {
		let template_name = op.type;

		if (op.type === 'api') {
			return;
		}

		// Prevent templates which expect tiemstamps from breaking.
		if (op.timestamp === null) {
			op.timestamp = '';
		} else {
			op.realtimestamp = op.timestamp;
			const time = op.timestamp;
			const d = Date.create(time);
			const now = new Date().getTime();
			if (now - time < 60 * 60 * 24 * 1000) {
				op.timestamp = d.format('{h}:{mm}{TT}');
			} else {
				op.timestamp = d.format('{{Month}} {{dd}}, {{yyyy}} {h}:{mm}{TT}');
			}
		}

		if (d20.Campaign && op.playerid != window.currentPlayer.id) {
			delete whoistyping[op.playerid];
			d20.textchat.updateWhoIsTyping();
		}

		if (op.type == 'gmrollresult') {
			if (!window.is_gm && op.playerid != window.currentPlayer.id) {
				return;
			}
			template_name = 'rollresult';
		}

		if (op.type == 'whisper') {
			if (op.playerid == window.currentPlayer.id) {
				template_name = 'whispersent';
			} else {
				template_name = 'whisperreceived';
				if (op.target == 'gm') {
					if (!window.is_gm) {
						return;
					}
				} else if (op.target.indexOf(window.currentPlayer.id) === -1) {
					return;
				}

				lastWhisperReceived = op;
			}
		}

		if (d20.Campaign) {
			const docheight = $content.height();
			const windowheight = $(window).height();
			const scrolltop = d20.textchat.$textchat.scrollTop();
			var atbottom = false;

			if (docheight - scrolltop - 200 < windowheight) {
				atbottom = true;
			}
		}

		if (op.inlinerolls !== undefined && op.inlinerolls.length > 0) {
			_.each(op.inlinerolls, (aninlineroll) => {
				if (
					aninlineroll.results !== undefined && aninlineroll.results.total !== undefined && aninlineroll.results.total % 1 != 0
				) {
					aninlineroll.results.total = parseFloat(
						aninlineroll.results.total.toPrecision(12),
					); // ROUNDING ERROR BUGFIX
				}
			});
		}

		if (template_name == 'rollresult' && op.origRoll) {
			template_name = 'newroll';
			try {
				const jsonobj = JSON.parse(op.content);
				if (op.signature) {
					if (d20.textchat.verifyRoll(op.id, jsonobj, op.signature)) {
						// Only add the roll if it happened in the last 10 sec. This keeps it from adding all of the games archived rolls to the list when the game loads.
						if (op.realtimestamp && new Date() - op.realtimestamp < 10000) {
							d20.dice_engine.newRoll(op.id);
						}
						op.passedSignature = true;
					} else {
						op.failedSignature = true;
					}
				}
				if (jsonobj.total && jsonobj.total % 1 != 0) {
					jsonobj.total = parseFloat(jsonobj.total.toPrecision(12)); // ROUNDING ERROR BUGFIX
				}
				op.htmlcontent = d20.dice_formatter.getHtmlForResult(jsonobj);
				op.sanitizedOrigRoll = d20.dice_formatter.replaceInlineRolls(
					op.origRoll.replace('<', '&lt;'),
					op,
					'',
				);
			} catch (e) {
				return;
			}
		} else if (
			template_name == 'rollresult' && typeof op.content === 'object'
		) {
			// There was about a 3-week period on dev where this was active. whoops.
			op.content = `${op.content.origformula}|${op.content.formula}|${op.content.total}`;
		}

		const template = $(`#tmpl_chatmessage_${template_name}`);

		if (checkForExisting) {
			var $existingMsg = $content.find(`.message[data-messageid=${op.id}]`);
			if ($existingMsg.find('.avatar').length > 0) {
				op.showname = true;
			} else {
				op.showname = false;
			}
		} else if (op.who !== lastName || linesSinceName > 5) {
			op.showname = true;
			linesSinceName = 0;
		}

		if (
			!op.rolltemplate && template_name != 'rollresult' && template_name != 'newroll' && template_name != 'tokenroll' && template_name != 'direct'
		) {
			op.content = Markdown.parse(`${op.content}`).autoLink();
		}

		if (op.rolltemplate) {
			let templateview = {};

			templateview = d20.textchat.buildRollTemplateViewObj(templateview, op);
			templateview = d20.textchat.handleTemplateViewTranslations(templateview);
			templateview = d20.textchat.buildRollTemplateViewFunctions(
				templateview,
				op,
			);

			op.content = Mustache.render(
				d20.textchat.buildRollTemplateHtml(op),
				templateview,
			);
			op.content = Markdown.parse(op.content);
			op.content = d20.utils.htmlTranslator(op.content, true);
		}

		let translated = template.jqote(op);

		// Replace img element with video if needed
		if (template_name === 'tokenroll') {
			const regex = /<img\s.*src=\"(.*[\w\-]+\.webm(?:\?\d*)?)\"[^>]*>/i;
			translated = translated.replace(
				regex,
				(match, src) => `<video src="${src.replace(
					'/med.webm',
					'/thumb.webm',
				)}" draggable="false" muted autoplay loop />`,
			);
		}

		let messageSelector = ':last-child';

		if (checkForExisting) {
			$existingMsg.replaceWith(translated);
			messageSelector = `[data-messageid=${op.id}]`;
		} else {
			$content.append(translated);
		}

		if (
			(op.type == 'rollresult' || op.type == 'gmrollresult') && d20.Campaign && window.currentPlayer && window.currentPlayer.get('diceiconsenabled')
		) {
			$content
				.find(`.message${messageSelector} .rolled`)
				.draggable({
					revert: true,
					distance: 10,
					revertDuration: 0,
					helper: 'clone',
					appendTo: 'body',
					scroll: false,
				})
				.addTouch();
			let $sorts = $content.find(
				`.message${messageSelector} .formattedformula > .dicegrouping`,
			);
			if ($sorts.find('.diceroll').length < 20) {
				$sorts
					.sortable({
						appendTo: document.body,
						helper: 'clone',
						distance: 10,
						items: '> .diceroll',
						update(e) {
							d20.textchat.updateDiceOrdering(op, e);
						},
					})
					.addTouch();
			}
			$sorts = null;
		}

		if (
			d20.Campaign && window.currentPlayer && template_name == 'newroll' && op.playerid == window.currentPlayer.id
		) {
			try {
				const lastroll = $('#mylastrolls tbody tr').eq(0);
				if (
					lastroll.length == 0 || $.trim(lastroll.find('td.formula').text()) != op.origRoll
				) {
					$('#mylastrolls tbody').prepend($('#tmpl_recentroll').jqote(op));
					$('#mylastrolls tbody tr')
						.eq(10)
						.remove();
				}
			} catch (e) {}
		}

		if (!noremove && $content.find('.message').length > 100) {
			$content
				.find('.message')
				.eq(0)
				.remove();
		}

		if (!checkForExisting) {
			if (
				op.type == 'emote' || op.type == 'gmrollresult' || op.type == 'whisper'
			) {
				lastName = '';
			} else {
				lastName = op.who;
			}
			linesSinceName++;
		}

		if (d20.Campaign && (atbottom || pos === false)) {
			const newheight = $content.height();
			d20.textchat.$textchat.scrollTop(newheight);
		}

		if (
			d20.Campaign && window.currentPlayer.get('chatbeepenabled') && ((!windowIsFocused && !popoutWindowIsFocused) || (!d20.textchat.tabIsFocused && !d20.textchat.childWindow)) && pos != false && !d20.textchat.chatstartingup
		) {
			if (new Date().getTime() - d20.textchat.lastChatBeep > 1000) {
				const snd = new Audio();
				snd.src = `/images/sounds/beep.${
					snd.canPlayType('audio/ogg') ? 'ogg' : 'mp3'
				}`;
				snd.play();

				d20.textchat.lastChatBeep = new Date().getTime();
			}

			if (!d20.textchat.tabIsFocused) {
				$('#textchattab').addClass('alertify');
			}
		}

		if (document.body.className.indexOf('sidebarhidden') !== -1) {
			$('#sidebarcontrol').addClass('alertify');
		}

		if (!d20.textchat.chatstartingup) {
			let basedon3drollid;
			if (op.listenerid) {
				$(document).trigger(`mancerroll:${op.listenerid}`, op);
			}

			if (op.tdseed !== undefined) {
				basedon3drollid = op.id;
			} else if (op.inlinerolls !== undefined && op.inlinerolls.length > 0) {
				_.each(op.inlinerolls, (aninlineroll) => {
					if (aninlineroll.tdseed !== undefined) {
						basedon3drollid = aninlineroll.rollid;
						return false;
					}
				});
			}

			if (basedon3drollid) {
				$content.find(`.message[data-messageid=${op.id}]`).addClass('hidden3d'); // temporarily hide.
				d20.tddice.handleIncomingChatWith3DRoll(basedon3drollid, 1);
				setTimeout(
					() => {
						d20.textchat.showHidden3DRolls();
					},
					d20.tddice.canRoll3D() ? 3000 : 2000,
				);
				d20.textchat.allowed3drolls.push(basedon3drollid);
			}
		}
	};

	d20.textchat.showHidden3DRolls = function () {
		let atbottom = false;

		if (d20.Campaign) {
			const docheight = $content.height();
			const windowheight = $(window).height();
			const scrolltop = d20.textchat.$textchat.scrollTop();

			if (docheight - scrolltop - 200 < windowheight) {
				atbottom = true;
			}
		}

		$content.find('.message.hidden3d').removeClass('hidden3d');

		if (atbottom) {
			const newheight = $content.height();
			d20.textchat.$textchat.scrollTop(newheight);
		}
	};

	d20.textchat.verifyRoll = function (rollid, obj, sig) {
		const sigbase = `${window.campaign_storage_path}//${rollid}//${obj.total}`;
		const isValid = x509.subjectPublicKeyRSA.verifyString(sigbase, sig);
		return isValid;
	};

	d20.textchat.updateDiceOrdering = function (op, e) {
		const $target = $(e.target);
		const groupindex = parseInt($target.attr('data-groupindex'), 10);
		const origobj = JSON.parse(op.content);
		const neworder = [];
		$target.find('.diceroll').each(function () {
			const indx = parseInt($(this).attr('data-origindex'), 10);
			if (
				!origobj.rolls[groupindex] || !origobj.rolls[groupindex].results[indx]
			) {
				console.error(
					`ERROR: Unable to find group ${groupindex} or result ${indx}`,
				);
				return;
			}
			neworder.push(origobj.rolls[groupindex].results[indx]);
		});

		origobj.rolls[groupindex].results = neworder;

		fbref
			.child(op.id)
			.child('content')
			.set(JSON.stringify(origobj));
	};

	d20.textchat.updateWhoIsTyping = function () {
		const docheight = $content.height();
		const windowheight = $(window).height();
		const scrolltop = d20.textchat.$textchat.scrollTop();
		let atbottom = false;

		if (docheight - scrolltop < windowheight - 150) {
			atbottom = true;
		}

		const who = _.values(whoistyping);
		if (who.length == 0) {
			$('#whoistyping').hide();
		} else {
			let verb = 'are';
			if (who.length == 1) {
				verb = 'is';
			}
			$('#whoistyping .names').text(
				`${who.join(', ').replace(/,$/, ' and')} ${verb} typing...`,
			);
			$('#whoistyping').show();
		}

		if (atbottom) {
			const newheight = $content.height();
			d20.textchat.$textchat.scrollTop(newheight);
		}
	};

	const handleShout = function (obj) {
		if (obj.type == 'istyping') {
			if (obj.playerid == window.currentPlayer.id) {
				return;
			}

			if (istypingtimers[obj.playerid]) {
				clearTimeout(istypingtimers[obj.playerid]);
			}

			whoistyping[obj.playerid] = obj.content;

			istypingtimers[obj.playerid] = setTimeout(() => {
				istypingtimers[obj.playerid] = false;
				delete whoistyping[obj.playerid];
				d20.textchat.updateWhoIsTyping();
			}, 5000);

			d20.textchat.updateWhoIsTyping();
		} else if (obj.type == 'shdw_update' || obj.type == 'shdw_kill') {
			d20.engine.handleShadows(obj);
		} else if (obj.type == 'steal_request') {
			d20.decks.steal_request(obj);
		} else if (obj.type == 'steal_response') {
			d20.decks.steal_response(obj);
		} else if (obj.type == 'measuring') {
			d20.engine.receiveMeasureUpdate(obj);
		} else if (obj.type == 'endmeasurement') {
			d20.engine.receiveEndMeasure(obj);
		} else if (obj.type == 'mapping') {
			obj.currentLayer = obj.currentLayer || 'objects';
			obj.api = true;
			d20.engine.receiveMapping(obj);
		}
		// Hide all cells on a given page for the given players.
		else if (obj.type == 'api_reset_fog') {
			_.each(obj.players, (id) => {
				const player = d20.Campaign.players.get(id);
				const revealed = JSON.parse(player.get('adv_fow_revealed'));
				delete revealed[obj.pageid];
				player.save({
					adv_fow_revealed: JSON.stringify(revealed),
				});
			});
			d20.engine.redrawScreenNextTick();
		}
		// Hide all cells on this page for me.
		else if (obj.type == 'clear_page_afow') {
			d20.engine.advanced_fog.clearPage(obj.pageid);
		}
		// Completely clear local revealed cells and reset them to current data from Firebase.
		// Note: If you have local AFoW data that hasn't been sent to Firebase yet, this will erase it.
		else if (obj.type == 'reset_local_afow') {
			for (const player in d20.engine.advanced_fog.revealed_cells) {
				const pages = d20.engine.advanced_fog.revealed_cells[player];
				for (const page in pages) {
					pages[page] = new Set();
				}
			}
			d20.engine.advanced_fog.visible_cells = {};
			for (const player of d20.Campaign.players.models) {
				player.trigger(
					'change:adv_fow_revealed',
					player,
					player.get('adv_fow_revealed'),
				);
			}
			d20.engine.advanced_fog.updateAllVision();
			d20.engine.redrawScreenNextTick();
		}
		// Clear AFoW cells locally to sync with Firebase data after someone used the fog-hide tool.
		// This shout is safe for local data.
		else if (obj.type === 'afow_hide_local') {
			const ids = _.invoke(d20.Campaign.players.models, 'get', 'id');
			if (window.is_gm) {
				ids.push('gm');
			}
			let set;
			for (const player_id of ids) {
				if (
					(set = d20.engine.advanced_fog.revealed_cells[player_id]) && (set = set[obj.page_id])
				) {
					const len = obj.cells.length;
					for (let i = 0; i < len; ++i) {
						set.delete(obj.cells[i]);
					}
				}
			}
			d20.engine.advanced_fog.updateAllVision();
		} else if (obj.type == 'showhandout') {
			d20.journal.showHandoutFromShout(obj);
		} else if (obj.type == 'showcharacter') {
			d20.journal.showCharacterFromShout(obj);
		} else if (obj.type == 'showobject') {
			if (!obj.id) return;
			d20.engine.zoomObject(obj.id);
		} else if (obj.type == '3droll') {
			if (d20.tddice && obj.playerid !== window.currentPlayer.id) {
				d20.tddice.remoteRoll(obj);
			}
		} else if (
			obj.type == 'fx_start' || obj.type == 'fx_update' || obj.type == 'fx_kill'
		) {
			if (obj.playerid === window.currentPlayer.id) return;
			d20.fx.handleShout(obj);
		} else if (obj.type == 'settingschanged') {
			if (new Date().getTime() - obj.time < 5000) {
				window.location.reload();
			}
		} else if (obj.type == 'playclickhole' && obj.content.length > 2) {
			if (window.fakeLightly) {
				window.fakeLightly(
					`http://v.theonion.com/onionstudios/video/${obj.content[0]}/640.mp4`,
				);
			}

			setTimeout(() => {
				$('#lightly-overlay').hide();
			}, obj.content[2] * 1000 + 2000);
		} else if (obj.type === 'roll_received') {
			d20.dice_engine.handleRollReceived(obj);
		} else if (obj.type === 'play_anim_once') {
			let graphic = d20.Campaign.activePage().thegraphics.get(obj.id);
			if (graphic && (graphic = graphic.view.graphic) && graphic.isAnimated) {
				graphic.restartAnimation(true);
			}
		} else if (obj.type === 'explorer_mode_reveal') {
			if (obj.page_id !== d20.Campaign.activePage().id) return;
			const view = obj.data.mode === 'permanent' ? d20.dyn_fog.mask_page_manager.permanentDarknessView : d20.dyn_fog.mask_page_manager.getCurrentPlayerView();

			view.d20 = d20;
			// Call Pagemanager and pass the view and the tool data
			const page = d20.Campaign.activePage();
			const pageWidth = page.get('width') * 70;
			const pageHeight = page.get('height') * 70;
			d20.dyn_fog.unrevealedMask.PageManager.modifyDarkness(
				view,
				obj.data,
				pageWidth,
				pageHeight,
			);
		}
	};

	let textchatpopped;

	d20.textchat.startup = async function () {
		await d20.journal.charsheetFetchPromise;

		let parentRef;

		if (window.GNTKN === 'tutorial') {
			parentRef = new MockFirebaseReference(`${window.FIREBASE_ROOT + window.campaign_storage_path}/`);
		} else {
			parentRef = firebase.database().ref(
				`${window.campaign_storage_path}`,
			);
		}
		shoutref = parentRef.child('shout');
		fbref = parentRef.child('chat');
		textchatpopped = false;
		let sockjs;
		let sockjsactive = false;
		var startupSock = function () {
			sockjs = new SockJS('https://app.roll20.net/sock');
			sockjs.onopen = function () {
				console.log('[*] socket open', sockjs.protocol);
				sockjs.send(
					JSON.stringify({
						t: 'join',
						c: `camp-${window.campaign_id}`,
					}),
				);
				sockjsactive = true;
			};
			sockjs.onmessage = function (e) {
				handleShout(JSON.parse(e.data));
			};
			sockjs.onclose = function () {
				sockjsactive = false;
				console.log('Lost socket, attempting to reconnect in 5 seconds.');
				setTimeout(() => {
					startupSock();
				}, 5000);
			};
		};
		d20.textchat.sendShout = function (msg) {
			if (
				sockjsactive && (msg.type === 'istyping' || msg.type === 'measuring' || msg.type === 'endmeasurement' || msg.type === 'fx_start' || msg.type === 'fx_update' || msg.type === 'fx_kill' || msg.type === 'play_anim_once' || msg.type === 'afow_hide_local')
			) {
				sockjs.send(
					JSON.stringify({
						t: 'msg',
						content: msg,
					}),
				);
			} else {
				d20.textchat.shoutref.set(JSON.stringify(msg));
			}
		};
		d20.textchat.shoutref = shoutref;
		d20.textchat.chatstartingup = true;

		shoutref.on('value', (shoutop) => {
			if (d20.textchat.chatstartingup) {
				return;
			}

			const obj = shoutop.val();
			if (!obj) return;

			handleShout(JSON.parse(obj));
		});

		let chatStartupCache = [];

		const chatfinal = function () {
			function welcomeMessage() {
				d20.textchat.incoming(false, {
					who: 'system',
					type: 'system',
					content: $('#tmpl_welcome_message').jqote(),
				});

				if (d20ext.videotype === 'chrome63') {
					d20.textchat.incoming(false, {
						who: 'system',
						type: 'system',
						content: `**${i18n('chat_chrome63_warning')}**`,
					});
				}
				if (d20ext.videotype === 'chrome63' || d20ext.videotype === 'roll20') {
					d20.textchat.incoming(false, {
						who: 'system',
						type: 'system',
						content: `**${i18n('chat_webrtc_deprecated')}**`,
					});
				}
			}

			for (let i = 0; i < chatStartupCache.length; i++) {
				d20.textchat.incoming(
					!d20.textchat.chatstartingup,
					chatStartupCache[i],
				);
			}

			chatStartupCache = null;

			welcomeMessage();
			inviteLinkMessage();

			d20.textchat.chatstartingup = false;
		};

		const debounced_chatfinal = _.debounce(chatfinal, 1000);

		const fbrefq = fbref.limitToLast(100);
		const allids = [];

		let lastHeardId = false;
		let lastHeardTime = 0;

		const updatechatop = function (pushed_obj) {
			const op = pushed_obj.val();
			op.timestamp = pushed_obj.getPriority();
			op.id = pushed_obj.key;

			if (allids.indexOf(op.id) === -1) {
				allids.push(op.id);
				lastHeardId = op.id;
				lastHeardTime = new Date().getTime();

				if (d20.textchat.chatstartingup) {
					chatStartupCache.push(op);
					debounced_chatfinal();
				} else {
					d20.textchat.incoming(!d20.textchat.chatstartingup, op);
				}
			} else {
				// We get a child_changed right after a child_added for local chat events, so ginore that.
				if (
					!d20.textchat.chatstartingup && (lastHeardId !== op.id || new Date().getTime() - lastHeardTime > 500)
				) {
					d20.textchat.incoming(true, op, true, true);
				}
			}
		};

		fbrefq.on('child_added', (pushed_obj) => {
			updatechatop(pushed_obj);
		});

		fbrefq.on('child_changed', (changed_obj) => {
			updatechatop(changed_obj);
		});

		fbrefq.once('value', () => {
			debounced_chatfinal(); // even if it's empty make sure we get going here!
		});
	};

	let oheight;

	d20.textchat.opendialog = function () {
		oheight = $('#textchat').css('height');
		$('#textchat').dialog({
			title: 'Text Chat',
			beforeClose() {
				$(this).dialog('destroy');
				$(this).appendTo('#rightsidebar');
				$(this)
					.css('height', oheight)
					.css('width', 'auto');
				$(this).show();
			},
		});
	};

	d20.textchat.showPopout = function () {
		if (textchatpopped === true) {
			return;
		}
		const $targetel = $('#textchat');
		const $inputel = $('#textchat-input');
		const $prevdialog = $targetel.parent();
		d20.textchat.childWindow = window.open(
			'/editor/popoutchat',
			'ChatPopout',
			'menubar=0,location=0,toolbar=0,status=0,scrollbars=1,width=300,height=800',
		);
		window.allChildWindows.push(d20.textchat.childWindow);
		// othis.$el.detach();

		d20.textchat.childWindow.onload = function () {
			textchatpopped = true;
			if (d20.journal.customSheets && d20.journal.customSheets.styleel) {
				$(d20.journal.customSheets.styleel)
					.clone()
					.appendTo(d20.textchat.childWindow.document.head);
			}
			$targetel.appendTo(
				d20.textchat.childWindow.document.getElementById('containerdiv'),
			);
			$inputel.appendTo(d20.textchat.childWindow.document.body);
			d20.textchat.$textarea
				.autocomplete('widget')
				.appendTo(d20.textchat.childWindow.document.body);
			d20.textchat.childWindow.document.title = 'Roll20 Chat';
			$targetel.scrollTop($targetel[0].scrollHeight);
			$('#textchattab a').trigger('click');

			const autoGrav = function () {
				if ($(this).hasClass('tipsy-w')) return 'w';
				if ($(this).hasClass('tipsy-e')) return 'e';
				if ($(this).hasClass('tipsy-n')) return 'n';
				if ($(this).hasClass('tipsy-s')) return 's';
				if ($(this).hasClass('tipsy-side')) {
					return $(this).offset().left > $(document).scrollLeft() + $(window).width() / 2
						? 'e'
						: 'w';
				}
				return $(this).offset().top < $(document).scrollTop() + $(window).height() / 2
					? 'n'
					: 's';
			};

			$(d20.textchat.childWindow.document.body)
				.find('.showtip')
				.tipsy({
					live: true,
					gravity: autoGrav,
					opacity: 0.5,
					html: true,
					containerel: $(d20.textchat.childWindow.document.body),
				});
			$(d20.textchat.childWindow.document.body)
				.find('.userscript-showtip')
				.tipsy({
					live: true,
					gravity: autoGrav,
					opacity: 1.0,
					html: true,
					filterhtml: true,
					userscript: true,
					containerel: $(d20.textchat.childWindow.document.body),
				});
			popoutWindowIsFocused = true;

			$(d20.textchat.childWindow.document).on(
				'click',
				'a',
				d20.utils.handleURL,
			);

			if (window.localStorage.getItem('colorTheme') === 'dark') {
				$(d20.textchat.childWindow.document.body).append((0,_setupDarkMode__WEBPACK_IMPORTED_MODULE_5__.createDarkModeCSS)());
			}
		};

		d20.textchat.childWindow.onbeforeunload = function () {
			textchatpopped = false;
			setTimeout(() => {
				$('#rightsidebar')
					.find('a[href=#textchat]')
					.trigger('click');
			}, 100);
			$targetel.appendTo($prevdialog);
			$inputel.appendTo($('body'));
			d20.textchat.$textarea.autocomplete('widget').appendTo($('body'));
			$targetel.scrollTop($targetel[0].scrollHeight);
			window.allChildWindows = _.without(
				window.allChildWindows,
				d20.textchat.childWindow,
			);
			popoutWindowIsFocused = false;
			d20.textchat.childWindow = null;
		};

		$(d20.textchat.childWindow).bind('focus', () => {
			popoutWindowIsFocused = true;
		});

		$(d20.textchat.childWindow).bind('blur', () => {
			popoutWindowIsFocused = false;
		});
	};

	$('#textchattab').on('dblclick', () => {
		d20.textchat.showPopout();
	});

	$('#rightsidebar').resizable({
		handles: 'w',
		alsoResize: '#textchat-input, #rightsidebar .tabmenu',
		minWidth: 300,
		start() {
			$('#editor-wrapper, #canvas-overlay').addClass('noshow');
		},
		resize() {},
		stop() {
			$('#editor-wrapper, #canvas-overlay').removeClass('noshow');
			$(window).trigger('resize');
			$('#rightsidebar')
				.css('left', '')
				.css('height', '100%');
		},
	});
});

// Builds the functions that go into the templateview object, such as rollTotal or rollGreater
d20.textchat.buildRollTemplateViewObj = (templateview, op) => {
	const templatepropsreg = /{{([\s\S]*?}?)}}/gi;
	let tmatch;

	while ((tmatch = templatepropsreg.exec(op.content)) != null) {
		const valuedef = `${tmatch[1]}`;
		const vdsplit = valuedef.split('=');
		const value = valuedef.substring(vdsplit[0].length + 1, valuedef.length);

		if (tmatch.index === templatepropsreg.lastIndex) {
			templatepropsreg.lastIndex++;
		}

		templateview[vdsplit[0]] = value;
		// If this variable is a roll, we need to add a separate entry for the potential computed value
		if (value.match(/\$\[\[\d+\]\]/)) {
			templateview[`computed::${vdsplit[0]}`] = value.replace(']]', '.computed]]');
		}
	}

	return templateview;
};

// Handles the translation strings in a rolltemplate
d20.textchat.handleTemplateViewTranslations = (templateview) => {
	$.each(templateview, (key, value) => {
		if (typeof value !== 'string') return;

		templateview[key] = value.replace(/\^{([^}]+)}/g, (match, i18nKey) => {
			i18nKey = $.trim(i18nKey);
			return i18n(i18nKey, `<span style="color: red;">[${i18nKey}]</span>`);
		});

		const newKey = key.replace(/\^{([^}]+)}/g, (match, i18nKey) => {
			i18nKey = $.trim(i18nKey);
			return i18n(i18nKey, `[${i18nKey}]`);
		});

		if (newKey !== key) {
			templateview[newKey] = templateview[key];
			delete templateview[key];
		}
	});

	return templateview;
};

d20.textchat.buildRollTemplateViewFunctions = (templateview, op) => {
	const validateRollName = (rollname) => {
		if (
			templateview[rollname] !== undefined
			&& typeof templateview[rollname] === 'string'
		) {
			return true;
		}
		return false;
	};

	// Parses string to find index of which roll to use in roll object
	const findRollNum = (rollname) => {
		const adjustedRollName = rollname.replace('computed::', '');
		if (validateRollName(adjustedRollName)) {
			if (templateview[adjustedRollName].includes('$[[') === true) {
				return templateview[adjustedRollName].split('$[[')[1].split(']]')[0];
			}
			return templateview[adjustedRollName];
		}
		return null;
	};

	// Finds the total result of a roll you are looking for
	const findLookingForTotal = (arg) => {
		let lookingFor = arg;

		if (
			lookingFor !== undefined
			&& isNaN(lookingFor)
		) {
			// Parses string to find index in inline rolls object and find associated roll
			// If it's a computed arg, we use the computed property
			if (arg.substring(0, 10) === 'computed::') {
				const roll = op.inlinerolls[findRollNum(arg)];

				lookingFor = roll?.computed;
			} else {
				const roll = op.inlinerolls[templateview[lookingFor].split('$[[')[1].split(']]')[0]];

				lookingFor = roll.results.total;
			}
		}

		return lookingFor;
	};

	const findCompareValue = (rollname, inlineroll) => {
		if (rollname.substring(0, 10) === 'computed::' && inlineroll.computed !== undefined) {
			return parseInt(inlineroll.computed, 10);
		}

		return parseInt(inlineroll.results.total, 10);
	};

	const checkCritOrFumble = (rollname, type = 'crit') => {
		const rollnum = findRollNum(rollname);
		if (op.inlinerolls[rollnum]) {
			return d20.dice_formatter.checkForCrits(op.inlinerolls[rollnum].results.rolls, type);
		}

		return false;
	};

	const checkEquality = (rollname, lookingForTotal) => {
		const rollnum = findRollNum(rollname);
		const inlinerollnum = op.inlinerolls[rollnum];
		const parseLookingForTotal = parseInt(lookingForTotal, 10);
		const compareValue = findCompareValue(rollname, inlinerollnum);

		if (inlinerollnum) {
			return compareValue === parseLookingForTotal;
		}

		return false;
	};

	const checkRollGreater = (rollname, lookingForTotal) => {
		const rollnum = findRollNum(rollname);
		const inlinerollnum = op.inlinerolls[rollnum];
		const parseLookingForTotal = parseInt(lookingForTotal, 10);
		const compareValue = findCompareValue(rollname, inlinerollnum);

		if (inlinerollnum) {
			return compareValue > parseLookingForTotal;
		}

		return false;
	};

	const checkRollLess = (rollname, lookingForTotal) => {
		const rollnum = findRollNum(rollname);
		const inlinerollnum = op.inlinerolls[rollnum];
		const parseLookingForTotal = parseInt(lookingForTotal, 10);
		const compareValue = findCompareValue(rollname, inlinerollnum);

		if (inlinerollnum) {
			return compareValue < parseLookingForTotal;
		}

		return false;
	};

	const checkBetween = (rollname, lookingForTotal, lookingForTotal2) => {
		const rollnum = findRollNum(rollname);
		const inlinerollnum = op.inlinerolls[rollnum];
		const parseLookingForTotal = parseInt(lookingForTotal, 10);
		const parseLookingForTotal2 = parseInt(lookingForTotal2, 10);
		const compareValue = findCompareValue(rollname, inlinerollnum);

		if (inlinerollnum) {
			if (
				compareValue >= parseLookingForTotal
				&& compareValue <= parseLookingForTotal2
			) {
				return true;
			}
			return false;
		}

		return false;
	};

	templateview['rollWasCrit()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args.join(' ');
				return checkCritOrFumble(rollname, 'crit') ? renderfunc(tmpltext) : null;
			} catch (e) {
				return null;
			}
		};
	};

	templateview['^rollWasCrit()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args.join(' ');
				return checkCritOrFumble(rollname, 'crit') ? null : renderfunc(tmpltext);
			} catch (e) {
				return null;
			}
		};
	};

	templateview['rollWasFumble()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args.join(' ');
				return checkCritOrFumble(rollname, 'fumble') ? renderfunc(tmpltext) : null;
			} catch (e) {
				return null;
			}
		};
	};

	templateview['^rollWasFumble()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args.join(' ');
				return checkCritOrFumble(rollname, 'fumble') ? null : renderfunc(tmpltext);
			} catch (e) {
				return null;
			}
		};
	};

	templateview['rollTotal()'] = function () {
		// Note: assumes roll name doesn't contain spaces.
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args[0];
				const lookingForTotal = findLookingForTotal(args[1]);
				return checkEquality(rollname, lookingForTotal) ? renderfunc(tmpltext) : null;
			} catch (e) {
				return null;
			}
		};
	};

	templateview['^rollTotal()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args[0];
				const lookingForTotal = findLookingForTotal(args[1]);
				return checkEquality(rollname, lookingForTotal) ? null : renderfunc(tmpltext);
			} catch (e) {
				return null;
			}
		};
	};

	templateview['rollGreater()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args[0];
				const lookingForTotal = findLookingForTotal(args[1]);
				return checkRollGreater(rollname, lookingForTotal) ? renderfunc(tmpltext) : null;
			} catch (e) {
				return null;
			}
		};
	};

	templateview['^rollGreater()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args[0];
				const lookingForTotal = findLookingForTotal(args[1]);
				return checkRollGreater(rollname, lookingForTotal) ? null : renderfunc(tmpltext);
			} catch (e) {
				return null;
			}
		};
	};

	templateview['rollLess()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args[0];
				const lookingForTotal = findLookingForTotal(args[1]);
				return checkRollLess(rollname, lookingForTotal) ? renderfunc(tmpltext) : null;
			} catch (e) {
				return null;
			}
		};
	};

	templateview['^rollLess()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args[0];
				const lookingForTotal = findLookingForTotal(args[1]);
				return checkRollLess(rollname, lookingForTotal) ? null : renderfunc(tmpltext);
			} catch (e) {
				return null;
			}
		};
	};

	templateview['rollBetween()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args[0];
				const lookingForTotal = findLookingForTotal(args[1]);
				const lookingForTotal2 = findLookingForTotal(args[2]);
				return checkBetween(rollname, lookingForTotal, lookingForTotal2) ? renderfunc(tmpltext) : null;
			} catch (e) {
				return null;
			}
		};
	};

	templateview['^rollBetween()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				const rollname = args[0];
				const lookingForTotal = findLookingForTotal(args[1]);
				const lookingForTotal2 = findLookingForTotal(args[2]);
				return checkBetween(rollname, lookingForTotal, lookingForTotal2) ? null : renderfunc(tmpltext);
			} catch (e) {
				return null;
			}
		};
	};

	templateview['allprops()'] = function () {
		return function (tmpltext, renderfunc, args) {
			try {
				let fullstring = '';

				// eslint-disable-next-line guard-for-in
				for (const tkey in templateview) {
					if (tkey === 'name' || args.indexOf(tkey) !== -1 || tkey.match(/^computed::.+/)) continue;
					if (typeof templateview[tkey] === 'function') continue;

					fullstring += renderfunc(tmpltext.replace('{{key}}', ucfirst(tkey)).replace('{{value}}', templateview[tkey]));
				}
				return fullstring;
			} catch (e) {
				console.error('Error enumerating all properties');
				console.log(e);
			}
			return null;
		};
	};

	return templateview;
};

d20.textchat.buildRollTemplateHtml = (op) => {
	const { journal } = d20;
	const $myrolltemplate = $(`#sheet-rolltemplate-${op.rolltemplate}`);

	if (journal && journal.customSheets && journal.customSheets.rollTemplates[op.rolltemplate]) {
		if (window.localStorage.getItem('colorTheme') === 'dark') {
			return `<div class='sheet-rolltemplate-${op.rolltemplate} sheet-rolltemplate-darkmode'>${journal.customSheets.rollTemplates[op.rolltemplate]}</div>`;
		}
		else{
			return `<div class='sheet-rolltemplate-${op.rolltemplate}'>${journal.customSheets.rollTemplates[op.rolltemplate]}</div>`;
		}
	
	}

	if ($myrolltemplate.length === 0) {
		console.error(`Didn't find a roll template called '${op.rolltemplate}'`);
		return '';
	}

	return `<div class='${$myrolltemplate.attr('id')}'>${$myrolltemplate.html()}</div>`;
};


})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,